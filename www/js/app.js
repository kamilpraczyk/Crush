(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global){
/* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2013-2015 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
/**
 * bluebird build version 3.4.0
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
*/
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var SomePromiseArray = Promise._SomePromiseArray;
function any(promises) {
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(1);
    ret.setUnwrap();
    ret.init();
    return promise;
}

Promise.any = function (promises) {
    return any(promises);
};

Promise.prototype.any = function () {
    return any(this);
};

};

},{}],2:[function(_dereq_,module,exports){
"use strict";
var firstLineError;
try {throw new Error(); } catch (e) {firstLineError = e;}
var schedule = _dereq_("./schedule");
var Queue = _dereq_("./queue");
var util = _dereq_("./util");

function Async() {
    this._customScheduler = false;
    this._isTickUsed = false;
    this._lateQueue = new Queue(16);
    this._normalQueue = new Queue(16);
    this._haveDrainedQueues = false;
    this._trampolineEnabled = true;
    var self = this;
    this.drainQueues = function () {
        self._drainQueues();
    };
    this._schedule = schedule;
}

Async.prototype.setScheduler = function(fn) {
    var prev = this._schedule;
    this._schedule = fn;
    this._customScheduler = true;
    return prev;
};

Async.prototype.hasCustomScheduler = function() {
    return this._customScheduler;
};

Async.prototype.enableTrampoline = function() {
    this._trampolineEnabled = true;
};

Async.prototype.disableTrampolineIfNecessary = function() {
    if (util.hasDevTools) {
        this._trampolineEnabled = false;
    }
};

Async.prototype.haveItemsQueued = function () {
    return this._isTickUsed || this._haveDrainedQueues;
};


Async.prototype.fatalError = function(e, isNode) {
    if (isNode) {
        process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
            "\n");
        process.exit(2);
    } else {
        this.throwLater(e);
    }
};

Async.prototype.throwLater = function(fn, arg) {
    if (arguments.length === 1) {
        arg = fn;
        fn = function () { throw arg; };
    }
    if (typeof setTimeout !== "undefined") {
        setTimeout(function() {
            fn(arg);
        }, 0);
    } else try {
        this._schedule(function() {
            fn(arg);
        });
    } catch (e) {
        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
};

function AsyncInvokeLater(fn, receiver, arg) {
    this._lateQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncInvoke(fn, receiver, arg) {
    this._normalQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncSettlePromises(promise) {
    this._normalQueue._pushOne(promise);
    this._queueTick();
}

if (!util.hasDevTools) {
    Async.prototype.invokeLater = AsyncInvokeLater;
    Async.prototype.invoke = AsyncInvoke;
    Async.prototype.settlePromises = AsyncSettlePromises;
} else {
    Async.prototype.invokeLater = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvokeLater.call(this, fn, receiver, arg);
        } else {
            this._schedule(function() {
                setTimeout(function() {
                    fn.call(receiver, arg);
                }, 100);
            });
        }
    };

    Async.prototype.invoke = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvoke.call(this, fn, receiver, arg);
        } else {
            this._schedule(function() {
                fn.call(receiver, arg);
            });
        }
    };

    Async.prototype.settlePromises = function(promise) {
        if (this._trampolineEnabled) {
            AsyncSettlePromises.call(this, promise);
        } else {
            this._schedule(function() {
                promise._settlePromises();
            });
        }
    };
}

Async.prototype.invokeFirst = function (fn, receiver, arg) {
    this._normalQueue.unshift(fn, receiver, arg);
    this._queueTick();
};

Async.prototype._drainQueue = function(queue) {
    while (queue.length() > 0) {
        var fn = queue.shift();
        if (typeof fn !== "function") {
            fn._settlePromises();
            continue;
        }
        var receiver = queue.shift();
        var arg = queue.shift();
        fn.call(receiver, arg);
    }
};

Async.prototype._drainQueues = function () {
    this._drainQueue(this._normalQueue);
    this._reset();
    this._haveDrainedQueues = true;
    this._drainQueue(this._lateQueue);
};

Async.prototype._queueTick = function () {
    if (!this._isTickUsed) {
        this._isTickUsed = true;
        this._schedule(this.drainQueues);
    }
};

Async.prototype._reset = function () {
    this._isTickUsed = false;
};

module.exports = Async;
module.exports.firstLineError = firstLineError;

},{"./queue":26,"./schedule":29,"./util":36}],3:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) {
var calledBind = false;
var rejectThis = function(_, e) {
    this._reject(e);
};

var targetRejected = function(e, context) {
    context.promiseRejectionQueued = true;
    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
};

var bindingResolved = function(thisArg, context) {
    if (((this._bitField & 50397184) === 0)) {
        this._resolveCallback(context.target);
    }
};

var bindingRejected = function(e, context) {
    if (!context.promiseRejectionQueued) this._reject(e);
};

Promise.prototype.bind = function (thisArg) {
    if (!calledBind) {
        calledBind = true;
        Promise.prototype._propagateFrom = debug.propagateFromFunction();
        Promise.prototype._boundValue = debug.boundValueFunction();
    }
    var maybePromise = tryConvertToPromise(thisArg);
    var ret = new Promise(INTERNAL);
    ret._propagateFrom(this, 1);
    var target = this._target();
    ret._setBoundTo(maybePromise);
    if (maybePromise instanceof Promise) {
        var context = {
            promiseRejectionQueued: false,
            promise: ret,
            target: target,
            bindingPromise: maybePromise
        };
        target._then(INTERNAL, targetRejected, undefined, ret, context);
        maybePromise._then(
            bindingResolved, bindingRejected, undefined, ret, context);
        ret._setOnCancel(maybePromise);
    } else {
        ret._resolveCallback(target);
    }
    return ret;
};

Promise.prototype._setBoundTo = function (obj) {
    if (obj !== undefined) {
        this._bitField = this._bitField | 2097152;
        this._boundTo = obj;
    } else {
        this._bitField = this._bitField & (~2097152);
    }
};

Promise.prototype._isBound = function () {
    return (this._bitField & 2097152) === 2097152;
};

Promise.bind = function (thisArg, value) {
    return Promise.resolve(value).bind(thisArg);
};
};

},{}],4:[function(_dereq_,module,exports){
"use strict";
var old;
if (typeof Promise !== "undefined") old = Promise;
function noConflict() {
    try { if (Promise === bluebird) Promise = old; }
    catch (e) {}
    return bluebird;
}
var bluebird = _dereq_("./promise")();
bluebird.noConflict = noConflict;
module.exports = bluebird;

},{"./promise":22}],5:[function(_dereq_,module,exports){
"use strict";
var cr = Object.create;
if (cr) {
    var callerCache = cr(null);
    var getterCache = cr(null);
    callerCache[" size"] = getterCache[" size"] = 0;
}

module.exports = function(Promise) {
var util = _dereq_("./util");
var canEvaluate = util.canEvaluate;
var isIdentifier = util.isIdentifier;

var getMethodCaller;
var getGetter;
if (!true) {
var makeMethodCaller = function (methodName) {
    return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
};

var makeGetter = function (propertyName) {
    return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
};

var getCompiled = function(name, compiler, cache) {
    var ret = cache[name];
    if (typeof ret !== "function") {
        if (!isIdentifier(name)) {
            return null;
        }
        ret = compiler(name);
        cache[name] = ret;
        cache[" size"]++;
        if (cache[" size"] > 512) {
            var keys = Object.keys(cache);
            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
            cache[" size"] = keys.length - 256;
        }
    }
    return ret;
};

getMethodCaller = function(name) {
    return getCompiled(name, makeMethodCaller, callerCache);
};

getGetter = function(name) {
    return getCompiled(name, makeGetter, getterCache);
};
}

function ensureMethod(obj, methodName) {
    var fn;
    if (obj != null) fn = obj[methodName];
    if (typeof fn !== "function") {
        var message = "Object " + util.classString(obj) + " has no method '" +
            util.toString(methodName) + "'";
        throw new Promise.TypeError(message);
    }
    return fn;
}

function caller(obj) {
    var methodName = this.pop();
    var fn = ensureMethod(obj, methodName);
    return fn.apply(obj, this);
}
Promise.prototype.call = function (methodName) {
    var args = [].slice.call(arguments, 1);;
    if (!true) {
        if (canEvaluate) {
            var maybeCaller = getMethodCaller(methodName);
            if (maybeCaller !== null) {
                return this._then(
                    maybeCaller, undefined, undefined, args, undefined);
            }
        }
    }
    args.push(methodName);
    return this._then(caller, undefined, undefined, args, undefined);
};

function namedGetter(obj) {
    return obj[this];
}
function indexedGetter(obj) {
    var index = +this;
    if (index < 0) index = Math.max(0, index + obj.length);
    return obj[index];
}
Promise.prototype.get = function (propertyName) {
    var isIndex = (typeof propertyName === "number");
    var getter;
    if (!isIndex) {
        if (canEvaluate) {
            var maybeGetter = getGetter(propertyName);
            getter = maybeGetter !== null ? maybeGetter : namedGetter;
        } else {
            getter = namedGetter;
        }
    } else {
        getter = indexedGetter;
    }
    return this._then(getter, undefined, undefined, propertyName, undefined);
};
};

},{"./util":36}],6:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, PromiseArray, apiRejection, debug) {
var util = _dereq_("./util");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var async = Promise._async;

Promise.prototype["break"] = Promise.prototype.cancel = function() {
    if (!debug.cancellation()) return this._warn("cancellation is disabled");

    var promise = this;
    var child = promise;
    while (promise.isCancellable()) {
        if (!promise._cancelBy(child)) {
            if (child._isFollowing()) {
                child._followee().cancel();
            } else {
                child._cancelBranched();
            }
            break;
        }

        var parent = promise._cancellationParent;
        if (parent == null || !parent.isCancellable()) {
            if (promise._isFollowing()) {
                promise._followee().cancel();
            } else {
                promise._cancelBranched();
            }
            break;
        } else {
            if (promise._isFollowing()) promise._followee().cancel();
            child = promise;
            promise = parent;
        }
    }
};

Promise.prototype._branchHasCancelled = function() {
    this._branchesRemainingToCancel--;
};

Promise.prototype._enoughBranchesHaveCancelled = function() {
    return this._branchesRemainingToCancel === undefined ||
           this._branchesRemainingToCancel <= 0;
};

Promise.prototype._cancelBy = function(canceller) {
    if (canceller === this) {
        this._branchesRemainingToCancel = 0;
        this._invokeOnCancel();
        return true;
    } else {
        this._branchHasCancelled();
        if (this._enoughBranchesHaveCancelled()) {
            this._invokeOnCancel();
            return true;
        }
    }
    return false;
};

Promise.prototype._cancelBranched = function() {
    if (this._enoughBranchesHaveCancelled()) {
        this._cancel();
    }
};

Promise.prototype._cancel = function() {
    if (!this.isCancellable()) return;

    this._setCancelled();
    async.invoke(this._cancelPromises, this, undefined);
};

Promise.prototype._cancelPromises = function() {
    if (this._length() > 0) this._settlePromises();
};

Promise.prototype._unsetOnCancel = function() {
    this._onCancelField = undefined;
};

Promise.prototype.isCancellable = function() {
    return this.isPending() && !this.isCancelled();
};

Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
    if (util.isArray(onCancelCallback)) {
        for (var i = 0; i < onCancelCallback.length; ++i) {
            this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
        }
    } else if (onCancelCallback !== undefined) {
        if (typeof onCancelCallback === "function") {
            if (!internalOnly) {
                var e = tryCatch(onCancelCallback).call(this._boundValue());
                if (e === errorObj) {
                    this._attachExtraTrace(e.e);
                    async.throwLater(e.e);
                }
            }
        } else {
            onCancelCallback._resultCancelled(this);
        }
    }
};

Promise.prototype._invokeOnCancel = function() {
    var onCancelCallback = this._onCancel();
    this._unsetOnCancel();
    async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
};

Promise.prototype._invokeInternalOnCancel = function() {
    if (this.isCancellable()) {
        this._doInvokeOnCancel(this._onCancel(), true);
        this._unsetOnCancel();
    }
};

Promise.prototype._resultCancelled = function() {
    this.cancel();
};

};

},{"./util":36}],7:[function(_dereq_,module,exports){
"use strict";
module.exports = function(NEXT_FILTER) {
var util = _dereq_("./util");
var getKeys = _dereq_("./es5").keys;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function catchFilter(instances, cb, promise) {
    return function(e) {
        var boundTo = promise._boundValue();
        predicateLoop: for (var i = 0; i < instances.length; ++i) {
            var item = instances[i];

            if (item === Error ||
                (item != null && item.prototype instanceof Error)) {
                if (e instanceof item) {
                    return tryCatch(cb).call(boundTo, e);
                }
            } else if (typeof item === "function") {
                var matchesPredicate = tryCatch(item).call(boundTo, e);
                if (matchesPredicate === errorObj) {
                    return matchesPredicate;
                } else if (matchesPredicate) {
                    return tryCatch(cb).call(boundTo, e);
                }
            } else if (util.isObject(e)) {
                var keys = getKeys(item);
                for (var j = 0; j < keys.length; ++j) {
                    var key = keys[j];
                    if (item[key] != e[key]) {
                        continue predicateLoop;
                    }
                }
                return tryCatch(cb).call(boundTo, e);
            }
        }
        return NEXT_FILTER;
    };
}

return catchFilter;
};

},{"./es5":13,"./util":36}],8:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var longStackTraces = false;
var contextStack = [];

Promise.prototype._promiseCreated = function() {};
Promise.prototype._pushContext = function() {};
Promise.prototype._popContext = function() {return null;};
Promise._peekContext = Promise.prototype._peekContext = function() {};

function Context() {
    this._trace = new Context.CapturedTrace(peekContext());
}
Context.prototype._pushContext = function () {
    if (this._trace !== undefined) {
        this._trace._promiseCreated = null;
        contextStack.push(this._trace);
    }
};

Context.prototype._popContext = function () {
    if (this._trace !== undefined) {
        var trace = contextStack.pop();
        var ret = trace._promiseCreated;
        trace._promiseCreated = null;
        return ret;
    }
    return null;
};

function createContext() {
    if (longStackTraces) return new Context();
}

function peekContext() {
    var lastIndex = contextStack.length - 1;
    if (lastIndex >= 0) {
        return contextStack[lastIndex];
    }
    return undefined;
}
Context.CapturedTrace = null;
Context.create = createContext;
Context.deactivateLongStackTraces = function() {};
Context.activateLongStackTraces = function() {
    var Promise_pushContext = Promise.prototype._pushContext;
    var Promise_popContext = Promise.prototype._popContext;
    var Promise_PeekContext = Promise._peekContext;
    var Promise_peekContext = Promise.prototype._peekContext;
    var Promise_promiseCreated = Promise.prototype._promiseCreated;
    Context.deactivateLongStackTraces = function() {
        Promise.prototype._pushContext = Promise_pushContext;
        Promise.prototype._popContext = Promise_popContext;
        Promise._peekContext = Promise_PeekContext;
        Promise.prototype._peekContext = Promise_peekContext;
        Promise.prototype._promiseCreated = Promise_promiseCreated;
        longStackTraces = false;
    };
    longStackTraces = true;
    Promise.prototype._pushContext = Context.prototype._pushContext;
    Promise.prototype._popContext = Context.prototype._popContext;
    Promise._peekContext = Promise.prototype._peekContext = peekContext;
    Promise.prototype._promiseCreated = function() {
        var ctx = this._peekContext();
        if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
    };
};
return Context;
};

},{}],9:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, Context) {
var getDomain = Promise._getDomain;
var async = Promise._async;
var Warning = _dereq_("./errors").Warning;
var util = _dereq_("./util");
var canAttachTrace = util.canAttachTrace;
var unhandledRejectionHandled;
var possiblyUnhandledRejection;
var bluebirdFramePattern =
    /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
var stackFramePattern = null;
var formatStack = null;
var indentStackFrames = false;
var printWarning;
var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
                        (true ||
                         util.env("BLUEBIRD_DEBUG") ||
                         util.env("NODE_ENV") === "development"));

var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
    (debugging || util.env("BLUEBIRD_WARNINGS")));

var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
    (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
    (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

Promise.prototype.suppressUnhandledRejections = function() {
    var target = this._target();
    target._bitField = ((target._bitField & (~1048576)) |
                      524288);
};

Promise.prototype._ensurePossibleRejectionHandled = function () {
    if ((this._bitField & 524288) !== 0) return;
    this._setRejectionIsUnhandled();
    async.invokeLater(this._notifyUnhandledRejection, this, undefined);
};

Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
    fireRejectionEvent("rejectionHandled",
                                  unhandledRejectionHandled, undefined, this);
};

Promise.prototype._setReturnedNonUndefined = function() {
    this._bitField = this._bitField | 268435456;
};

Promise.prototype._returnedNonUndefined = function() {
    return (this._bitField & 268435456) !== 0;
};

Promise.prototype._notifyUnhandledRejection = function () {
    if (this._isRejectionUnhandled()) {
        var reason = this._settledValue();
        this._setUnhandledRejectionIsNotified();
        fireRejectionEvent("unhandledRejection",
                                      possiblyUnhandledRejection, reason, this);
    }
};

Promise.prototype._setUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField | 262144;
};

Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField & (~262144);
};

Promise.prototype._isUnhandledRejectionNotified = function () {
    return (this._bitField & 262144) > 0;
};

Promise.prototype._setRejectionIsUnhandled = function () {
    this._bitField = this._bitField | 1048576;
};

Promise.prototype._unsetRejectionIsUnhandled = function () {
    this._bitField = this._bitField & (~1048576);
    if (this._isUnhandledRejectionNotified()) {
        this._unsetUnhandledRejectionIsNotified();
        this._notifyUnhandledRejectionIsHandled();
    }
};

Promise.prototype._isRejectionUnhandled = function () {
    return (this._bitField & 1048576) > 0;
};

Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
    return warn(message, shouldUseOwnTrace, promise || this);
};

Promise.onPossiblyUnhandledRejection = function (fn) {
    var domain = getDomain();
    possiblyUnhandledRejection =
        typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                 : undefined;
};

Promise.onUnhandledRejectionHandled = function (fn) {
    var domain = getDomain();
    unhandledRejectionHandled =
        typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                 : undefined;
};

var disableLongStackTraces = function() {};
Promise.longStackTraces = function () {
    if (async.haveItemsQueued() && !config.longStackTraces) {
        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    if (!config.longStackTraces && longStackTracesIsSupported()) {
        var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
        var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
        config.longStackTraces = true;
        disableLongStackTraces = function() {
            if (async.haveItemsQueued() && !config.longStackTraces) {
                throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
            }
            Promise.prototype._captureStackTrace = Promise_captureStackTrace;
            Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
            Context.deactivateLongStackTraces();
            async.enableTrampoline();
            config.longStackTraces = false;
        };
        Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
        Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
        Context.activateLongStackTraces();
        async.disableTrampolineIfNecessary();
    }
};

Promise.hasLongStackTraces = function () {
    return config.longStackTraces && longStackTracesIsSupported();
};

var fireDomEvent = (function() {
    try {
        var event = document.createEvent("CustomEvent");
        event.initCustomEvent("testingtheevent", false, true, {});
        util.global.dispatchEvent(event);
        return function(name, event) {
            var domEvent = document.createEvent("CustomEvent");
            domEvent.initCustomEvent(name.toLowerCase(), false, true, event);
            return !util.global.dispatchEvent(domEvent);
        };
    } catch (e) {}
    return function() {
        return false;
    };
})();

var fireGlobalEvent = (function() {
    if (util.isNode) {
        return function() {
            return process.emit.apply(process, arguments);
        };
    } else {
        if (!util.global) {
            return function() {
                return false;
            };
        }
        return function(name) {
            var methodName = "on" + name.toLowerCase();
            var method = util.global[methodName];
            if (!method) return false;
            method.apply(util.global, [].slice.call(arguments, 1));
            return true;
        };
    }
})();

function generatePromiseLifecycleEventObject(name, promise) {
    return {promise: promise};
}

var eventToObjectGenerator = {
    promiseCreated: generatePromiseLifecycleEventObject,
    promiseFulfilled: generatePromiseLifecycleEventObject,
    promiseRejected: generatePromiseLifecycleEventObject,
    promiseResolved: generatePromiseLifecycleEventObject,
    promiseCancelled: generatePromiseLifecycleEventObject,
    promiseChained: function(name, promise, child) {
        return {promise: promise, child: child};
    },
    warning: function(name, warning) {
        return {warning: warning};
    },
    unhandledRejection: function (name, reason, promise) {
        return {reason: reason, promise: promise};
    },
    rejectionHandled: generatePromiseLifecycleEventObject
};

var activeFireEvent = function (name) {
    var globalEventFired = false;
    try {
        globalEventFired = fireGlobalEvent.apply(null, arguments);
    } catch (e) {
        async.throwLater(e);
        globalEventFired = true;
    }

    var domEventFired = false;
    try {
        domEventFired = fireDomEvent(name,
                    eventToObjectGenerator[name].apply(null, arguments));
    } catch (e) {
        async.throwLater(e);
        domEventFired = true;
    }

    return domEventFired || globalEventFired;
};

Promise.config = function(opts) {
    opts = Object(opts);
    if ("longStackTraces" in opts) {
        if (opts.longStackTraces) {
            Promise.longStackTraces();
        } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
            disableLongStackTraces();
        }
    }
    if ("warnings" in opts) {
        var warningsOption = opts.warnings;
        config.warnings = !!warningsOption;
        wForgottenReturn = config.warnings;

        if (util.isObject(warningsOption)) {
            if ("wForgottenReturn" in warningsOption) {
                wForgottenReturn = !!warningsOption.wForgottenReturn;
            }
        }
    }
    if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
        if (async.haveItemsQueued()) {
            throw new Error(
                "cannot enable cancellation after promises are in use");
        }
        Promise.prototype._clearCancellationData =
            cancellationClearCancellationData;
        Promise.prototype._propagateFrom = cancellationPropagateFrom;
        Promise.prototype._onCancel = cancellationOnCancel;
        Promise.prototype._setOnCancel = cancellationSetOnCancel;
        Promise.prototype._attachCancellationCallback =
            cancellationAttachCancellationCallback;
        Promise.prototype._execute = cancellationExecute;
        propagateFromFunction = cancellationPropagateFrom;
        config.cancellation = true;
    }
    if ("monitoring" in opts) {
        if (opts.monitoring && !config.monitoring) {
            config.monitoring = true;
            Promise.prototype._fireEvent = activeFireEvent;
        } else if (!opts.monitoring && config.monitoring) {
            config.monitoring = false;
            Promise.prototype._fireEvent = defaultFireEvent;
        }
    }
};

function defaultFireEvent() { return false; }

Promise.prototype._fireEvent = defaultFireEvent;
Promise.prototype._execute = function(executor, resolve, reject) {
    try {
        executor(resolve, reject);
    } catch (e) {
        return e;
    }
};
Promise.prototype._onCancel = function () {};
Promise.prototype._setOnCancel = function (handler) { ; };
Promise.prototype._attachCancellationCallback = function(onCancel) {
    ;
};
Promise.prototype._captureStackTrace = function () {};
Promise.prototype._attachExtraTrace = function () {};
Promise.prototype._clearCancellationData = function() {};
Promise.prototype._propagateFrom = function (parent, flags) {
    ;
    ;
};

function cancellationExecute(executor, resolve, reject) {
    var promise = this;
    try {
        executor(resolve, reject, function(onCancel) {
            if (typeof onCancel !== "function") {
                throw new TypeError("onCancel must be a function, got: " +
                                    util.toString(onCancel));
            }
            promise._attachCancellationCallback(onCancel);
        });
    } catch (e) {
        return e;
    }
}

function cancellationAttachCancellationCallback(onCancel) {
    if (!this.isCancellable()) return this;

    var previousOnCancel = this._onCancel();
    if (previousOnCancel !== undefined) {
        if (util.isArray(previousOnCancel)) {
            previousOnCancel.push(onCancel);
        } else {
            this._setOnCancel([previousOnCancel, onCancel]);
        }
    } else {
        this._setOnCancel(onCancel);
    }
}

function cancellationOnCancel() {
    return this._onCancelField;
}

function cancellationSetOnCancel(onCancel) {
    this._onCancelField = onCancel;
}

function cancellationClearCancellationData() {
    this._cancellationParent = undefined;
    this._onCancelField = undefined;
}

function cancellationPropagateFrom(parent, flags) {
    if ((flags & 1) !== 0) {
        this._cancellationParent = parent;
        var branchesRemainingToCancel = parent._branchesRemainingToCancel;
        if (branchesRemainingToCancel === undefined) {
            branchesRemainingToCancel = 0;
        }
        parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
    }
    if ((flags & 2) !== 0 && parent._isBound()) {
        this._setBoundTo(parent._boundTo);
    }
}

function bindingPropagateFrom(parent, flags) {
    if ((flags & 2) !== 0 && parent._isBound()) {
        this._setBoundTo(parent._boundTo);
    }
}
var propagateFromFunction = bindingPropagateFrom;

function boundValueFunction() {
    var ret = this._boundTo;
    if (ret !== undefined) {
        if (ret instanceof Promise) {
            if (ret.isFulfilled()) {
                return ret.value();
            } else {
                return undefined;
            }
        }
    }
    return ret;
}

function longStackTracesCaptureStackTrace() {
    this._trace = new CapturedTrace(this._peekContext());
}

function longStackTracesAttachExtraTrace(error, ignoreSelf) {
    if (canAttachTrace(error)) {
        var trace = this._trace;
        if (trace !== undefined) {
            if (ignoreSelf) trace = trace._parent;
        }
        if (trace !== undefined) {
            trace.attachExtraTrace(error);
        } else if (!error.__stackCleaned__) {
            var parsed = parseStackAndMessage(error);
            util.notEnumerableProp(error, "stack",
                parsed.message + "\n" + parsed.stack.join("\n"));
            util.notEnumerableProp(error, "__stackCleaned__", true);
        }
    }
}

function checkForgottenReturns(returnValue, promiseCreated, name, promise,
                               parent) {
    if (returnValue === undefined && promiseCreated !== null &&
        wForgottenReturn) {
        if (parent !== undefined && parent._returnedNonUndefined()) return;
        if ((promise._bitField & 65535) === 0) return;

        if (name) name = name + " ";
        var msg = "a promise was created in a " + name +
            "handler but was not returned from it";
        promise._warn(msg, true, promiseCreated);
    }
}

function deprecated(name, replacement) {
    var message = name +
        " is deprecated and will be removed in a future version.";
    if (replacement) message += " Use " + replacement + " instead.";
    return warn(message);
}

function warn(message, shouldUseOwnTrace, promise) {
    if (!config.warnings) return;
    var warning = new Warning(message);
    var ctx;
    if (shouldUseOwnTrace) {
        promise._attachExtraTrace(warning);
    } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
        ctx.attachExtraTrace(warning);
    } else {
        var parsed = parseStackAndMessage(warning);
        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
    }

    if (!activeFireEvent("warning", warning)) {
        formatAndLogError(warning, "", true);
    }
}

function reconstructStack(message, stacks) {
    for (var i = 0; i < stacks.length - 1; ++i) {
        stacks[i].push("From previous event:");
        stacks[i] = stacks[i].join("\n");
    }
    if (i < stacks.length) {
        stacks[i] = stacks[i].join("\n");
    }
    return message + "\n" + stacks.join("\n");
}

function removeDuplicateOrEmptyJumps(stacks) {
    for (var i = 0; i < stacks.length; ++i) {
        if (stacks[i].length === 0 ||
            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
            stacks.splice(i, 1);
            i--;
        }
    }
}

function removeCommonRoots(stacks) {
    var current = stacks[0];
    for (var i = 1; i < stacks.length; ++i) {
        var prev = stacks[i];
        var currentLastIndex = current.length - 1;
        var currentLastLine = current[currentLastIndex];
        var commonRootMeetPoint = -1;

        for (var j = prev.length - 1; j >= 0; --j) {
            if (prev[j] === currentLastLine) {
                commonRootMeetPoint = j;
                break;
            }
        }

        for (var j = commonRootMeetPoint; j >= 0; --j) {
            var line = prev[j];
            if (current[currentLastIndex] === line) {
                current.pop();
                currentLastIndex--;
            } else {
                break;
            }
        }
        current = prev;
    }
}

function cleanStack(stack) {
    var ret = [];
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        var isTraceLine = "    (No stack trace)" === line ||
            stackFramePattern.test(line);
        var isInternalFrame = isTraceLine && shouldIgnore(line);
        if (isTraceLine && !isInternalFrame) {
            if (indentStackFrames && line.charAt(0) !== " ") {
                line = "    " + line;
            }
            ret.push(line);
        }
    }
    return ret;
}

function stackFramesAsArray(error) {
    var stack = error.stack.replace(/\s+$/g, "").split("\n");
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
            break;
        }
    }
    if (i > 0) {
        stack = stack.slice(i);
    }
    return stack;
}

function parseStackAndMessage(error) {
    var stack = error.stack;
    var message = error.toString();
    stack = typeof stack === "string" && stack.length > 0
                ? stackFramesAsArray(error) : ["    (No stack trace)"];
    return {
        message: message,
        stack: cleanStack(stack)
    };
}

function formatAndLogError(error, title, isSoft) {
    if (typeof console !== "undefined") {
        var message;
        if (util.isObject(error)) {
            var stack = error.stack;
            message = title + formatStack(stack, error);
        } else {
            message = title + String(error);
        }
        if (typeof printWarning === "function") {
            printWarning(message, isSoft);
        } else if (typeof console.log === "function" ||
            typeof console.log === "object") {
            console.log(message);
        }
    }
}

function fireRejectionEvent(name, localHandler, reason, promise) {
    var localEventFired = false;
    try {
        if (typeof localHandler === "function") {
            localEventFired = true;
            if (name === "rejectionHandled") {
                localHandler(promise);
            } else {
                localHandler(reason, promise);
            }
        }
    } catch (e) {
        async.throwLater(e);
    }

    if (name === "unhandledRejection") {
        if (!activeFireEvent(name, reason, promise) && !localEventFired) {
            formatAndLogError(reason, "Unhandled rejection ");
        }
    } else {
        activeFireEvent(name, promise);
    }
}

function formatNonError(obj) {
    var str;
    if (typeof obj === "function") {
        str = "[function " +
            (obj.name || "anonymous") +
            "]";
    } else {
        str = obj && typeof obj.toString === "function"
            ? obj.toString() : util.toString(obj);
        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
        if (ruselessToString.test(str)) {
            try {
                var newStr = JSON.stringify(obj);
                str = newStr;
            }
            catch(e) {

            }
        }
        if (str.length === 0) {
            str = "(empty array)";
        }
    }
    return ("(<" + snip(str) + ">, no stack trace)");
}

function snip(str) {
    var maxChars = 41;
    if (str.length < maxChars) {
        return str;
    }
    return str.substr(0, maxChars - 3) + "...";
}

function longStackTracesIsSupported() {
    return typeof captureStackTrace === "function";
}

var shouldIgnore = function() { return false; };
var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
function parseLineInfo(line) {
    var matches = line.match(parseLineInfoRegex);
    if (matches) {
        return {
            fileName: matches[1],
            line: parseInt(matches[2], 10)
        };
    }
}

function setBounds(firstLineError, lastLineError) {
    if (!longStackTracesIsSupported()) return;
    var firstStackLines = firstLineError.stack.split("\n");
    var lastStackLines = lastLineError.stack.split("\n");
    var firstIndex = -1;
    var lastIndex = -1;
    var firstFileName;
    var lastFileName;
    for (var i = 0; i < firstStackLines.length; ++i) {
        var result = parseLineInfo(firstStackLines[i]);
        if (result) {
            firstFileName = result.fileName;
            firstIndex = result.line;
            break;
        }
    }
    for (var i = 0; i < lastStackLines.length; ++i) {
        var result = parseLineInfo(lastStackLines[i]);
        if (result) {
            lastFileName = result.fileName;
            lastIndex = result.line;
            break;
        }
    }
    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
        firstFileName !== lastFileName || firstIndex >= lastIndex) {
        return;
    }

    shouldIgnore = function(line) {
        if (bluebirdFramePattern.test(line)) return true;
        var info = parseLineInfo(line);
        if (info) {
            if (info.fileName === firstFileName &&
                (firstIndex <= info.line && info.line <= lastIndex)) {
                return true;
            }
        }
        return false;
    };
}

function CapturedTrace(parent) {
    this._parent = parent;
    this._promisesCreated = 0;
    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
    captureStackTrace(this, CapturedTrace);
    if (length > 32) this.uncycle();
}
util.inherits(CapturedTrace, Error);
Context.CapturedTrace = CapturedTrace;

CapturedTrace.prototype.uncycle = function() {
    var length = this._length;
    if (length < 2) return;
    var nodes = [];
    var stackToIndex = {};

    for (var i = 0, node = this; node !== undefined; ++i) {
        nodes.push(node);
        node = node._parent;
    }
    length = this._length = i;
    for (var i = length - 1; i >= 0; --i) {
        var stack = nodes[i].stack;
        if (stackToIndex[stack] === undefined) {
            stackToIndex[stack] = i;
        }
    }
    for (var i = 0; i < length; ++i) {
        var currentStack = nodes[i].stack;
        var index = stackToIndex[currentStack];
        if (index !== undefined && index !== i) {
            if (index > 0) {
                nodes[index - 1]._parent = undefined;
                nodes[index - 1]._length = 1;
            }
            nodes[i]._parent = undefined;
            nodes[i]._length = 1;
            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

            if (index < length - 1) {
                cycleEdgeNode._parent = nodes[index + 1];
                cycleEdgeNode._parent.uncycle();
                cycleEdgeNode._length =
                    cycleEdgeNode._parent._length + 1;
            } else {
                cycleEdgeNode._parent = undefined;
                cycleEdgeNode._length = 1;
            }
            var currentChildLength = cycleEdgeNode._length + 1;
            for (var j = i - 2; j >= 0; --j) {
                nodes[j]._length = currentChildLength;
                currentChildLength++;
            }
            return;
        }
    }
};

CapturedTrace.prototype.attachExtraTrace = function(error) {
    if (error.__stackCleaned__) return;
    this.uncycle();
    var parsed = parseStackAndMessage(error);
    var message = parsed.message;
    var stacks = [parsed.stack];

    var trace = this;
    while (trace !== undefined) {
        stacks.push(cleanStack(trace.stack.split("\n")));
        trace = trace._parent;
    }
    removeCommonRoots(stacks);
    removeDuplicateOrEmptyJumps(stacks);
    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
    util.notEnumerableProp(error, "__stackCleaned__", true);
};

var captureStackTrace = (function stackDetection() {
    var v8stackFramePattern = /^\s*at\s*/;
    var v8stackFormatter = function(stack, error) {
        if (typeof stack === "string") return stack;

        if (error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    if (typeof Error.stackTraceLimit === "number" &&
        typeof Error.captureStackTrace === "function") {
        Error.stackTraceLimit += 6;
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        var captureStackTrace = Error.captureStackTrace;

        shouldIgnore = function(line) {
            return bluebirdFramePattern.test(line);
        };
        return function(receiver, ignoreUntil) {
            Error.stackTraceLimit += 6;
            captureStackTrace(receiver, ignoreUntil);
            Error.stackTraceLimit -= 6;
        };
    }
    var err = new Error();

    if (typeof err.stack === "string" &&
        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
        stackFramePattern = /@/;
        formatStack = v8stackFormatter;
        indentStackFrames = true;
        return function captureStackTrace(o) {
            o.stack = new Error().stack;
        };
    }

    var hasStackAfterThrow;
    try { throw new Error(); }
    catch(e) {
        hasStackAfterThrow = ("stack" in e);
    }
    if (!("stack" in err) && hasStackAfterThrow &&
        typeof Error.stackTraceLimit === "number") {
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        return function captureStackTrace(o) {
            Error.stackTraceLimit += 6;
            try { throw new Error(); }
            catch(e) { o.stack = e.stack; }
            Error.stackTraceLimit -= 6;
        };
    }

    formatStack = function(stack, error) {
        if (typeof stack === "string") return stack;

        if ((typeof error === "object" ||
            typeof error === "function") &&
            error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    return null;

})([]);

if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
    printWarning = function (message) {
        console.warn(message);
    };
    if (util.isNode && process.stderr.isTTY) {
        printWarning = function(message, isSoft) {
            var color = isSoft ? "\u001b[33m" : "\u001b[31m";
            console.warn(color + message + "\u001b[0m\n");
        };
    } else if (!util.isNode && typeof (new Error().stack) === "string") {
        printWarning = function(message, isSoft) {
            console.warn("%c" + message,
                        isSoft ? "color: darkorange" : "color: red");
        };
    }
}

var config = {
    warnings: warnings,
    longStackTraces: false,
    cancellation: false,
    monitoring: false
};

if (longStackTraces) Promise.longStackTraces();

return {
    longStackTraces: function() {
        return config.longStackTraces;
    },
    warnings: function() {
        return config.warnings;
    },
    cancellation: function() {
        return config.cancellation;
    },
    monitoring: function() {
        return config.monitoring;
    },
    propagateFromFunction: function() {
        return propagateFromFunction;
    },
    boundValueFunction: function() {
        return boundValueFunction;
    },
    checkForgottenReturns: checkForgottenReturns,
    setBounds: setBounds,
    warn: warn,
    deprecated: deprecated,
    CapturedTrace: CapturedTrace,
    fireDomEvent: fireDomEvent,
    fireGlobalEvent: fireGlobalEvent
};
};

},{"./errors":12,"./util":36}],10:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
function returner() {
    return this.value;
}
function thrower() {
    throw this.reason;
}

Promise.prototype["return"] =
Promise.prototype.thenReturn = function (value) {
    if (value instanceof Promise) value.suppressUnhandledRejections();
    return this._then(
        returner, undefined, undefined, {value: value}, undefined);
};

Promise.prototype["throw"] =
Promise.prototype.thenThrow = function (reason) {
    return this._then(
        thrower, undefined, undefined, {reason: reason}, undefined);
};

Promise.prototype.catchThrow = function (reason) {
    if (arguments.length <= 1) {
        return this._then(
            undefined, thrower, undefined, {reason: reason}, undefined);
    } else {
        var _reason = arguments[1];
        var handler = function() {throw _reason;};
        return this.caught(reason, handler);
    }
};

Promise.prototype.catchReturn = function (value) {
    if (arguments.length <= 1) {
        if (value instanceof Promise) value.suppressUnhandledRejections();
        return this._then(
            undefined, returner, undefined, {value: value}, undefined);
    } else {
        var _value = arguments[1];
        if (_value instanceof Promise) _value.suppressUnhandledRejections();
        var handler = function() {return _value;};
        return this.caught(value, handler);
    }
};
};

},{}],11:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseReduce = Promise.reduce;
var PromiseAll = Promise.all;

function promiseAllThis() {
    return PromiseAll(this);
}

function PromiseMapSeries(promises, fn) {
    return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
}

Promise.prototype.each = function (fn) {
    return this.mapSeries(fn)
            ._then(promiseAllThis, undefined, undefined, this, undefined);
};

Promise.prototype.mapSeries = function (fn) {
    return PromiseReduce(this, fn, INTERNAL, INTERNAL);
};

Promise.each = function (promises, fn) {
    return PromiseMapSeries(promises, fn)
            ._then(promiseAllThis, undefined, undefined, promises, undefined);
};

Promise.mapSeries = PromiseMapSeries;
};

},{}],12:[function(_dereq_,module,exports){
"use strict";
var es5 = _dereq_("./es5");
var Objectfreeze = es5.freeze;
var util = _dereq_("./util");
var inherits = util.inherits;
var notEnumerableProp = util.notEnumerableProp;

function subError(nameProperty, defaultMessage) {
    function SubError(message) {
        if (!(this instanceof SubError)) return new SubError(message);
        notEnumerableProp(this, "message",
            typeof message === "string" ? message : defaultMessage);
        notEnumerableProp(this, "name", nameProperty);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        } else {
            Error.call(this);
        }
    }
    inherits(SubError, Error);
    return SubError;
}

var _TypeError, _RangeError;
var Warning = subError("Warning", "warning");
var CancellationError = subError("CancellationError", "cancellation error");
var TimeoutError = subError("TimeoutError", "timeout error");
var AggregateError = subError("AggregateError", "aggregate error");
try {
    _TypeError = TypeError;
    _RangeError = RangeError;
} catch(e) {
    _TypeError = subError("TypeError", "type error");
    _RangeError = subError("RangeError", "range error");
}

var methods = ("join pop push shift unshift slice filter forEach some " +
    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

for (var i = 0; i < methods.length; ++i) {
    if (typeof Array.prototype[methods[i]] === "function") {
        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
    }
}

es5.defineProperty(AggregateError.prototype, "length", {
    value: 0,
    configurable: false,
    writable: true,
    enumerable: true
});
AggregateError.prototype["isOperational"] = true;
var level = 0;
AggregateError.prototype.toString = function() {
    var indent = Array(level * 4 + 1).join(" ");
    var ret = "\n" + indent + "AggregateError of:" + "\n";
    level++;
    indent = Array(level * 4 + 1).join(" ");
    for (var i = 0; i < this.length; ++i) {
        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
        var lines = str.split("\n");
        for (var j = 0; j < lines.length; ++j) {
            lines[j] = indent + lines[j];
        }
        str = lines.join("\n");
        ret += str + "\n";
    }
    level--;
    return ret;
};

function OperationalError(message) {
    if (!(this instanceof OperationalError))
        return new OperationalError(message);
    notEnumerableProp(this, "name", "OperationalError");
    notEnumerableProp(this, "message", message);
    this.cause = message;
    this["isOperational"] = true;

    if (message instanceof Error) {
        notEnumerableProp(this, "message", message.message);
        notEnumerableProp(this, "stack", message.stack);
    } else if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
    }

}
inherits(OperationalError, Error);

var errorTypes = Error["__BluebirdErrorTypes__"];
if (!errorTypes) {
    errorTypes = Objectfreeze({
        CancellationError: CancellationError,
        TimeoutError: TimeoutError,
        OperationalError: OperationalError,
        RejectionError: OperationalError,
        AggregateError: AggregateError
    });
    es5.defineProperty(Error, "__BluebirdErrorTypes__", {
        value: errorTypes,
        writable: false,
        enumerable: false,
        configurable: false
    });
}

module.exports = {
    Error: Error,
    TypeError: _TypeError,
    RangeError: _RangeError,
    CancellationError: errorTypes.CancellationError,
    OperationalError: errorTypes.OperationalError,
    TimeoutError: errorTypes.TimeoutError,
    AggregateError: errorTypes.AggregateError,
    Warning: Warning
};

},{"./es5":13,"./util":36}],13:[function(_dereq_,module,exports){
var isES5 = (function(){
    "use strict";
    return this === undefined;
})();

if (isES5) {
    module.exports = {
        freeze: Object.freeze,
        defineProperty: Object.defineProperty,
        getDescriptor: Object.getOwnPropertyDescriptor,
        keys: Object.keys,
        names: Object.getOwnPropertyNames,
        getPrototypeOf: Object.getPrototypeOf,
        isArray: Array.isArray,
        isES5: isES5,
        propertyIsWritable: function(obj, prop) {
            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
            return !!(!descriptor || descriptor.writable || descriptor.set);
        }
    };
} else {
    var has = {}.hasOwnProperty;
    var str = {}.toString;
    var proto = {}.constructor.prototype;

    var ObjectKeys = function (o) {
        var ret = [];
        for (var key in o) {
            if (has.call(o, key)) {
                ret.push(key);
            }
        }
        return ret;
    };

    var ObjectGetDescriptor = function(o, key) {
        return {value: o[key]};
    };

    var ObjectDefineProperty = function (o, key, desc) {
        o[key] = desc.value;
        return o;
    };

    var ObjectFreeze = function (obj) {
        return obj;
    };

    var ObjectGetPrototypeOf = function (obj) {
        try {
            return Object(obj).constructor.prototype;
        }
        catch (e) {
            return proto;
        }
    };

    var ArrayIsArray = function (obj) {
        try {
            return str.call(obj) === "[object Array]";
        }
        catch(e) {
            return false;
        }
    };

    module.exports = {
        isArray: ArrayIsArray,
        keys: ObjectKeys,
        names: ObjectKeys,
        defineProperty: ObjectDefineProperty,
        getDescriptor: ObjectGetDescriptor,
        freeze: ObjectFreeze,
        getPrototypeOf: ObjectGetPrototypeOf,
        isES5: isES5,
        propertyIsWritable: function() {
            return true;
        }
    };
}

},{}],14:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseMap = Promise.map;

Promise.prototype.filter = function (fn, options) {
    return PromiseMap(this, fn, options, INTERNAL);
};

Promise.filter = function (promises, fn, options) {
    return PromiseMap(promises, fn, options, INTERNAL);
};
};

},{}],15:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, tryConvertToPromise) {
var util = _dereq_("./util");
var CancellationError = Promise.CancellationError;
var errorObj = util.errorObj;

function PassThroughHandlerContext(promise, type, handler) {
    this.promise = promise;
    this.type = type;
    this.handler = handler;
    this.called = false;
    this.cancelPromise = null;
}

PassThroughHandlerContext.prototype.isFinallyHandler = function() {
    return this.type === 0;
};

function FinallyHandlerCancelReaction(finallyHandler) {
    this.finallyHandler = finallyHandler;
}

FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
    checkCancel(this.finallyHandler);
};

function checkCancel(ctx, reason) {
    if (ctx.cancelPromise != null) {
        if (arguments.length > 1) {
            ctx.cancelPromise._reject(reason);
        } else {
            ctx.cancelPromise._cancel();
        }
        ctx.cancelPromise = null;
        return true;
    }
    return false;
}

function succeed() {
    return finallyHandler.call(this, this.promise._target()._settledValue());
}
function fail(reason) {
    if (checkCancel(this, reason)) return;
    errorObj.e = reason;
    return errorObj;
}
function finallyHandler(reasonOrValue) {
    var promise = this.promise;
    var handler = this.handler;

    if (!this.called) {
        this.called = true;
        var ret = this.isFinallyHandler()
            ? handler.call(promise._boundValue())
            : handler.call(promise._boundValue(), reasonOrValue);
        if (ret !== undefined) {
            promise._setReturnedNonUndefined();
            var maybePromise = tryConvertToPromise(ret, promise);
            if (maybePromise instanceof Promise) {
                if (this.cancelPromise != null) {
                    if (maybePromise.isCancelled()) {
                        var reason =
                            new CancellationError("late cancellation observer");
                        promise._attachExtraTrace(reason);
                        errorObj.e = reason;
                        return errorObj;
                    } else if (maybePromise.isPending()) {
                        maybePromise._attachCancellationCallback(
                            new FinallyHandlerCancelReaction(this));
                    }
                }
                return maybePromise._then(
                    succeed, fail, undefined, this, undefined);
            }
        }
    }

    if (promise.isRejected()) {
        checkCancel(this);
        errorObj.e = reasonOrValue;
        return errorObj;
    } else {
        checkCancel(this);
        return reasonOrValue;
    }
}

Promise.prototype._passThrough = function(handler, type, success, fail) {
    if (typeof handler !== "function") return this.then();
    return this._then(success,
                      fail,
                      undefined,
                      new PassThroughHandlerContext(this, type, handler),
                      undefined);
};

Promise.prototype.lastly =
Promise.prototype["finally"] = function (handler) {
    return this._passThrough(handler,
                             0,
                             finallyHandler,
                             finallyHandler);
};

Promise.prototype.tap = function (handler) {
    return this._passThrough(handler, 1, finallyHandler);
};

return PassThroughHandlerContext;
};

},{"./util":36}],16:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          apiRejection,
                          INTERNAL,
                          tryConvertToPromise,
                          Proxyable,
                          debug) {
var errors = _dereq_("./errors");
var TypeError = errors.TypeError;
var util = _dereq_("./util");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
var yieldHandlers = [];

function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
    for (var i = 0; i < yieldHandlers.length; ++i) {
        traceParent._pushContext();
        var result = tryCatch(yieldHandlers[i])(value);
        traceParent._popContext();
        if (result === errorObj) {
            traceParent._pushContext();
            var ret = Promise.reject(errorObj.e);
            traceParent._popContext();
            return ret;
        }
        var maybePromise = tryConvertToPromise(result, traceParent);
        if (maybePromise instanceof Promise) return maybePromise;
    }
    return null;
}

function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
    if (debug.cancellation()) {
        var internal = new Promise(INTERNAL);
        var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
        this._promise = internal.lastly(function() {
            return _finallyPromise;
        });
        internal._captureStackTrace();
        internal._setOnCancel(this);
    } else {
        var promise = this._promise = new Promise(INTERNAL);
        promise._captureStackTrace();
    }
    this._stack = stack;
    this._generatorFunction = generatorFunction;
    this._receiver = receiver;
    this._generator = undefined;
    this._yieldHandlers = typeof yieldHandler === "function"
        ? [yieldHandler].concat(yieldHandlers)
        : yieldHandlers;
    this._yieldedPromise = null;
    this._cancellationPhase = false;
}
util.inherits(PromiseSpawn, Proxyable);

PromiseSpawn.prototype._isResolved = function() {
    return this._promise === null;
};

PromiseSpawn.prototype._cleanup = function() {
    this._promise = this._generator = null;
    if (debug.cancellation() && this._finallyPromise !== null) {
        this._finallyPromise._fulfill();
        this._finallyPromise = null;
    }
};

PromiseSpawn.prototype._promiseCancelled = function() {
    if (this._isResolved()) return;
    var implementsReturn = typeof this._generator["return"] !== "undefined";

    var result;
    if (!implementsReturn) {
        var reason = new Promise.CancellationError(
            "generator .return() sentinel");
        Promise.coroutine.returnSentinel = reason;
        this._promise._attachExtraTrace(reason);
        this._promise._pushContext();
        result = tryCatch(this._generator["throw"]).call(this._generator,
                                                         reason);
        this._promise._popContext();
    } else {
        this._promise._pushContext();
        result = tryCatch(this._generator["return"]).call(this._generator,
                                                          undefined);
        this._promise._popContext();
    }
    this._cancellationPhase = true;
    this._yieldedPromise = null;
    this._continue(result);
};

PromiseSpawn.prototype._promiseFulfilled = function(value) {
    this._yieldedPromise = null;
    this._promise._pushContext();
    var result = tryCatch(this._generator.next).call(this._generator, value);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._promiseRejected = function(reason) {
    this._yieldedPromise = null;
    this._promise._attachExtraTrace(reason);
    this._promise._pushContext();
    var result = tryCatch(this._generator["throw"])
        .call(this._generator, reason);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._resultCancelled = function() {
    if (this._yieldedPromise instanceof Promise) {
        var promise = this._yieldedPromise;
        this._yieldedPromise = null;
        promise.cancel();
    }
};

PromiseSpawn.prototype.promise = function () {
    return this._promise;
};

PromiseSpawn.prototype._run = function () {
    this._generator = this._generatorFunction.call(this._receiver);
    this._receiver =
        this._generatorFunction = undefined;
    this._promiseFulfilled(undefined);
};

PromiseSpawn.prototype._continue = function (result) {
    var promise = this._promise;
    if (result === errorObj) {
        this._cleanup();
        if (this._cancellationPhase) {
            return promise.cancel();
        } else {
            return promise._rejectCallback(result.e, false);
        }
    }

    var value = result.value;
    if (result.done === true) {
        this._cleanup();
        if (this._cancellationPhase) {
            return promise.cancel();
        } else {
            return promise._resolveCallback(value);
        }
    } else {
        var maybePromise = tryConvertToPromise(value, this._promise);
        if (!(maybePromise instanceof Promise)) {
            maybePromise =
                promiseFromYieldHandler(maybePromise,
                                        this._yieldHandlers,
                                        this._promise);
            if (maybePromise === null) {
                this._promiseRejected(
                    new TypeError(
                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", value) +
                        "From coroutine:\u000a" +
                        this._stack.split("\n").slice(1, -7).join("\n")
                    )
                );
                return;
            }
        }
        maybePromise = maybePromise._target();
        var bitField = maybePromise._bitField;
        ;
        if (((bitField & 50397184) === 0)) {
            this._yieldedPromise = maybePromise;
            maybePromise._proxy(this, null);
        } else if (((bitField & 33554432) !== 0)) {
            this._promiseFulfilled(maybePromise._value());
        } else if (((bitField & 16777216) !== 0)) {
            this._promiseRejected(maybePromise._reason());
        } else {
            this._promiseCancelled();
        }
    }
};

Promise.coroutine = function (generatorFunction, options) {
    if (typeof generatorFunction !== "function") {
        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var yieldHandler = Object(options).yieldHandler;
    var PromiseSpawn$ = PromiseSpawn;
    var stack = new Error().stack;
    return function () {
        var generator = generatorFunction.apply(this, arguments);
        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                      stack);
        var ret = spawn.promise();
        spawn._generator = generator;
        spawn._promiseFulfilled(undefined);
        return ret;
    };
};

Promise.coroutine.addYieldHandler = function(fn) {
    if (typeof fn !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(fn));
    }
    yieldHandlers.push(fn);
};

Promise.spawn = function (generatorFunction) {
    debug.deprecated("Promise.spawn()", "Promise.coroutine()");
    if (typeof generatorFunction !== "function") {
        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var spawn = new PromiseSpawn(generatorFunction, this);
    var ret = spawn.promise();
    spawn._run(Promise.spawn);
    return ret;
};
};

},{"./errors":12,"./util":36}],17:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
var util = _dereq_("./util");
var canEvaluate = util.canEvaluate;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var reject;

if (!true) {
if (canEvaluate) {
    var thenCallback = function(i) {
        return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
    };

    var promiseSetter = function(i) {
        return new Function("promise", "holder", "                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ".replace(/Index/g, i));
    };

    var generateHolderClass = function(total) {
        var props = new Array(total);
        for (var i = 0; i < props.length; ++i) {
            props[i] = "this.p" + (i+1);
        }
        var assignment = props.join(" = ") + " = null;";
        var cancellationCode= "var promise;\n" + props.map(function(prop) {
            return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) {                            \n\
                    promise.cancel();                                        \n\
                }                                                            \n\
            ";
        }).join("\n");
        var passedArguments = props.join(", ");
        var name = "Holder$" + total;


        var code = "return function(tryCatch, errorObj, Promise) {           \n\
            'use strict';                                                    \n\
            function [TheName](fn) {                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.now = 0;                                                \n\
            }                                                                \n\
            [TheName].prototype.checkFulfillment = function(promise) {       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) {                                    \n\
                    promise._pushContext();                                  \n\
                    var callback = this.fn;                                  \n\
                    var ret = tryCatch(callback)([ThePassedArguments]);      \n\
                    promise._popContext();                                   \n\
                    if (ret === errorObj) {                                  \n\
                        promise._rejectCallback(ret.e, false);               \n\
                    } else {                                                 \n\
                        promise._resolveCallback(ret);                       \n\
                    }                                                        \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() {              \n\
                [CancellationCode]                                           \n\
            };                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
        }(tryCatch, errorObj, Promise);                                      \n\
        ";

        code = code.replace(/\[TheName\]/g, name)
            .replace(/\[TheTotal\]/g, total)
            .replace(/\[ThePassedArguments\]/g, passedArguments)
            .replace(/\[TheProperties\]/g, assignment)
            .replace(/\[CancellationCode\]/g, cancellationCode);

        return new Function("tryCatch", "errorObj", "Promise", code)
                           (tryCatch, errorObj, Promise);
    };

    var holderClasses = [];
    var thenCallbacks = [];
    var promiseSetters = [];

    for (var i = 0; i < 8; ++i) {
        holderClasses.push(generateHolderClass(i + 1));
        thenCallbacks.push(thenCallback(i + 1));
        promiseSetters.push(promiseSetter(i + 1));
    }

    reject = function (reason) {
        this._reject(reason);
    };
}}

Promise.join = function () {
    var last = arguments.length - 1;
    var fn;
    if (last > 0 && typeof arguments[last] === "function") {
        fn = arguments[last];
        if (!true) {
            if (last <= 8 && canEvaluate) {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                var HolderClass = holderClasses[last - 1];
                var holder = new HolderClass(fn);
                var callbacks = thenCallbacks;

                for (var i = 0; i < last; ++i) {
                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                    if (maybePromise instanceof Promise) {
                        maybePromise = maybePromise._target();
                        var bitField = maybePromise._bitField;
                        ;
                        if (((bitField & 50397184) === 0)) {
                            maybePromise._then(callbacks[i], reject,
                                               undefined, ret, holder);
                            promiseSetters[i](maybePromise, holder);
                        } else if (((bitField & 33554432) !== 0)) {
                            callbacks[i].call(ret,
                                              maybePromise._value(), holder);
                        } else if (((bitField & 16777216) !== 0)) {
                            ret._reject(maybePromise._reason());
                        } else {
                            ret._cancel();
                        }
                    } else {
                        callbacks[i].call(ret, maybePromise, holder);
                    }
                }
                if (!ret._isFateSealed()) {
                    ret._setAsyncGuaranteed();
                    ret._setOnCancel(holder);
                }
                return ret;
            }
        }
    }
    var args = [].slice.call(arguments);;
    if (fn) args.pop();
    var ret = new PromiseArray(args).promise();
    return fn !== undefined ? ret.spread(fn) : ret;
};

};

},{"./util":36}],18:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL,
                          debug) {
var getDomain = Promise._getDomain;
var util = _dereq_("./util");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var EMPTY_ARRAY = [];

function MappingPromiseArray(promises, fn, limit, _filter) {
    this.constructor$(promises);
    this._promise._captureStackTrace();
    var domain = getDomain();
    this._callback = domain === null ? fn : domain.bind(fn);
    this._preservedValues = _filter === INTERNAL
        ? new Array(this.length())
        : null;
    this._limit = limit;
    this._inFlight = 0;
    this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
    this._init$(undefined, -2);
}
util.inherits(MappingPromiseArray, PromiseArray);

MappingPromiseArray.prototype._init = function () {};

MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var values = this._values;
    var length = this.length();
    var preservedValues = this._preservedValues;
    var limit = this._limit;

    if (index < 0) {
        index = (index * -1) - 1;
        values[index] = value;
        if (limit >= 1) {
            this._inFlight--;
            this._drainQueue();
            if (this._isResolved()) return true;
        }
    } else {
        if (limit >= 1 && this._inFlight >= limit) {
            values[index] = value;
            this._queue.push(index);
            return false;
        }
        if (preservedValues !== null) preservedValues[index] = value;

        var promise = this._promise;
        var callback = this._callback;
        var receiver = promise._boundValue();
        promise._pushContext();
        var ret = tryCatch(callback).call(receiver, value, index, length);
        var promiseCreated = promise._popContext();
        debug.checkForgottenReturns(
            ret,
            promiseCreated,
            preservedValues !== null ? "Promise.filter" : "Promise.map",
            promise
        );
        if (ret === errorObj) {
            this._reject(ret.e);
            return true;
        }

        var maybePromise = tryConvertToPromise(ret, this._promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            var bitField = maybePromise._bitField;
            ;
            if (((bitField & 50397184) === 0)) {
                if (limit >= 1) this._inFlight++;
                values[index] = maybePromise;
                maybePromise._proxy(this, (index + 1) * -1);
                return false;
            } else if (((bitField & 33554432) !== 0)) {
                ret = maybePromise._value();
            } else if (((bitField & 16777216) !== 0)) {
                this._reject(maybePromise._reason());
                return true;
            } else {
                this._cancel();
                return true;
            }
        }
        values[index] = ret;
    }
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= length) {
        if (preservedValues !== null) {
            this._filter(values, preservedValues);
        } else {
            this._resolve(values);
        }
        return true;
    }
    return false;
};

MappingPromiseArray.prototype._drainQueue = function () {
    var queue = this._queue;
    var limit = this._limit;
    var values = this._values;
    while (queue.length > 0 && this._inFlight < limit) {
        if (this._isResolved()) return;
        var index = queue.pop();
        this._promiseFulfilled(values[index], index);
    }
};

MappingPromiseArray.prototype._filter = function (booleans, values) {
    var len = values.length;
    var ret = new Array(len);
    var j = 0;
    for (var i = 0; i < len; ++i) {
        if (booleans[i]) ret[j++] = values[i];
    }
    ret.length = j;
    this._resolve(ret);
};

MappingPromiseArray.prototype.preservedValues = function () {
    return this._preservedValues;
};

function map(promises, fn, options, _filter) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }

    var limit = 0;
    if (options !== undefined) {
        if (typeof options === "object" && options !== null) {
            if (typeof options.concurrency !== "number") {
                return Promise.reject(
                    new TypeError("'concurrency' must be a number but it is " +
                                    util.classString(options.concurrency)));
            }
            limit = options.concurrency;
        } else {
            return Promise.reject(new TypeError(
                            "options argument must be an object but it is " +
                             util.classString(options)));
        }
    }
    limit = typeof limit === "number" &&
        isFinite(limit) && limit >= 1 ? limit : 0;
    return new MappingPromiseArray(promises, fn, limit, _filter).promise();
}

Promise.prototype.map = function (fn, options) {
    return map(this, fn, options, null);
};

Promise.map = function (promises, fn, options, _filter) {
    return map(promises, fn, options, _filter);
};


};

},{"./util":36}],19:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
var util = _dereq_("./util");
var tryCatch = util.tryCatch;

Promise.method = function (fn) {
    if (typeof fn !== "function") {
        throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
    }
    return function () {
        var ret = new Promise(INTERNAL);
        ret._captureStackTrace();
        ret._pushContext();
        var value = tryCatch(fn).apply(this, arguments);
        var promiseCreated = ret._popContext();
        debug.checkForgottenReturns(
            value, promiseCreated, "Promise.method", ret);
        ret._resolveFromSyncValue(value);
        return ret;
    };
};

Promise.attempt = Promise["try"] = function (fn) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._pushContext();
    var value;
    if (arguments.length > 1) {
        debug.deprecated("calling Promise.try with more than 1 argument");
        var arg = arguments[1];
        var ctx = arguments[2];
        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
                                  : tryCatch(fn).call(ctx, arg);
    } else {
        value = tryCatch(fn)();
    }
    var promiseCreated = ret._popContext();
    debug.checkForgottenReturns(
        value, promiseCreated, "Promise.try", ret);
    ret._resolveFromSyncValue(value);
    return ret;
};

Promise.prototype._resolveFromSyncValue = function (value) {
    if (value === util.errorObj) {
        this._rejectCallback(value.e, false);
    } else {
        this._resolveCallback(value, true);
    }
};
};

},{"./util":36}],20:[function(_dereq_,module,exports){
"use strict";
var util = _dereq_("./util");
var maybeWrapAsError = util.maybeWrapAsError;
var errors = _dereq_("./errors");
var OperationalError = errors.OperationalError;
var es5 = _dereq_("./es5");

function isUntypedError(obj) {
    return obj instanceof Error &&
        es5.getPrototypeOf(obj) === Error.prototype;
}

var rErrorKey = /^(?:name|message|stack|cause)$/;
function wrapAsOperationalError(obj) {
    var ret;
    if (isUntypedError(obj)) {
        ret = new OperationalError(obj);
        ret.name = obj.name;
        ret.message = obj.message;
        ret.stack = obj.stack;
        var keys = es5.keys(obj);
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!rErrorKey.test(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }
    util.markAsOriginatingFromRejection(obj);
    return obj;
}

function nodebackForPromise(promise, multiArgs) {
    return function(err, value) {
        if (promise === null) return;
        if (err) {
            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
            promise._attachExtraTrace(wrapped);
            promise._reject(wrapped);
        } else if (!multiArgs) {
            promise._fulfill(value);
        } else {
            var args = [].slice.call(arguments, 1);;
            promise._fulfill(args);
        }
        promise = null;
    };
}

module.exports = nodebackForPromise;

},{"./errors":12,"./es5":13,"./util":36}],21:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var util = _dereq_("./util");
var async = Promise._async;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function spreadAdapter(val, nodeback) {
    var promise = this;
    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
    var ret =
        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

function successAdapter(val, nodeback) {
    var promise = this;
    var receiver = promise._boundValue();
    var ret = val === undefined
        ? tryCatch(nodeback).call(receiver, null)
        : tryCatch(nodeback).call(receiver, null, val);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}
function errorAdapter(reason, nodeback) {
    var promise = this;
    if (!reason) {
        var newReason = new Error(reason + "");
        newReason.cause = reason;
        reason = newReason;
    }
    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                     options) {
    if (typeof nodeback == "function") {
        var adapter = successAdapter;
        if (options !== undefined && Object(options).spread) {
            adapter = spreadAdapter;
        }
        this._then(
            adapter,
            errorAdapter,
            undefined,
            this,
            nodeback
        );
    }
    return this;
};
};

},{"./util":36}],22:[function(_dereq_,module,exports){
"use strict";
module.exports = function() {
var makeSelfResolutionError = function () {
    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
};
var reflectHandler = function() {
    return new Promise.PromiseInspection(this._target());
};
var apiRejection = function(msg) {
    return Promise.reject(new TypeError(msg));
};
function Proxyable() {}
var UNDEFINED_BINDING = {};
var util = _dereq_("./util");

var getDomain;
if (util.isNode) {
    getDomain = function() {
        var ret = process.domain;
        if (ret === undefined) ret = null;
        return ret;
    };
} else {
    getDomain = function() {
        return null;
    };
}
util.notEnumerableProp(Promise, "_getDomain", getDomain);

var es5 = _dereq_("./es5");
var Async = _dereq_("./async");
var async = new Async();
es5.defineProperty(Promise, "_async", {value: async});
var errors = _dereq_("./errors");
var TypeError = Promise.TypeError = errors.TypeError;
Promise.RangeError = errors.RangeError;
var CancellationError = Promise.CancellationError = errors.CancellationError;
Promise.TimeoutError = errors.TimeoutError;
Promise.OperationalError = errors.OperationalError;
Promise.RejectionError = errors.OperationalError;
Promise.AggregateError = errors.AggregateError;
var INTERNAL = function(){};
var APPLY = {};
var NEXT_FILTER = {};
var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
var PromiseArray =
    _dereq_("./promise_array")(Promise, INTERNAL,
                               tryConvertToPromise, apiRejection, Proxyable);
var Context = _dereq_("./context")(Promise);
 /*jshint unused:false*/
var createContext = Context.create;
var debug = _dereq_("./debuggability")(Promise, Context);
var CapturedTrace = debug.CapturedTrace;
var PassThroughHandlerContext =
    _dereq_("./finally")(Promise, tryConvertToPromise);
var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
var nodebackForPromise = _dereq_("./nodeback");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
function check(self, executor) {
    if (typeof executor !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(executor));
    }
    if (self.constructor !== Promise) {
        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
}

function Promise(executor) {
    this._bitField = 0;
    this._fulfillmentHandler0 = undefined;
    this._rejectionHandler0 = undefined;
    this._promise0 = undefined;
    this._receiver0 = undefined;
    if (executor !== INTERNAL) {
        check(this, executor);
        this._resolveFromExecutor(executor);
    }
    this._promiseCreated();
    this._fireEvent("promiseCreated", this);
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
    var len = arguments.length;
    if (len > 1) {
        var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) {
            var item = arguments[i];
            if (util.isObject(item)) {
                catchInstances[j++] = item;
            } else {
                return apiRejection("expecting an object but got " + util.classString(item));
            }
        }
        catchInstances.length = j;
        fn = arguments[i];
        return this.then(undefined, catchFilter(catchInstances, fn, this));
    }
    return this.then(undefined, fn);
};

Promise.prototype.reflect = function () {
    return this._then(reflectHandler,
        reflectHandler, undefined, this, undefined);
};

Promise.prototype.then = function (didFulfill, didReject) {
    if (debug.warnings() && arguments.length > 0 &&
        typeof didFulfill !== "function" &&
        typeof didReject !== "function") {
        var msg = ".then() only accepts functions but was passed: " +
                util.classString(didFulfill);
        if (arguments.length > 1) {
            msg += ", " + util.classString(didReject);
        }
        this._warn(msg);
    }
    return this._then(didFulfill, didReject, undefined, undefined, undefined);
};

Promise.prototype.done = function (didFulfill, didReject) {
    var promise =
        this._then(didFulfill, didReject, undefined, undefined, undefined);
    promise._setIsFinal();
};

Promise.prototype.spread = function (fn) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    return this.all()._then(fn, undefined, undefined, APPLY, undefined);
};

Promise.prototype.toJSON = function () {
    var ret = {
        isFulfilled: false,
        isRejected: false,
        fulfillmentValue: undefined,
        rejectionReason: undefined
    };
    if (this.isFulfilled()) {
        ret.fulfillmentValue = this.value();
        ret.isFulfilled = true;
    } else if (this.isRejected()) {
        ret.rejectionReason = this.reason();
        ret.isRejected = true;
    }
    return ret;
};

Promise.prototype.all = function () {
    if (arguments.length > 0) {
        this._warn(".all() was passed arguments but it does not take any");
    }
    return new PromiseArray(this).promise();
};

Promise.prototype.error = function (fn) {
    return this.caught(util.originatesFromRejection, fn);
};

Promise.is = function (val) {
    return val instanceof Promise;
};

Promise.fromNode = Promise.fromCallback = function(fn) {
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
                                         : false;
    var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
    if (result === errorObj) {
        ret._rejectCallback(result.e, true);
    }
    if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
    return ret;
};

Promise.all = function (promises) {
    return new PromiseArray(promises).promise();
};

Promise.cast = function (obj) {
    var ret = tryConvertToPromise(obj);
    if (!(ret instanceof Promise)) {
        ret = new Promise(INTERNAL);
        ret._captureStackTrace();
        ret._setFulfilled();
        ret._rejectionHandler0 = obj;
    }
    return ret;
};

Promise.resolve = Promise.fulfilled = Promise.cast;

Promise.reject = Promise.rejected = function (reason) {
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._rejectCallback(reason, true);
    return ret;
};

Promise.setScheduler = function(fn) {
    if (typeof fn !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(fn));
    }
    return async.setScheduler(fn);
};

Promise.prototype._then = function (
    didFulfill,
    didReject,
    _,    receiver,
    internalData
) {
    var haveInternalData = internalData !== undefined;
    var promise = haveInternalData ? internalData : new Promise(INTERNAL);
    var target = this._target();
    var bitField = target._bitField;

    if (!haveInternalData) {
        promise._propagateFrom(this, 3);
        promise._captureStackTrace();
        if (receiver === undefined &&
            ((this._bitField & 2097152) !== 0)) {
            if (!((bitField & 50397184) === 0)) {
                receiver = this._boundValue();
            } else {
                receiver = target === this ? undefined : this._boundTo;
            }
        }
        this._fireEvent("promiseChained", this, promise);
    }

    var domain = getDomain();
    if (!((bitField & 50397184) === 0)) {
        var handler, value, settler = target._settlePromiseCtx;
        if (((bitField & 33554432) !== 0)) {
            value = target._rejectionHandler0;
            handler = didFulfill;
        } else if (((bitField & 16777216) !== 0)) {
            value = target._fulfillmentHandler0;
            handler = didReject;
            target._unsetRejectionIsUnhandled();
        } else {
            settler = target._settlePromiseLateCancellationObserver;
            value = new CancellationError("late cancellation observer");
            target._attachExtraTrace(value);
            handler = didReject;
        }

        async.invoke(settler, target, {
            handler: domain === null ? handler
                : (typeof handler === "function" && domain.bind(handler)),
            promise: promise,
            receiver: receiver,
            value: value
        });
    } else {
        target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
    }

    return promise;
};

Promise.prototype._length = function () {
    return this._bitField & 65535;
};

Promise.prototype._isFateSealed = function () {
    return (this._bitField & 117506048) !== 0;
};

Promise.prototype._isFollowing = function () {
    return (this._bitField & 67108864) === 67108864;
};

Promise.prototype._setLength = function (len) {
    this._bitField = (this._bitField & -65536) |
        (len & 65535);
};

Promise.prototype._setFulfilled = function () {
    this._bitField = this._bitField | 33554432;
    this._fireEvent("promiseFulfilled", this);
};

Promise.prototype._setRejected = function () {
    this._bitField = this._bitField | 16777216;
    this._fireEvent("promiseRejected", this);
};

Promise.prototype._setFollowing = function () {
    this._bitField = this._bitField | 67108864;
    this._fireEvent("promiseResolved", this);
};

Promise.prototype._setIsFinal = function () {
    this._bitField = this._bitField | 4194304;
};

Promise.prototype._isFinal = function () {
    return (this._bitField & 4194304) > 0;
};

Promise.prototype._unsetCancelled = function() {
    this._bitField = this._bitField & (~65536);
};

Promise.prototype._setCancelled = function() {
    this._bitField = this._bitField | 65536;
    this._fireEvent("promiseCancelled", this);
};

Promise.prototype._setAsyncGuaranteed = function() {
    if (async.hasCustomScheduler()) return;
    this._bitField = this._bitField | 134217728;
};

Promise.prototype._receiverAt = function (index) {
    var ret = index === 0 ? this._receiver0 : this[
            index * 4 - 4 + 3];
    if (ret === UNDEFINED_BINDING) {
        return undefined;
    } else if (ret === undefined && this._isBound()) {
        return this._boundValue();
    }
    return ret;
};

Promise.prototype._promiseAt = function (index) {
    return this[
            index * 4 - 4 + 2];
};

Promise.prototype._fulfillmentHandlerAt = function (index) {
    return this[
            index * 4 - 4 + 0];
};

Promise.prototype._rejectionHandlerAt = function (index) {
    return this[
            index * 4 - 4 + 1];
};

Promise.prototype._boundValue = function() {};

Promise.prototype._migrateCallback0 = function (follower) {
    var bitField = follower._bitField;
    var fulfill = follower._fulfillmentHandler0;
    var reject = follower._rejectionHandler0;
    var promise = follower._promise0;
    var receiver = follower._receiverAt(0);
    if (receiver === undefined) receiver = UNDEFINED_BINDING;
    this._addCallbacks(fulfill, reject, promise, receiver, null);
};

Promise.prototype._migrateCallbackAt = function (follower, index) {
    var fulfill = follower._fulfillmentHandlerAt(index);
    var reject = follower._rejectionHandlerAt(index);
    var promise = follower._promiseAt(index);
    var receiver = follower._receiverAt(index);
    if (receiver === undefined) receiver = UNDEFINED_BINDING;
    this._addCallbacks(fulfill, reject, promise, receiver, null);
};

Promise.prototype._addCallbacks = function (
    fulfill,
    reject,
    promise,
    receiver,
    domain
) {
    var index = this._length();

    if (index >= 65535 - 4) {
        index = 0;
        this._setLength(0);
    }

    if (index === 0) {
        this._promise0 = promise;
        this._receiver0 = receiver;
        if (typeof fulfill === "function") {
            this._fulfillmentHandler0 =
                domain === null ? fulfill : domain.bind(fulfill);
        }
        if (typeof reject === "function") {
            this._rejectionHandler0 =
                domain === null ? reject : domain.bind(reject);
        }
    } else {
        var base = index * 4 - 4;
        this[base + 2] = promise;
        this[base + 3] = receiver;
        if (typeof fulfill === "function") {
            this[base + 0] =
                domain === null ? fulfill : domain.bind(fulfill);
        }
        if (typeof reject === "function") {
            this[base + 1] =
                domain === null ? reject : domain.bind(reject);
        }
    }
    this._setLength(index + 1);
    return index;
};

Promise.prototype._proxy = function (proxyable, arg) {
    this._addCallbacks(undefined, undefined, arg, proxyable, null);
};

Promise.prototype._resolveCallback = function(value, shouldBind) {
    if (((this._bitField & 117506048) !== 0)) return;
    if (value === this)
        return this._rejectCallback(makeSelfResolutionError(), false);
    var maybePromise = tryConvertToPromise(value, this);
    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

    if (shouldBind) this._propagateFrom(maybePromise, 2);

    var promise = maybePromise._target();

    if (promise === this) {
        this._reject(makeSelfResolutionError());
        return;
    }

    var bitField = promise._bitField;
    if (((bitField & 50397184) === 0)) {
        var len = this._length();
        if (len > 0) promise._migrateCallback0(this);
        for (var i = 1; i < len; ++i) {
            promise._migrateCallbackAt(this, i);
        }
        this._setFollowing();
        this._setLength(0);
        this._setFollowee(promise);
    } else if (((bitField & 33554432) !== 0)) {
        this._fulfill(promise._value());
    } else if (((bitField & 16777216) !== 0)) {
        this._reject(promise._reason());
    } else {
        var reason = new CancellationError("late cancellation observer");
        promise._attachExtraTrace(reason);
        this._reject(reason);
    }
};

Promise.prototype._rejectCallback =
function(reason, synchronous, ignoreNonErrorWarnings) {
    var trace = util.ensureErrorObject(reason);
    var hasStack = trace === reason;
    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
        var message = "a promise was rejected with a non-error: " +
            util.classString(reason);
        this._warn(message, true);
    }
    this._attachExtraTrace(trace, synchronous ? hasStack : false);
    this._reject(reason);
};

Promise.prototype._resolveFromExecutor = function (executor) {
    var promise = this;
    this._captureStackTrace();
    this._pushContext();
    var synchronous = true;
    var r = this._execute(executor, function(value) {
        promise._resolveCallback(value);
    }, function (reason) {
        promise._rejectCallback(reason, synchronous);
    });
    synchronous = false;
    this._popContext();

    if (r !== undefined) {
        promise._rejectCallback(r, true);
    }
};

Promise.prototype._settlePromiseFromHandler = function (
    handler, receiver, value, promise
) {
    var bitField = promise._bitField;
    if (((bitField & 65536) !== 0)) return;
    promise._pushContext();
    var x;
    if (receiver === APPLY) {
        if (!value || typeof value.length !== "number") {
            x = errorObj;
            x.e = new TypeError("cannot .spread() a non-array: " +
                                    util.classString(value));
        } else {
            x = tryCatch(handler).apply(this._boundValue(), value);
        }
    } else {
        x = tryCatch(handler).call(receiver, value);
    }
    var promiseCreated = promise._popContext();
    bitField = promise._bitField;
    if (((bitField & 65536) !== 0)) return;

    if (x === NEXT_FILTER) {
        promise._reject(value);
    } else if (x === errorObj) {
        promise._rejectCallback(x.e, false);
    } else {
        debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
        promise._resolveCallback(x);
    }
};

Promise.prototype._target = function() {
    var ret = this;
    while (ret._isFollowing()) ret = ret._followee();
    return ret;
};

Promise.prototype._followee = function() {
    return this._rejectionHandler0;
};

Promise.prototype._setFollowee = function(promise) {
    this._rejectionHandler0 = promise;
};

Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
    var isPromise = promise instanceof Promise;
    var bitField = this._bitField;
    var asyncGuaranteed = ((bitField & 134217728) !== 0);
    if (((bitField & 65536) !== 0)) {
        if (isPromise) promise._invokeInternalOnCancel();

        if (receiver instanceof PassThroughHandlerContext &&
            receiver.isFinallyHandler()) {
            receiver.cancelPromise = promise;
            if (tryCatch(handler).call(receiver, value) === errorObj) {
                promise._reject(errorObj.e);
            }
        } else if (handler === reflectHandler) {
            promise._fulfill(reflectHandler.call(receiver));
        } else if (receiver instanceof Proxyable) {
            receiver._promiseCancelled(promise);
        } else if (isPromise || promise instanceof PromiseArray) {
            promise._cancel();
        } else {
            receiver.cancel();
        }
    } else if (typeof handler === "function") {
        if (!isPromise) {
            handler.call(receiver, value, promise);
        } else {
            if (asyncGuaranteed) promise._setAsyncGuaranteed();
            this._settlePromiseFromHandler(handler, receiver, value, promise);
        }
    } else if (receiver instanceof Proxyable) {
        if (!receiver._isResolved()) {
            if (((bitField & 33554432) !== 0)) {
                receiver._promiseFulfilled(value, promise);
            } else {
                receiver._promiseRejected(value, promise);
            }
        }
    } else if (isPromise) {
        if (asyncGuaranteed) promise._setAsyncGuaranteed();
        if (((bitField & 33554432) !== 0)) {
            promise._fulfill(value);
        } else {
            promise._reject(value);
        }
    }
};

Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
    var handler = ctx.handler;
    var promise = ctx.promise;
    var receiver = ctx.receiver;
    var value = ctx.value;
    if (typeof handler === "function") {
        if (!(promise instanceof Promise)) {
            handler.call(receiver, value, promise);
        } else {
            this._settlePromiseFromHandler(handler, receiver, value, promise);
        }
    } else if (promise instanceof Promise) {
        promise._reject(value);
    }
};

Promise.prototype._settlePromiseCtx = function(ctx) {
    this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
};

Promise.prototype._settlePromise0 = function(handler, value, bitField) {
    var promise = this._promise0;
    var receiver = this._receiverAt(0);
    this._promise0 = undefined;
    this._receiver0 = undefined;
    this._settlePromise(promise, handler, receiver, value);
};

Promise.prototype._clearCallbackDataAtIndex = function(index) {
    var base = index * 4 - 4;
    this[base + 2] =
    this[base + 3] =
    this[base + 0] =
    this[base + 1] = undefined;
};

Promise.prototype._fulfill = function (value) {
    var bitField = this._bitField;
    if (((bitField & 117506048) >>> 16)) return;
    if (value === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._reject(err);
    }
    this._setFulfilled();
    this._rejectionHandler0 = value;

    if ((bitField & 65535) > 0) {
        if (((bitField & 134217728) !== 0)) {
            this._settlePromises();
        } else {
            async.settlePromises(this);
        }
    }
};

Promise.prototype._reject = function (reason) {
    var bitField = this._bitField;
    if (((bitField & 117506048) >>> 16)) return;
    this._setRejected();
    this._fulfillmentHandler0 = reason;

    if (this._isFinal()) {
        return async.fatalError(reason, util.isNode);
    }

    if ((bitField & 65535) > 0) {
        async.settlePromises(this);
    } else {
        this._ensurePossibleRejectionHandled();
    }
};

Promise.prototype._fulfillPromises = function (len, value) {
    for (var i = 1; i < len; i++) {
        var handler = this._fulfillmentHandlerAt(i);
        var promise = this._promiseAt(i);
        var receiver = this._receiverAt(i);
        this._clearCallbackDataAtIndex(i);
        this._settlePromise(promise, handler, receiver, value);
    }
};

Promise.prototype._rejectPromises = function (len, reason) {
    for (var i = 1; i < len; i++) {
        var handler = this._rejectionHandlerAt(i);
        var promise = this._promiseAt(i);
        var receiver = this._receiverAt(i);
        this._clearCallbackDataAtIndex(i);
        this._settlePromise(promise, handler, receiver, reason);
    }
};

Promise.prototype._settlePromises = function () {
    var bitField = this._bitField;
    var len = (bitField & 65535);

    if (len > 0) {
        if (((bitField & 16842752) !== 0)) {
            var reason = this._fulfillmentHandler0;
            this._settlePromise0(this._rejectionHandler0, reason, bitField);
            this._rejectPromises(len, reason);
        } else {
            var value = this._rejectionHandler0;
            this._settlePromise0(this._fulfillmentHandler0, value, bitField);
            this._fulfillPromises(len, value);
        }
        this._setLength(0);
    }
    this._clearCancellationData();
};

Promise.prototype._settledValue = function() {
    var bitField = this._bitField;
    if (((bitField & 33554432) !== 0)) {
        return this._rejectionHandler0;
    } else if (((bitField & 16777216) !== 0)) {
        return this._fulfillmentHandler0;
    }
};

function deferResolve(v) {this.promise._resolveCallback(v);}
function deferReject(v) {this.promise._rejectCallback(v, false);}

Promise.defer = Promise.pending = function() {
    debug.deprecated("Promise.defer", "new Promise");
    var promise = new Promise(INTERNAL);
    return {
        promise: promise,
        resolve: deferResolve,
        reject: deferReject
    };
};

util.notEnumerableProp(Promise,
                       "_makeSelfResolutionError",
                       makeSelfResolutionError);

_dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
    debug);
_dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
_dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
_dereq_("./direct_resolve")(Promise);
_dereq_("./synchronous_inspection")(Promise);
_dereq_("./join")(
    Promise, PromiseArray, tryConvertToPromise, INTERNAL, debug);
Promise.Promise = Promise;
Promise.version = "3.4.0";
_dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
_dereq_('./call_get.js')(Promise);
_dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
_dereq_('./timers.js')(Promise, INTERNAL, debug);
_dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
_dereq_('./nodeify.js')(Promise);
_dereq_('./promisify.js')(Promise, INTERNAL);
_dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
_dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
_dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
_dereq_('./settle.js')(Promise, PromiseArray, debug);
_dereq_('./some.js')(Promise, PromiseArray, apiRejection);
_dereq_('./filter.js')(Promise, INTERNAL);
_dereq_('./each.js')(Promise, INTERNAL);
_dereq_('./any.js')(Promise);
                                                         
    util.toFastProperties(Promise);                                          
    util.toFastProperties(Promise.prototype);                                
    function fillTypes(value) {                                              
        var p = new Promise(INTERNAL);                                       
        p._fulfillmentHandler0 = value;                                      
        p._rejectionHandler0 = value;                                        
        p._promise0 = value;                                                 
        p._receiver0 = value;                                                
    }                                                                        
    // Complete slack tracking, opt out of field-type tracking and           
    // stabilize map                                                         
    fillTypes({a: 1});                                                       
    fillTypes({b: 2});                                                       
    fillTypes({c: 3});                                                       
    fillTypes(1);                                                            
    fillTypes(function(){});                                                 
    fillTypes(undefined);                                                    
    fillTypes(false);                                                        
    fillTypes(new Promise(INTERNAL));                                        
    debug.setBounds(Async.firstLineError, util.lastLineError);               
    return Promise;                                                          

};

},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise,
    apiRejection, Proxyable) {
var util = _dereq_("./util");
var isArray = util.isArray;

function toResolutionValue(val) {
    switch(val) {
    case -2: return [];
    case -3: return {};
    }
}

function PromiseArray(values) {
    var promise = this._promise = new Promise(INTERNAL);
    if (values instanceof Promise) {
        promise._propagateFrom(values, 3);
    }
    promise._setOnCancel(this);
    this._values = values;
    this._length = 0;
    this._totalResolved = 0;
    this._init(undefined, -2);
}
util.inherits(PromiseArray, Proxyable);

PromiseArray.prototype.length = function () {
    return this._length;
};

PromiseArray.prototype.promise = function () {
    return this._promise;
};

PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
    var values = tryConvertToPromise(this._values, this._promise);
    if (values instanceof Promise) {
        values = values._target();
        var bitField = values._bitField;
        ;
        this._values = values;

        if (((bitField & 50397184) === 0)) {
            this._promise._setAsyncGuaranteed();
            return values._then(
                init,
                this._reject,
                undefined,
                this,
                resolveValueIfEmpty
           );
        } else if (((bitField & 33554432) !== 0)) {
            values = values._value();
        } else if (((bitField & 16777216) !== 0)) {
            return this._reject(values._reason());
        } else {
            return this._cancel();
        }
    }
    values = util.asArray(values);
    if (values === null) {
        var err = apiRejection(
            "expecting an array or an iterable object but got " + util.classString(values)).reason();
        this._promise._rejectCallback(err, false);
        return;
    }

    if (values.length === 0) {
        if (resolveValueIfEmpty === -5) {
            this._resolveEmptyArray();
        }
        else {
            this._resolve(toResolutionValue(resolveValueIfEmpty));
        }
        return;
    }
    this._iterate(values);
};

PromiseArray.prototype._iterate = function(values) {
    var len = this.getActualLength(values.length);
    this._length = len;
    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
    var result = this._promise;
    var isResolved = false;
    var bitField = null;
    for (var i = 0; i < len; ++i) {
        var maybePromise = tryConvertToPromise(values[i], result);

        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            bitField = maybePromise._bitField;
        } else {
            bitField = null;
        }

        if (isResolved) {
            if (bitField !== null) {
                maybePromise.suppressUnhandledRejections();
            }
        } else if (bitField !== null) {
            if (((bitField & 50397184) === 0)) {
                maybePromise._proxy(this, i);
                this._values[i] = maybePromise;
            } else if (((bitField & 33554432) !== 0)) {
                isResolved = this._promiseFulfilled(maybePromise._value(), i);
            } else if (((bitField & 16777216) !== 0)) {
                isResolved = this._promiseRejected(maybePromise._reason(), i);
            } else {
                isResolved = this._promiseCancelled(i);
            }
        } else {
            isResolved = this._promiseFulfilled(maybePromise, i);
        }
    }
    if (!isResolved) result._setAsyncGuaranteed();
};

PromiseArray.prototype._isResolved = function () {
    return this._values === null;
};

PromiseArray.prototype._resolve = function (value) {
    this._values = null;
    this._promise._fulfill(value);
};

PromiseArray.prototype._cancel = function() {
    if (this._isResolved() || !this._promise.isCancellable()) return;
    this._values = null;
    this._promise._cancel();
};

PromiseArray.prototype._reject = function (reason) {
    this._values = null;
    this._promise._rejectCallback(reason, false);
};

PromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
        return true;
    }
    return false;
};

PromiseArray.prototype._promiseCancelled = function() {
    this._cancel();
    return true;
};

PromiseArray.prototype._promiseRejected = function (reason) {
    this._totalResolved++;
    this._reject(reason);
    return true;
};

PromiseArray.prototype._resultCancelled = function() {
    if (this._isResolved()) return;
    var values = this._values;
    this._cancel();
    if (values instanceof Promise) {
        values.cancel();
    } else {
        for (var i = 0; i < values.length; ++i) {
            if (values[i] instanceof Promise) {
                values[i].cancel();
            }
        }
    }
};

PromiseArray.prototype.shouldCopyValues = function () {
    return true;
};

PromiseArray.prototype.getActualLength = function (len) {
    return len;
};

return PromiseArray;
};

},{"./util":36}],24:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var THIS = {};
var util = _dereq_("./util");
var nodebackForPromise = _dereq_("./nodeback");
var withAppended = util.withAppended;
var maybeWrapAsError = util.maybeWrapAsError;
var canEvaluate = util.canEvaluate;
var TypeError = _dereq_("./errors").TypeError;
var defaultSuffix = "Async";
var defaultPromisified = {__isPromisified__: true};
var noCopyProps = [
    "arity",    "length",
    "name",
    "arguments",
    "caller",
    "callee",
    "prototype",
    "__isPromisified__"
];
var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

var defaultFilter = function(name) {
    return util.isIdentifier(name) &&
        name.charAt(0) !== "_" &&
        name !== "constructor";
};

function propsFilter(key) {
    return !noCopyPropsPattern.test(key);
}

function isPromisified(fn) {
    try {
        return fn.__isPromisified__ === true;
    }
    catch (e) {
        return false;
    }
}

function hasPromisified(obj, key, suffix) {
    var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                            defaultPromisified);
    return val ? isPromisified(val) : false;
}
function checkValid(ret, suffix, suffixRegexp) {
    for (var i = 0; i < ret.length; i += 2) {
        var key = ret[i];
        if (suffixRegexp.test(key)) {
            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
            for (var j = 0; j < ret.length; j += 2) {
                if (ret[j] === keyWithoutAsyncSuffix) {
                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
                        .replace("%s", suffix));
                }
            }
        }
    }
}

function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
    var keys = util.inheritedDataKeys(obj);
    var ret = [];
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var value = obj[key];
        var passesDefaultFilter = filter === defaultFilter
            ? true : defaultFilter(key, value, obj);
        if (typeof value === "function" &&
            !isPromisified(value) &&
            !hasPromisified(obj, key, suffix) &&
            filter(key, value, obj, passesDefaultFilter)) {
            ret.push(key, value);
        }
    }
    checkValid(ret, suffix, suffixRegexp);
    return ret;
}

var escapeIdentRegex = function(str) {
    return str.replace(/([$])/, "\\$");
};

var makeNodePromisifiedEval;
if (!true) {
var switchCaseArgumentOrder = function(likelyArgumentCount) {
    var ret = [likelyArgumentCount];
    var min = Math.max(0, likelyArgumentCount - 1 - 3);
    for(var i = likelyArgumentCount - 1; i >= min; --i) {
        ret.push(i);
    }
    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
        ret.push(i);
    }
    return ret;
};

var argumentSequence = function(argumentCount) {
    return util.filledRange(argumentCount, "_arg", "");
};

var parameterDeclaration = function(parameterCount) {
    return util.filledRange(
        Math.max(parameterCount, 3), "_arg", "");
};

var parameterCount = function(fn) {
    if (typeof fn.length === "number") {
        return Math.max(Math.min(fn.length, 1023 + 1), 0);
    }
    return 0;
};

makeNodePromisifiedEval =
function(callback, receiver, originalName, fn, _, multiArgs) {
    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
    var shouldProxyThis = typeof callback === "string" || receiver === THIS;

    function generateCallForArgumentCount(count) {
        var args = argumentSequence(count).join(", ");
        var comma = count > 0 ? ", " : "";
        var ret;
        if (shouldProxyThis) {
            ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
        } else {
            ret = receiver === undefined
                ? "ret = callback({{args}}, nodeback); break;\n"
                : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
        }
        return ret.replace("{{args}}", args).replace(", ", comma);
    }

    function generateArgumentSwitchCase() {
        var ret = "";
        for (var i = 0; i < argumentOrder.length; ++i) {
            ret += "case " + argumentOrder[i] +":" +
                generateCallForArgumentCount(argumentOrder[i]);
        }

        ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                ? "ret = callback.apply(this, args);\n"
                                : "ret = callback.apply(receiver, args);\n"));
        return ret;
    }

    var getFunctionCode = typeof callback === "string"
                                ? ("this != null ? this['"+callback+"'] : fn")
                                : "fn";
    var body = "'use strict';                                                \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
        .replace("[GetFunctionCode]", getFunctionCode);
    body = body.replace("Parameters", parameterDeclaration(newParameterCount));
    return new Function("Promise",
                        "fn",
                        "receiver",
                        "withAppended",
                        "maybeWrapAsError",
                        "nodebackForPromise",
                        "tryCatch",
                        "errorObj",
                        "notEnumerableProp",
                        "INTERNAL",
                        body)(
                    Promise,
                    fn,
                    receiver,
                    withAppended,
                    maybeWrapAsError,
                    nodebackForPromise,
                    util.tryCatch,
                    util.errorObj,
                    util.notEnumerableProp,
                    INTERNAL);
};
}

function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
    var defaultThis = (function() {return this;})();
    var method = callback;
    if (typeof method === "string") {
        callback = fn;
    }
    function promisified() {
        var _receiver = receiver;
        if (receiver === THIS) _receiver = this;
        var promise = new Promise(INTERNAL);
        promise._captureStackTrace();
        var cb = typeof method === "string" && this !== defaultThis
            ? this[method] : callback;
        var fn = nodebackForPromise(promise, multiArgs);
        try {
            cb.apply(_receiver, withAppended(arguments, fn));
        } catch(e) {
            promise._rejectCallback(maybeWrapAsError(e), true, true);
        }
        if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
        return promise;
    }
    util.notEnumerableProp(promisified, "__isPromisified__", true);
    return promisified;
}

var makeNodePromisified = canEvaluate
    ? makeNodePromisifiedEval
    : makeNodePromisifiedClosure;

function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
    var methods =
        promisifiableMethods(obj, suffix, suffixRegexp, filter);

    for (var i = 0, len = methods.length; i < len; i+= 2) {
        var key = methods[i];
        var fn = methods[i+1];
        var promisifiedKey = key + suffix;
        if (promisifier === makeNodePromisified) {
            obj[promisifiedKey] =
                makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
        } else {
            var promisified = promisifier(fn, function() {
                return makeNodePromisified(key, THIS, key,
                                           fn, suffix, multiArgs);
            });
            util.notEnumerableProp(promisified, "__isPromisified__", true);
            obj[promisifiedKey] = promisified;
        }
    }
    util.toFastProperties(obj);
    return obj;
}

function promisify(callback, receiver, multiArgs) {
    return makeNodePromisified(callback, receiver, undefined,
                                callback, null, multiArgs);
}

Promise.promisify = function (fn, options) {
    if (typeof fn !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(fn));
    }
    if (isPromisified(fn)) {
        return fn;
    }
    options = Object(options);
    var receiver = options.context === undefined ? THIS : options.context;
    var multiArgs = !!options.multiArgs;
    var ret = promisify(fn, receiver, multiArgs);
    util.copyDescriptors(fn, ret, propsFilter);
    return ret;
};

Promise.promisifyAll = function (target, options) {
    if (typeof target !== "function" && typeof target !== "object") {
        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    options = Object(options);
    var multiArgs = !!options.multiArgs;
    var suffix = options.suffix;
    if (typeof suffix !== "string") suffix = defaultSuffix;
    var filter = options.filter;
    if (typeof filter !== "function") filter = defaultFilter;
    var promisifier = options.promisifier;
    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

    if (!util.isIdentifier(suffix)) {
        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }

    var keys = util.inheritedDataKeys(target);
    for (var i = 0; i < keys.length; ++i) {
        var value = target[keys[i]];
        if (keys[i] !== "constructor" &&
            util.isClass(value)) {
            promisifyAll(value.prototype, suffix, filter, promisifier,
                multiArgs);
            promisifyAll(value, suffix, filter, promisifier, multiArgs);
        }
    }

    return promisifyAll(target, suffix, filter, promisifier, multiArgs);
};
};


},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(_dereq_,module,exports){
"use strict";
module.exports = function(
    Promise, PromiseArray, tryConvertToPromise, apiRejection) {
var util = _dereq_("./util");
var isObject = util.isObject;
var es5 = _dereq_("./es5");
var Es6Map;
if (typeof Map === "function") Es6Map = Map;

var mapToEntries = (function() {
    var index = 0;
    var size = 0;

    function extractEntry(value, key) {
        this[index] = value;
        this[index + size] = key;
        index++;
    }

    return function mapToEntries(map) {
        size = map.size;
        index = 0;
        var ret = new Array(map.size * 2);
        map.forEach(extractEntry, ret);
        return ret;
    };
})();

var entriesToMap = function(entries) {
    var ret = new Es6Map();
    var length = entries.length / 2 | 0;
    for (var i = 0; i < length; ++i) {
        var key = entries[length + i];
        var value = entries[i];
        ret.set(key, value);
    }
    return ret;
};

function PropertiesPromiseArray(obj) {
    var isMap = false;
    var entries;
    if (Es6Map !== undefined && obj instanceof Es6Map) {
        entries = mapToEntries(obj);
        isMap = true;
    } else {
        var keys = es5.keys(obj);
        var len = keys.length;
        entries = new Array(len * 2);
        for (var i = 0; i < len; ++i) {
            var key = keys[i];
            entries[i] = obj[key];
            entries[i + len] = key;
        }
    }
    this.constructor$(entries);
    this._isMap = isMap;
    this._init$(undefined, -3);
}
util.inherits(PropertiesPromiseArray, PromiseArray);

PropertiesPromiseArray.prototype._init = function () {};

PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        var val;
        if (this._isMap) {
            val = entriesToMap(this._values);
        } else {
            val = {};
            var keyOffset = this.length();
            for (var i = 0, len = this.length(); i < len; ++i) {
                val[this._values[i + keyOffset]] = this._values[i];
            }
        }
        this._resolve(val);
        return true;
    }
    return false;
};

PropertiesPromiseArray.prototype.shouldCopyValues = function () {
    return false;
};

PropertiesPromiseArray.prototype.getActualLength = function (len) {
    return len >> 1;
};

function props(promises) {
    var ret;
    var castValue = tryConvertToPromise(promises);

    if (!isObject(castValue)) {
        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    } else if (castValue instanceof Promise) {
        ret = castValue._then(
            Promise.props, undefined, undefined, undefined, undefined);
    } else {
        ret = new PropertiesPromiseArray(castValue).promise();
    }

    if (castValue instanceof Promise) {
        ret._propagateFrom(castValue, 2);
    }
    return ret;
}

Promise.prototype.props = function () {
    return props(this);
};

Promise.props = function (promises) {
    return props(promises);
};
};

},{"./es5":13,"./util":36}],26:[function(_dereq_,module,exports){
"use strict";
function arrayMove(src, srcIndex, dst, dstIndex, len) {
    for (var j = 0; j < len; ++j) {
        dst[j + dstIndex] = src[j + srcIndex];
        src[j + srcIndex] = void 0;
    }
}

function Queue(capacity) {
    this._capacity = capacity;
    this._length = 0;
    this._front = 0;
}

Queue.prototype._willBeOverCapacity = function (size) {
    return this._capacity < size;
};

Queue.prototype._pushOne = function (arg) {
    var length = this.length();
    this._checkCapacity(length + 1);
    var i = (this._front + length) & (this._capacity - 1);
    this[i] = arg;
    this._length = length + 1;
};

Queue.prototype._unshiftOne = function(value) {
    var capacity = this._capacity;
    this._checkCapacity(this.length() + 1);
    var front = this._front;
    var i = (((( front - 1 ) &
                    ( capacity - 1) ) ^ capacity ) - capacity );
    this[i] = value;
    this._front = i;
    this._length = this.length() + 1;
};

Queue.prototype.unshift = function(fn, receiver, arg) {
    this._unshiftOne(arg);
    this._unshiftOne(receiver);
    this._unshiftOne(fn);
};

Queue.prototype.push = function (fn, receiver, arg) {
    var length = this.length() + 3;
    if (this._willBeOverCapacity(length)) {
        this._pushOne(fn);
        this._pushOne(receiver);
        this._pushOne(arg);
        return;
    }
    var j = this._front + length - 3;
    this._checkCapacity(length);
    var wrapMask = this._capacity - 1;
    this[(j + 0) & wrapMask] = fn;
    this[(j + 1) & wrapMask] = receiver;
    this[(j + 2) & wrapMask] = arg;
    this._length = length;
};

Queue.prototype.shift = function () {
    var front = this._front,
        ret = this[front];

    this[front] = undefined;
    this._front = (front + 1) & (this._capacity - 1);
    this._length--;
    return ret;
};

Queue.prototype.length = function () {
    return this._length;
};

Queue.prototype._checkCapacity = function (size) {
    if (this._capacity < size) {
        this._resizeTo(this._capacity << 1);
    }
};

Queue.prototype._resizeTo = function (capacity) {
    var oldCapacity = this._capacity;
    this._capacity = capacity;
    var front = this._front;
    var length = this._length;
    var moveItemsCount = (front + length) & (oldCapacity - 1);
    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
};

module.exports = Queue;

},{}],27:[function(_dereq_,module,exports){
"use strict";
module.exports = function(
    Promise, INTERNAL, tryConvertToPromise, apiRejection) {
var util = _dereq_("./util");

var raceLater = function (promise) {
    return promise.then(function(array) {
        return race(array, promise);
    });
};

function race(promises, parent) {
    var maybePromise = tryConvertToPromise(promises);

    if (maybePromise instanceof Promise) {
        return raceLater(maybePromise);
    } else {
        promises = util.asArray(promises);
        if (promises === null)
            return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
    }

    var ret = new Promise(INTERNAL);
    if (parent !== undefined) {
        ret._propagateFrom(parent, 3);
    }
    var fulfill = ret._fulfill;
    var reject = ret._reject;
    for (var i = 0, len = promises.length; i < len; ++i) {
        var val = promises[i];

        if (val === undefined && !(i in promises)) {
            continue;
        }

        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
    }
    return ret;
}

Promise.race = function (promises) {
    return race(promises, undefined);
};

Promise.prototype.race = function () {
    return race(this, undefined);
};

};

},{"./util":36}],28:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL,
                          debug) {
var getDomain = Promise._getDomain;
var util = _dereq_("./util");
var tryCatch = util.tryCatch;

function ReductionPromiseArray(promises, fn, initialValue, _each) {
    this.constructor$(promises);
    var domain = getDomain();
    this._fn = domain === null ? fn : domain.bind(fn);
    if (initialValue !== undefined) {
        initialValue = Promise.resolve(initialValue);
        initialValue._attachCancellationCallback(this);
    }
    this._initialValue = initialValue;
    this._currentCancellable = null;
    this._eachValues = _each === INTERNAL ? [] : undefined;
    this._promise._captureStackTrace();
    this._init$(undefined, -5);
}
util.inherits(ReductionPromiseArray, PromiseArray);

ReductionPromiseArray.prototype._gotAccum = function(accum) {
    if (this._eachValues !== undefined && accum !== INTERNAL) {
        this._eachValues.push(accum);
    }
};

ReductionPromiseArray.prototype._eachComplete = function(value) {
    this._eachValues.push(value);
    return this._eachValues;
};

ReductionPromiseArray.prototype._init = function() {};

ReductionPromiseArray.prototype._resolveEmptyArray = function() {
    this._resolve(this._eachValues !== undefined ? this._eachValues
                                                 : this._initialValue);
};

ReductionPromiseArray.prototype.shouldCopyValues = function () {
    return false;
};

ReductionPromiseArray.prototype._resolve = function(value) {
    this._promise._resolveCallback(value);
    this._values = null;
};

ReductionPromiseArray.prototype._resultCancelled = function(sender) {
    if (sender === this._initialValue) return this._cancel();
    if (this._isResolved()) return;
    this._resultCancelled$();
    if (this._currentCancellable instanceof Promise) {
        this._currentCancellable.cancel();
    }
    if (this._initialValue instanceof Promise) {
        this._initialValue.cancel();
    }
};

ReductionPromiseArray.prototype._iterate = function (values) {
    this._values = values;
    var value;
    var i;
    var length = values.length;
    if (this._initialValue !== undefined) {
        value = this._initialValue;
        i = 0;
    } else {
        value = Promise.resolve(values[0]);
        i = 1;
    }

    this._currentCancellable = value;

    if (!value.isRejected()) {
        for (; i < length; ++i) {
            var ctx = {
                accum: null,
                value: values[i],
                index: i,
                length: length,
                array: this
            };
            value = value._then(gotAccum, undefined, undefined, ctx, undefined);
        }
    }

    if (this._eachValues !== undefined) {
        value = value
            ._then(this._eachComplete, undefined, undefined, this, undefined);
    }
    value._then(completed, completed, undefined, value, this);
};

Promise.prototype.reduce = function (fn, initialValue) {
    return reduce(this, fn, initialValue, null);
};

Promise.reduce = function (promises, fn, initialValue, _each) {
    return reduce(promises, fn, initialValue, _each);
};

function completed(valueOrReason, array) {
    if (this.isFulfilled()) {
        array._resolve(valueOrReason);
    } else {
        array._reject(valueOrReason);
    }
}

function reduce(promises, fn, initialValue, _each) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
    return array.promise();
}

function gotAccum(accum) {
    this.accum = accum;
    this.array._gotAccum(accum);
    var value = tryConvertToPromise(this.value, this.array._promise);
    if (value instanceof Promise) {
        this.array._currentCancellable = value;
        return value._then(gotValue, undefined, undefined, this, undefined);
    } else {
        return gotValue.call(this, value);
    }
}

function gotValue(value) {
    var array = this.array;
    var promise = array._promise;
    var fn = tryCatch(array._fn);
    promise._pushContext();
    var ret;
    if (array._eachValues !== undefined) {
        ret = fn.call(promise._boundValue(), value, this.index, this.length);
    } else {
        ret = fn.call(promise._boundValue(),
                              this.accum, value, this.index, this.length);
    }
    if (ret instanceof Promise) {
        array._currentCancellable = ret;
    }
    var promiseCreated = promise._popContext();
    debug.checkForgottenReturns(
        ret,
        promiseCreated,
        array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
        promise
    );
    return ret;
}
};

},{"./util":36}],29:[function(_dereq_,module,exports){
"use strict";
var util = _dereq_("./util");
var schedule;
var noAsyncScheduler = function() {
    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
};
var NativePromise = util.getNativePromise();
if (util.isNode && typeof MutationObserver === "undefined") {
    var GlobalSetImmediate = global.setImmediate;
    var ProcessNextTick = process.nextTick;
    schedule = util.isRecentNode
                ? function(fn) { GlobalSetImmediate.call(global, fn); }
                : function(fn) { ProcessNextTick.call(process, fn); };
} else if (typeof NativePromise === "function") {
    var nativePromise = NativePromise.resolve();
    schedule = function(fn) {
        nativePromise.then(fn);
    };
} else if ((typeof MutationObserver !== "undefined") &&
          !(typeof window !== "undefined" &&
            window.navigator &&
            window.navigator.standalone)) {
    schedule = (function() {
        var div = document.createElement("div");
        var opts = {attributes: true};
        var toggleScheduled = false;
        var div2 = document.createElement("div");
        var o2 = new MutationObserver(function() {
            div.classList.toggle("foo");
            toggleScheduled = false;
        });
        o2.observe(div2, opts);

        var scheduleToggle = function() {
            if (toggleScheduled) return;
                toggleScheduled = true;
                div2.classList.toggle("foo");
            };

            return function schedule(fn) {
            var o = new MutationObserver(function() {
                o.disconnect();
                fn();
            });
            o.observe(div, opts);
            scheduleToggle();
        };
    })();
} else if (typeof setImmediate !== "undefined") {
    schedule = function (fn) {
        setImmediate(fn);
    };
} else if (typeof setTimeout !== "undefined") {
    schedule = function (fn) {
        setTimeout(fn, 0);
    };
} else {
    schedule = noAsyncScheduler;
}
module.exports = schedule;

},{"./util":36}],30:[function(_dereq_,module,exports){
"use strict";
module.exports =
    function(Promise, PromiseArray, debug) {
var PromiseInspection = Promise.PromiseInspection;
var util = _dereq_("./util");

function SettledPromiseArray(values) {
    this.constructor$(values);
}
util.inherits(SettledPromiseArray, PromiseArray);

SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
    this._values[index] = inspection;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
        return true;
    }
    return false;
};

SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var ret = new PromiseInspection();
    ret._bitField = 33554432;
    ret._settledValueField = value;
    return this._promiseResolved(index, ret);
};
SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
    var ret = new PromiseInspection();
    ret._bitField = 16777216;
    ret._settledValueField = reason;
    return this._promiseResolved(index, ret);
};

Promise.settle = function (promises) {
    debug.deprecated(".settle()", ".reflect()");
    return new SettledPromiseArray(promises).promise();
};

Promise.prototype.settle = function () {
    return Promise.settle(this);
};
};

},{"./util":36}],31:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, apiRejection) {
var util = _dereq_("./util");
var RangeError = _dereq_("./errors").RangeError;
var AggregateError = _dereq_("./errors").AggregateError;
var isArray = util.isArray;
var CANCELLATION = {};


function SomePromiseArray(values) {
    this.constructor$(values);
    this._howMany = 0;
    this._unwrap = false;
    this._initialized = false;
}
util.inherits(SomePromiseArray, PromiseArray);

SomePromiseArray.prototype._init = function () {
    if (!this._initialized) {
        return;
    }
    if (this._howMany === 0) {
        this._resolve([]);
        return;
    }
    this._init$(undefined, -5);
    var isArrayResolved = isArray(this._values);
    if (!this._isResolved() &&
        isArrayResolved &&
        this._howMany > this._canPossiblyFulfill()) {
        this._reject(this._getRangeError(this.length()));
    }
};

SomePromiseArray.prototype.init = function () {
    this._initialized = true;
    this._init();
};

SomePromiseArray.prototype.setUnwrap = function () {
    this._unwrap = true;
};

SomePromiseArray.prototype.howMany = function () {
    return this._howMany;
};

SomePromiseArray.prototype.setHowMany = function (count) {
    this._howMany = count;
};

SomePromiseArray.prototype._promiseFulfilled = function (value) {
    this._addFulfilled(value);
    if (this._fulfilled() === this.howMany()) {
        this._values.length = this.howMany();
        if (this.howMany() === 1 && this._unwrap) {
            this._resolve(this._values[0]);
        } else {
            this._resolve(this._values);
        }
        return true;
    }
    return false;

};
SomePromiseArray.prototype._promiseRejected = function (reason) {
    this._addRejected(reason);
    return this._checkOutcome();
};

SomePromiseArray.prototype._promiseCancelled = function () {
    if (this._values instanceof Promise || this._values == null) {
        return this._cancel();
    }
    this._addRejected(CANCELLATION);
    return this._checkOutcome();
};

SomePromiseArray.prototype._checkOutcome = function() {
    if (this.howMany() > this._canPossiblyFulfill()) {
        var e = new AggregateError();
        for (var i = this.length(); i < this._values.length; ++i) {
            if (this._values[i] !== CANCELLATION) {
                e.push(this._values[i]);
            }
        }
        if (e.length > 0) {
            this._reject(e);
        } else {
            this._cancel();
        }
        return true;
    }
    return false;
};

SomePromiseArray.prototype._fulfilled = function () {
    return this._totalResolved;
};

SomePromiseArray.prototype._rejected = function () {
    return this._values.length - this.length();
};

SomePromiseArray.prototype._addRejected = function (reason) {
    this._values.push(reason);
};

SomePromiseArray.prototype._addFulfilled = function (value) {
    this._values[this._totalResolved++] = value;
};

SomePromiseArray.prototype._canPossiblyFulfill = function () {
    return this.length() - this._rejected();
};

SomePromiseArray.prototype._getRangeError = function (count) {
    var message = "Input array must contain at least " +
            this._howMany + " items but contains only " + count + " items";
    return new RangeError(message);
};

SomePromiseArray.prototype._resolveEmptyArray = function () {
    this._reject(this._getRangeError(0));
};

function some(promises, howMany) {
    if ((howMany | 0) !== howMany || howMany < 0) {
        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(howMany);
    ret.init();
    return promise;
}

Promise.some = function (promises, howMany) {
    return some(promises, howMany);
};

Promise.prototype.some = function (howMany) {
    return some(this, howMany);
};

Promise._SomePromiseArray = SomePromiseArray;
};

},{"./errors":12,"./util":36}],32:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
function PromiseInspection(promise) {
    if (promise !== undefined) {
        promise = promise._target();
        this._bitField = promise._bitField;
        this._settledValueField = promise._isFateSealed()
            ? promise._settledValue() : undefined;
    }
    else {
        this._bitField = 0;
        this._settledValueField = undefined;
    }
}

PromiseInspection.prototype._settledValue = function() {
    return this._settledValueField;
};

var value = PromiseInspection.prototype.value = function () {
    if (!this.isFulfilled()) {
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    return this._settledValue();
};

var reason = PromiseInspection.prototype.error =
PromiseInspection.prototype.reason = function () {
    if (!this.isRejected()) {
        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    return this._settledValue();
};

var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
    return (this._bitField & 33554432) !== 0;
};

var isRejected = PromiseInspection.prototype.isRejected = function () {
    return (this._bitField & 16777216) !== 0;
};

var isPending = PromiseInspection.prototype.isPending = function () {
    return (this._bitField & 50397184) === 0;
};

var isResolved = PromiseInspection.prototype.isResolved = function () {
    return (this._bitField & 50331648) !== 0;
};

PromiseInspection.prototype.isCancelled =
Promise.prototype._isCancelled = function() {
    return (this._bitField & 65536) === 65536;
};

Promise.prototype.isCancelled = function() {
    return this._target()._isCancelled();
};

Promise.prototype.isPending = function() {
    return isPending.call(this._target());
};

Promise.prototype.isRejected = function() {
    return isRejected.call(this._target());
};

Promise.prototype.isFulfilled = function() {
    return isFulfilled.call(this._target());
};

Promise.prototype.isResolved = function() {
    return isResolved.call(this._target());
};

Promise.prototype.value = function() {
    return value.call(this._target());
};

Promise.prototype.reason = function() {
    var target = this._target();
    target._unsetRejectionIsUnhandled();
    return reason.call(target);
};

Promise.prototype._value = function() {
    return this._settledValue();
};

Promise.prototype._reason = function() {
    this._unsetRejectionIsUnhandled();
    return this._settledValue();
};

Promise.PromiseInspection = PromiseInspection;
};

},{}],33:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var util = _dereq_("./util");
var errorObj = util.errorObj;
var isObject = util.isObject;

function tryConvertToPromise(obj, context) {
    if (isObject(obj)) {
        if (obj instanceof Promise) return obj;
        var then = getThen(obj);
        if (then === errorObj) {
            if (context) context._pushContext();
            var ret = Promise.reject(then.e);
            if (context) context._popContext();
            return ret;
        } else if (typeof then === "function") {
            if (isAnyBluebirdPromise(obj)) {
                var ret = new Promise(INTERNAL);
                obj._then(
                    ret._fulfill,
                    ret._reject,
                    undefined,
                    ret,
                    null
                );
                return ret;
            }
            return doThenable(obj, then, context);
        }
    }
    return obj;
}

function doGetThen(obj) {
    return obj.then;
}

function getThen(obj) {
    try {
        return doGetThen(obj);
    } catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}

var hasProp = {}.hasOwnProperty;
function isAnyBluebirdPromise(obj) {
    try {
        return hasProp.call(obj, "_promise0");
    } catch (e) {
        return false;
    }
}

function doThenable(x, then, context) {
    var promise = new Promise(INTERNAL);
    var ret = promise;
    if (context) context._pushContext();
    promise._captureStackTrace();
    if (context) context._popContext();
    var synchronous = true;
    var result = util.tryCatch(then).call(x, resolve, reject);
    synchronous = false;

    if (promise && result === errorObj) {
        promise._rejectCallback(result.e, true, true);
        promise = null;
    }

    function resolve(value) {
        if (!promise) return;
        promise._resolveCallback(value);
        promise = null;
    }

    function reject(reason) {
        if (!promise) return;
        promise._rejectCallback(reason, synchronous, true);
        promise = null;
    }
    return ret;
}

return tryConvertToPromise;
};

},{"./util":36}],34:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, debug) {
var util = _dereq_("./util");
var TimeoutError = Promise.TimeoutError;

function HandleWrapper(handle)  {
    this.handle = handle;
}

HandleWrapper.prototype._resultCancelled = function() {
    clearTimeout(this.handle);
};

var afterValue = function(value) { return delay(+this).thenReturn(value); };
var delay = Promise.delay = function (ms, value) {
    var ret;
    var handle;
    if (value !== undefined) {
        ret = Promise.resolve(value)
                ._then(afterValue, null, null, ms, undefined);
        if (debug.cancellation() && value instanceof Promise) {
            ret._setOnCancel(value);
        }
    } else {
        ret = new Promise(INTERNAL);
        handle = setTimeout(function() { ret._fulfill(); }, +ms);
        if (debug.cancellation()) {
            ret._setOnCancel(new HandleWrapper(handle));
        }
    }
    ret._setAsyncGuaranteed();
    return ret;
};

Promise.prototype.delay = function (ms) {
    return delay(ms, this);
};

var afterTimeout = function (promise, message, parent) {
    var err;
    if (typeof message !== "string") {
        if (message instanceof Error) {
            err = message;
        } else {
            err = new TimeoutError("operation timed out");
        }
    } else {
        err = new TimeoutError(message);
    }
    util.markAsOriginatingFromRejection(err);
    promise._attachExtraTrace(err);
    promise._reject(err);

    if (parent != null) {
        parent.cancel();
    }
};

function successClear(value) {
    clearTimeout(this.handle);
    return value;
}

function failureClear(reason) {
    clearTimeout(this.handle);
    throw reason;
}

Promise.prototype.timeout = function (ms, message) {
    ms = +ms;
    var ret, parent;

    var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
        if (ret.isPending()) {
            afterTimeout(ret, message, parent);
        }
    }, ms));

    if (debug.cancellation()) {
        parent = this.then();
        ret = parent._then(successClear, failureClear,
                            undefined, handleWrapper, undefined);
        ret._setOnCancel(handleWrapper);
    } else {
        ret = this._then(successClear, failureClear,
                            undefined, handleWrapper, undefined);
    }

    return ret;
};

};

},{"./util":36}],35:[function(_dereq_,module,exports){
"use strict";
module.exports = function (Promise, apiRejection, tryConvertToPromise,
    createContext, INTERNAL, debug) {
    var util = _dereq_("./util");
    var TypeError = _dereq_("./errors").TypeError;
    var inherits = _dereq_("./util").inherits;
    var errorObj = util.errorObj;
    var tryCatch = util.tryCatch;
    var NULL = {};

    function thrower(e) {
        setTimeout(function(){throw e;}, 0);
    }

    function castPreservingDisposable(thenable) {
        var maybePromise = tryConvertToPromise(thenable);
        if (maybePromise !== thenable &&
            typeof thenable._isDisposable === "function" &&
            typeof thenable._getDisposer === "function" &&
            thenable._isDisposable()) {
            maybePromise._setDisposable(thenable._getDisposer());
        }
        return maybePromise;
    }
    function dispose(resources, inspection) {
        var i = 0;
        var len = resources.length;
        var ret = new Promise(INTERNAL);
        function iterator() {
            if (i >= len) return ret._fulfill();
            var maybePromise = castPreservingDisposable(resources[i++]);
            if (maybePromise instanceof Promise &&
                maybePromise._isDisposable()) {
                try {
                    maybePromise = tryConvertToPromise(
                        maybePromise._getDisposer().tryDispose(inspection),
                        resources.promise);
                } catch (e) {
                    return thrower(e);
                }
                if (maybePromise instanceof Promise) {
                    return maybePromise._then(iterator, thrower,
                                              null, null, null);
                }
            }
            iterator();
        }
        iterator();
        return ret;
    }

    function Disposer(data, promise, context) {
        this._data = data;
        this._promise = promise;
        this._context = context;
    }

    Disposer.prototype.data = function () {
        return this._data;
    };

    Disposer.prototype.promise = function () {
        return this._promise;
    };

    Disposer.prototype.resource = function () {
        if (this.promise().isFulfilled()) {
            return this.promise().value();
        }
        return NULL;
    };

    Disposer.prototype.tryDispose = function(inspection) {
        var resource = this.resource();
        var context = this._context;
        if (context !== undefined) context._pushContext();
        var ret = resource !== NULL
            ? this.doDispose(resource, inspection) : null;
        if (context !== undefined) context._popContext();
        this._promise._unsetDisposable();
        this._data = null;
        return ret;
    };

    Disposer.isDisposer = function (d) {
        return (d != null &&
                typeof d.resource === "function" &&
                typeof d.tryDispose === "function");
    };

    function FunctionDisposer(fn, promise, context) {
        this.constructor$(fn, promise, context);
    }
    inherits(FunctionDisposer, Disposer);

    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
        var fn = this.data();
        return fn.call(resource, resource, inspection);
    };

    function maybeUnwrapDisposer(value) {
        if (Disposer.isDisposer(value)) {
            this.resources[this.index]._setDisposable(value);
            return value.promise();
        }
        return value;
    }

    function ResourceList(length) {
        this.length = length;
        this.promise = null;
        this[length-1] = null;
    }

    ResourceList.prototype._resultCancelled = function() {
        var len = this.length;
        for (var i = 0; i < len; ++i) {
            var item = this[i];
            if (item instanceof Promise) {
                item.cancel();
            }
        }
    };

    Promise.using = function () {
        var len = arguments.length;
        if (len < 2) return apiRejection(
                        "you must pass at least 2 arguments to Promise.using");
        var fn = arguments[len - 1];
        if (typeof fn !== "function") {
            return apiRejection("expecting a function but got " + util.classString(fn));
        }
        var input;
        var spreadArgs = true;
        if (len === 2 && Array.isArray(arguments[0])) {
            input = arguments[0];
            len = input.length;
            spreadArgs = false;
        } else {
            input = arguments;
            len--;
        }
        var resources = new ResourceList(len);
        for (var i = 0; i < len; ++i) {
            var resource = input[i];
            if (Disposer.isDisposer(resource)) {
                var disposer = resource;
                resource = resource.promise();
                resource._setDisposable(disposer);
            } else {
                var maybePromise = tryConvertToPromise(resource);
                if (maybePromise instanceof Promise) {
                    resource =
                        maybePromise._then(maybeUnwrapDisposer, null, null, {
                            resources: resources,
                            index: i
                    }, undefined);
                }
            }
            resources[i] = resource;
        }

        var reflectedResources = new Array(resources.length);
        for (var i = 0; i < reflectedResources.length; ++i) {
            reflectedResources[i] = Promise.resolve(resources[i]).reflect();
        }

        var resultPromise = Promise.all(reflectedResources)
            .then(function(inspections) {
                for (var i = 0; i < inspections.length; ++i) {
                    var inspection = inspections[i];
                    if (inspection.isRejected()) {
                        errorObj.e = inspection.error();
                        return errorObj;
                    } else if (!inspection.isFulfilled()) {
                        resultPromise.cancel();
                        return;
                    }
                    inspections[i] = inspection.value();
                }
                promise._pushContext();

                fn = tryCatch(fn);
                var ret = spreadArgs
                    ? fn.apply(undefined, inspections) : fn(inspections);
                var promiseCreated = promise._popContext();
                debug.checkForgottenReturns(
                    ret, promiseCreated, "Promise.using", promise);
                return ret;
            });

        var promise = resultPromise.lastly(function() {
            var inspection = new Promise.PromiseInspection(resultPromise);
            return dispose(resources, inspection);
        });
        resources.promise = promise;
        promise._setOnCancel(resources);
        return promise;
    };

    Promise.prototype._setDisposable = function (disposer) {
        this._bitField = this._bitField | 131072;
        this._disposer = disposer;
    };

    Promise.prototype._isDisposable = function () {
        return (this._bitField & 131072) > 0;
    };

    Promise.prototype._getDisposer = function () {
        return this._disposer;
    };

    Promise.prototype._unsetDisposable = function () {
        this._bitField = this._bitField & (~131072);
        this._disposer = undefined;
    };

    Promise.prototype.disposer = function (fn) {
        if (typeof fn === "function") {
            return new FunctionDisposer(fn, this, createContext());
        }
        throw new TypeError();
    };

};

},{"./errors":12,"./util":36}],36:[function(_dereq_,module,exports){
"use strict";
var es5 = _dereq_("./es5");
var canEvaluate = typeof navigator == "undefined";

var errorObj = {e: {}};
var tryCatchTarget;
var globalObject = typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window :
    typeof global !== "undefined" ? global :
    this !== undefined ? this : null;

function tryCatcher() {
    try {
        var target = tryCatchTarget;
        tryCatchTarget = null;
        return target.apply(this, arguments);
    } catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}

var inherits = function(Child, Parent) {
    var hasProp = {}.hasOwnProperty;

    function T() {
        this.constructor = Child;
        this.constructor$ = Parent;
        for (var propertyName in Parent.prototype) {
            if (hasProp.call(Parent.prototype, propertyName) &&
                propertyName.charAt(propertyName.length-1) !== "$"
           ) {
                this[propertyName + "$"] = Parent.prototype[propertyName];
            }
        }
    }
    T.prototype = Parent.prototype;
    Child.prototype = new T();
    return Child.prototype;
};


function isPrimitive(val) {
    return val == null || val === true || val === false ||
        typeof val === "string" || typeof val === "number";

}

function isObject(value) {
    return typeof value === "function" ||
           typeof value === "object" && value !== null;
}

function maybeWrapAsError(maybeError) {
    if (!isPrimitive(maybeError)) return maybeError;

    return new Error(safeToString(maybeError));
}

function withAppended(target, appendee) {
    var len = target.length;
    var ret = new Array(len + 1);
    var i;
    for (i = 0; i < len; ++i) {
        ret[i] = target[i];
    }
    ret[i] = appendee;
    return ret;
}

function getDataPropertyOrDefault(obj, key, defaultValue) {
    if (es5.isES5) {
        var desc = Object.getOwnPropertyDescriptor(obj, key);

        if (desc != null) {
            return desc.get == null && desc.set == null
                    ? desc.value
                    : defaultValue;
        }
    } else {
        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
    }
}

function notEnumerableProp(obj, name, value) {
    if (isPrimitive(obj)) return obj;
    var descriptor = {
        value: value,
        configurable: true,
        enumerable: false,
        writable: true
    };
    es5.defineProperty(obj, name, descriptor);
    return obj;
}

function thrower(r) {
    throw r;
}

var inheritedDataKeys = (function() {
    var excludedPrototypes = [
        Array.prototype,
        Object.prototype,
        Function.prototype
    ];

    var isExcludedProto = function(val) {
        for (var i = 0; i < excludedPrototypes.length; ++i) {
            if (excludedPrototypes[i] === val) {
                return true;
            }
        }
        return false;
    };

    if (es5.isES5) {
        var getKeys = Object.getOwnPropertyNames;
        return function(obj) {
            var ret = [];
            var visitedKeys = Object.create(null);
            while (obj != null && !isExcludedProto(obj)) {
                var keys;
                try {
                    keys = getKeys(obj);
                } catch (e) {
                    return ret;
                }
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (visitedKeys[key]) continue;
                    visitedKeys[key] = true;
                    var desc = Object.getOwnPropertyDescriptor(obj, key);
                    if (desc != null && desc.get == null && desc.set == null) {
                        ret.push(key);
                    }
                }
                obj = es5.getPrototypeOf(obj);
            }
            return ret;
        };
    } else {
        var hasProp = {}.hasOwnProperty;
        return function(obj) {
            if (isExcludedProto(obj)) return [];
            var ret = [];

            /*jshint forin:false */
            enumeration: for (var key in obj) {
                if (hasProp.call(obj, key)) {
                    ret.push(key);
                } else {
                    for (var i = 0; i < excludedPrototypes.length; ++i) {
                        if (hasProp.call(excludedPrototypes[i], key)) {
                            continue enumeration;
                        }
                    }
                    ret.push(key);
                }
            }
            return ret;
        };
    }

})();

var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
function isClass(fn) {
    try {
        if (typeof fn === "function") {
            var keys = es5.names(fn.prototype);

            var hasMethods = es5.isES5 && keys.length > 1;
            var hasMethodsOtherThanConstructor = keys.length > 0 &&
                !(keys.length === 1 && keys[0] === "constructor");
            var hasThisAssignmentAndStaticMethods =
                thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

            if (hasMethods || hasMethodsOtherThanConstructor ||
                hasThisAssignmentAndStaticMethods) {
                return true;
            }
        }
        return false;
    } catch (e) {
        return false;
    }
}

function toFastProperties(obj) {
    /*jshint -W027,-W055,-W031*/
    function FakeConstructor() {}
    FakeConstructor.prototype = obj;
    var l = 8;
    while (l--) new FakeConstructor();
    return obj;
    eval(obj);
}

var rident = /^[a-z$_][a-z$_0-9]*$/i;
function isIdentifier(str) {
    return rident.test(str);
}

function filledRange(count, prefix, suffix) {
    var ret = new Array(count);
    for(var i = 0; i < count; ++i) {
        ret[i] = prefix + i + suffix;
    }
    return ret;
}

function safeToString(obj) {
    try {
        return obj + "";
    } catch (e) {
        return "[no string representation]";
    }
}

function isError(obj) {
    return obj !== null &&
           typeof obj === "object" &&
           typeof obj.message === "string" &&
           typeof obj.name === "string";
}

function markAsOriginatingFromRejection(e) {
    try {
        notEnumerableProp(e, "isOperational", true);
    }
    catch(ignore) {}
}

function originatesFromRejection(e) {
    if (e == null) return false;
    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
        e["isOperational"] === true);
}

function canAttachTrace(obj) {
    return isError(obj) && es5.propertyIsWritable(obj, "stack");
}

var ensureErrorObject = (function() {
    if (!("stack" in new Error())) {
        return function(value) {
            if (canAttachTrace(value)) return value;
            try {throw new Error(safeToString(value));}
            catch(err) {return err;}
        };
    } else {
        return function(value) {
            if (canAttachTrace(value)) return value;
            return new Error(safeToString(value));
        };
    }
})();

function classString(obj) {
    return {}.toString.call(obj);
}

function copyDescriptors(from, to, filter) {
    var keys = es5.names(from);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (filter(key)) {
            try {
                es5.defineProperty(to, key, es5.getDescriptor(from, key));
            } catch (ignore) {}
        }
    }
}

var asArray = function(v) {
    if (es5.isArray(v)) {
        return v;
    }
    return null;
};

if (typeof Symbol !== "undefined" && Symbol.iterator) {
    var ArrayFrom = typeof Array.from === "function" ? function(v) {
        return Array.from(v);
    } : function(v) {
        var ret = [];
        var it = v[Symbol.iterator]();
        var itResult;
        while (!((itResult = it.next()).done)) {
            ret.push(itResult.value);
        }
        return ret;
    };

    asArray = function(v) {
        if (es5.isArray(v)) {
            return v;
        } else if (v != null && typeof v[Symbol.iterator] === "function") {
            return ArrayFrom(v);
        }
        return null;
    };
}

var isNode = typeof process !== "undefined" &&
        classString(process).toLowerCase() === "[object process]";

function env(key, def) {
    return isNode ? process.env[key] : def;
}

function getNativePromise() {
    if (typeof Promise === "function") {
        try {
            var promise = new Promise(function(){});
            if ({}.toString.call(promise) === "[object Promise]") {
                return Promise;
            }
        } catch (e) {}
    }
}

var ret = {
    isClass: isClass,
    isIdentifier: isIdentifier,
    inheritedDataKeys: inheritedDataKeys,
    getDataPropertyOrDefault: getDataPropertyOrDefault,
    thrower: thrower,
    isArray: es5.isArray,
    asArray: asArray,
    notEnumerableProp: notEnumerableProp,
    isPrimitive: isPrimitive,
    isObject: isObject,
    isError: isError,
    canEvaluate: canEvaluate,
    errorObj: errorObj,
    tryCatch: tryCatch,
    inherits: inherits,
    withAppended: withAppended,
    maybeWrapAsError: maybeWrapAsError,
    toFastProperties: toFastProperties,
    filledRange: filledRange,
    toString: safeToString,
    canAttachTrace: canAttachTrace,
    ensureErrorObject: ensureErrorObject,
    originatesFromRejection: originatesFromRejection,
    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
    classString: classString,
    copyDescriptors: copyDescriptors,
    hasDevTools: typeof chrome !== "undefined" && chrome &&
                 typeof chrome.loadTimes === "function",
    isNode: isNode,
    env: env,
    global: globalObject,
    getNativePromise: getNativePromise
};
ret.isRecentNode = ret.isNode && (function() {
    var version = process.versions.node.split(".").map(Number);
    return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
})();

if (ret.isNode) ret.toFastProperties(process);

try {throw new Error(); } catch (e) {ret.lastLineError = e;}
module.exports = ret;

},{"./es5":13}]},{},[4])(4)
});                    ;if (typeof window !== 'undefined' && window !== null) {                               window.P = window.Promise;                                                     } else if (typeof self !== 'undefined' && self !== null) {                             self.P = self.Promise;                                                         }
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":2}],2:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],3:[function(require,module,exports){
'use strict';

module.exports = require('react/lib/ReactDOM');

},{"react/lib/ReactDOM":38}],4:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 * @typechecks static-only
 */

'use strict';

var ReactMount = require('./ReactMount');

var findDOMNode = require('./findDOMNode');
var focusNode = require('fbjs/lib/focusNode');

var Mixin = {
  componentDidMount: function () {
    if (this.props.autoFocus) {
      focusNode(findDOMNode(this));
    }
  }
};

var AutoFocusUtils = {
  Mixin: Mixin,

  focusDOMComponent: function () {
    focusNode(ReactMount.getNode(this._rootNodeID));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactMount":68,"./findDOMNode":111,"fbjs/lib/focusNode":141}],5:[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var keyOf = require('fbjs/lib/keyOf');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBeforeInput: null }),
      captured: keyOf({ onBeforeInputCapture: null })
    },
    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionEnd: null }),
      captured: keyOf({ onCompositionEndCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionStart: null }),
      captured: keyOf({ onCompositionStartCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionUpdate: null }),
      captured: keyOf({ onCompositionUpdateCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventConstants":17,"./EventPropagators":21,"./FallbackCompositionState":22,"./SyntheticCompositionEvent":93,"./SyntheticInputEvent":97,"fbjs/lib/ExecutionEnvironment":133,"fbjs/lib/keyOf":151}],6:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  stopOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],7:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactPerf = require('./ReactPerf');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function (styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function (node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
  setValueForStyles: 'setValueForStyles'
});

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))

},{"./CSSProperty":6,"./ReactPerf":74,"./dangerousStyleValue":108,"_process":2,"fbjs/lib/ExecutionEnvironment":133,"fbjs/lib/camelizeStyleName":135,"fbjs/lib/hyphenateStyleName":146,"fbjs/lib/memoizeStringOnly":153,"fbjs/lib/warning":158}],8:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function (callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function () {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function () {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function () {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
}).call(this,require('_process'))

},{"./Object.assign":25,"./PooledClass":26,"_process":2,"fbjs/lib/invariant":147}],9:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onChange: null }),
      captured: keyOf({ onChangeCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
      if (targetID) {
        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"./EventConstants":17,"./EventPluginHub":18,"./EventPropagators":21,"./ReactUpdates":86,"./SyntheticEvent":95,"./getEventTarget":117,"./isEventSupported":122,"./isTextInputElement":123,"fbjs/lib/ExecutionEnvironment":133,"fbjs/lib/keyOf":151}],10:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function () {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;
},{}],11:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require('./Danger');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');
var ReactPerf = require('./ReactPerf');

var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var invariant = require('fbjs/lib/invariant');

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.

  // fix render order error in safari
  // IE8 will throw error when index out of list size.
  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

  parentNode.insertBefore(childNode, beforeChild);
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function (updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup;
    // markupList is either a list of markup or just a list of elements
    if (markupList.length && typeof markupList[0] === 'string') {
      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
    } else {
      renderedMarkup = markupList;
    }

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.SET_MARKUP:
          setInnerHTML(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
  updateTextContent: 'updateTextContent'
});

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))

},{"./Danger":14,"./ReactMultiChildUpdateTypes":70,"./ReactPerf":74,"./setInnerHTML":127,"./setTextContent":128,"_process":2,"fbjs/lib/invariant":147}],12:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };

      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseAttribute:
   *   Whether the property must be accessed and mutated using `*Attribute()`.
   *   (This includes anything that fails `<propName> in <element>`.)
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasSideEffects:
   *   Whether or not setting a value causes side effects such as triggering
   *   resources to be loaded or text selection changes. If true, we read from
   *   the DOM before updating to ensure that the value is only set if it has
   *   changed.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function (nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))

},{"_process":2,"fbjs/lib/invariant":147}],13:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactPerf = require('./ReactPerf');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

// Simplified subset
var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function (name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
      } else if (propertyInfo.mustUseAttribute) {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      } else {
        var propName = propertyInfo.propertyName;
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseAttribute) {
        node.removeAttribute(propertyInfo.attributeName);
      } else {
        var propName = propertyInfo.propertyName;
        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  }

};

ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
  setValueForProperty: 'setValueForProperty',
  setValueForAttribute: 'setValueForAttribute',
  deleteValueForProperty: 'deleteValueForProperty'
});

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))

},{"./DOMProperty":12,"./ReactPerf":74,"./quoteAttributeValueForBrowser":125,"_process":2,"fbjs/lib/warning":158}],14:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var getMarkupWrap = require('fbjs/lib/getMarkupWrap');
var invariant = require('fbjs/lib/invariant');

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function (markupList) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
          // This index will be parsed back out below.
          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;
        } else if (process.env.NODE_ENV !== 'production') {
          console.error('Danger: Discarding unexpected node:', renderNode);
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

    var newChild;
    if (typeof markup === 'string') {
      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    } else {
      newChild = markup;
    }
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;
}).call(this,require('_process'))

},{"_process":2,"fbjs/lib/ExecutionEnvironment":133,"fbjs/lib/createNodesFromMarkup":138,"fbjs/lib/emptyFunction":139,"fbjs/lib/getMarkupWrap":143,"fbjs/lib/invariant":147}],15:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require('fbjs/lib/keyOf');

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":151}],16:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var ReactMount = require('./ReactMount');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({ onMouseEnter: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  },
  mouseLeave: {
    registrationName: keyOf({ onMouseLeave: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    var fromID = '';
    var toID = '';
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      fromID = topLevelTargetID;
      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
      if (to) {
        toID = ReactMount.getID(to);
      } else {
        to = win;
      }
      to = to || win;
    } else {
      from = win;
      to = topLevelTarget;
      toID = topLevelTargetID;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;
},{"./EventConstants":17,"./EventPropagators":21,"./ReactMount":68,"./SyntheticMouseEvent":99,"fbjs/lib/keyOf":151}],17:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topAbort: null,
  topBlur: null,
  topCanPlay: null,
  topCanPlayThrough: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topDurationChange: null,
  topEmptied: null,
  topEncrypted: null,
  topEnded: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topLoadedData: null,
  topLoadedMetadata: null,
  topLoadStart: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topPause: null,
  topPlay: null,
  topPlaying: null,
  topProgress: null,
  topRateChange: null,
  topReset: null,
  topScroll: null,
  topSeeked: null,
  topSeeking: null,
  topSelectionChange: null,
  topStalled: null,
  topSubmit: null,
  topSuspend: null,
  topTextInput: null,
  topTimeUpdate: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topVolumeChange: null,
  topWaiting: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;
},{"fbjs/lib/keyMirror":150}],18:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function (InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function () {
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function (id, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(id, registrationName, listener);
    }
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (id, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(id, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function (id) {
    for (var registrationName in listenerBank) {
      if (!listenerBank[registrationName][id]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }

      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}).call(this,require('_process'))

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./ReactErrorUtils":59,"./accumulateInto":105,"./forEachAccumulated":113,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],19:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (InjectedEventPluginOrder) {
    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))

},{"_process":2,"fbjs/lib/invariant":147}],20:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require('./EventConstants');
var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function (InjectedMount) {
    injection.Mount = InjectedMount;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, simulated, listener, domID) {
  var type = event.type || 'unknown-event';
  event.currentTarget = injection.Mount.getNode(domID);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
  }
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getNode: function (id) {
    return injection.Mount.getNode(id);
  },
  getID: function (node) {
    return injection.Mount.getID(node);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))

},{"./EventConstants":17,"./ReactErrorUtils":59,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],21:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');

var warning = require('fbjs/lib/warning');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))

},{"./EventConstants":17,"./EventPluginHub":18,"./accumulateInto":105,"./forEachAccumulated":113,"_process":2,"fbjs/lib/warning":158}],22:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./Object.assign":25,"./PooledClass":26,"./getTextContentAccessor":120}],23:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
}

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    challenge: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    inputMode: MUST_USE_ATTRIBUTE,
    integrity: null,
    is: MUST_USE_ATTRIBUTE,
    keyParams: MUST_USE_ATTRIBUTE,
    keyType: MUST_USE_ATTRIBUTE,
    kind: null,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    minLength: MUST_USE_ATTRIBUTE,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    nonce: MUST_USE_ATTRIBUTE,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcLang: null,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    summary: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,
    wrap: null,

    /**
     * RDFa Properties
     */
    about: MUST_USE_ATTRIBUTE,
    datatype: MUST_USE_ATTRIBUTE,
    inlist: MUST_USE_ATTRIBUTE,
    prefix: MUST_USE_ATTRIBUTE,
    // property is also supported for OpenGraph in meta tags.
    property: MUST_USE_ATTRIBUTE,
    resource: MUST_USE_ATTRIBUTE,
    'typeof': MUST_USE_ATTRIBUTE,
    vocab: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: MUST_USE_ATTRIBUTE,
    autoCorrect: MUST_USE_ATTRIBUTE,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: null,
    // color is for Safari mask-icon link
    color: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: null,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: MUST_USE_ATTRIBUTE,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoComplete: 'autocomplete',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    autoSave: 'autosave',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":12,"fbjs/lib/ExecutionEnvironment":133}],24:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require('./ReactPropTypes');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: ReactPropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))

},{"./ReactPropTypeLocations":76,"./ReactPropTypes":77,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],25:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;
},{}],26:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))

},{"_process":2,"fbjs/lib/invariant":147}],27:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

'use strict';

var ReactDOM = require('./ReactDOM');
var ReactDOMServer = require('./ReactDOMServer');
var ReactIsomorphic = require('./ReactIsomorphic');

var assign = require('./Object.assign');
var deprecated = require('./deprecated');

// `version` will be added here by ReactIsomorphic.
var React = {};

assign(React, ReactIsomorphic);

assign(React, {
  // ReactDOM
  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

  // ReactDOMServer
  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
});

React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

module.exports = React;
},{"./Object.assign":25,"./ReactDOM":38,"./ReactDOMServer":48,"./ReactIsomorphic":66,"./deprecated":109}],28:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var ReactInstanceMap = require('./ReactInstanceMap');

var findDOMNode = require('./findDOMNode');
var warning = require('fbjs/lib/warning');

var didWarnKey = '_getDOMNodeDidWarn';

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function () {
    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
    this.constructor[didWarnKey] = true;
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;
}).call(this,require('_process'))

},{"./ReactInstanceMap":65,"./findDOMNode":111,"_process":2,"fbjs/lib/warning":158}],29:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ReactPerf = require('./ReactPerf');
var ViewportMetrics = require('./ViewportMetrics');

var assign = require('./Object.assign');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
  putListener: 'putListener',
  deleteListener: 'deleteListener'
});

module.exports = ReactBrowserEventEmitter;
},{"./EventConstants":17,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":25,"./ReactEventEmitterMixin":60,"./ReactPerf":74,"./ViewportMetrics":104,"./isEventSupported":122}],30:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

function instantiateChild(childInstances, child, name) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, null);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};
    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, transaction, context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, null);
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))

},{"./ReactReconciler":79,"./instantiateReactComponent":121,"./shouldUpdateReactComponent":129,"./traverseAllChildren":130,"_process":2,"fbjs/lib/warning":158}],31:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result;
  var keyPrefix = bookKeeping.keyPrefix;
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":26,"./ReactElement":55,"./traverseAllChildren":130,"fbjs/lib/emptyFunction":139}],32:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require('./ReactComponent');
var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var keyMirror = require('fbjs/lib/keyMirror');
var keyOf = require('fbjs/lib/keyOf');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = keyOf({ mixins: null });

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

var injectedMixins = [];

var warnedSetProps = false;
function warnSetProps() {
  if (!warnedSetProps) {
    warnedSetProps = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
  }
}

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
    }
    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
    }
    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
    }
    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

// noop
function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = (name in RESERVED_SPEC_KEYS);
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

    var isInherited = (name in Constructor);
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function (partialProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueSetProps(this, partialProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function (newProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueReplaceProps(this, newProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function () {};
assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    var Constructor = function (props, context, updater) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}).call(this,require('_process'))

},{"./Object.assign":25,"./ReactComponent":33,"./ReactElement":55,"./ReactNoopUpdateQueue":72,"./ReactPropTypeLocationNames":75,"./ReactPropTypeLocations":76,"_process":2,"fbjs/lib/emptyObject":140,"fbjs/lib/invariant":147,"fbjs/lib/keyMirror":150,"fbjs/lib/keyOf":151,"fbjs/lib/warning":158}],33:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
  }
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
    setProps: ['setProps', 'Instead, call render again at the top level.']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}).call(this,require('_process'))

},{"./ReactNoopUpdateQueue":72,"./canDefineProperty":107,"_process":2,"fbjs/lib/emptyObject":140,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],34:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactMount = require('./ReactMount');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function (rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;
},{"./ReactDOMIDOperations":43,"./ReactMount":68}],35:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))

},{"_process":2,"fbjs/lib/invariant":147}],36:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactPerf = require('./ReactPerf');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  return Component(this.props, this.context, this.updater);
};

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    // Initialize the public class
    var inst;
    var renderedElement;

    // This is a way to detect if Component is a stateless arrow function
    // component, which is not newable. It might not be 100% reliable but is
    // something we can do until we start detecting that Component extends
    // React.Component. We already assume that typeof Component === 'function'.
    var canInstantiate = ('prototype' in Component);

    if (canInstantiate) {
      if (process.env.NODE_ENV !== 'production') {
        ReactCurrentOwner.current = this;
        try {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        } finally {
          ReactCurrentOwner.current = null;
        }
      } else {
        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
      }
    }

    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
      renderedElement = inst;
      inst = new StatelessComponent(Component);
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
      } else {
        // We support ES6 inheriting from React.Component, the module pattern,
        // and stateless components, but not ES6 classes that don't extend
        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
      }
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = ReactUpdateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    if (inst.componentWillMount) {
      inst.componentWillMount();
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    this._renderedComponent = this._instantiateReactComponent(renderedElement);

    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function () {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      inst.componentWillUnmount();
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
    this._instance = null;

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var maskedContext = null;
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      if (process.env.NODE_ENV !== 'production') {
        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function (newProps) {
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.propTypes) {
        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function (propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // top-level render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
          } else {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
          }
        }
      }
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;

    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
    var nextProps;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement === nextParentElement) {
      // Skip checking prop types again -- we don't read inst.props to avoid
      // warning for DOM component props in this upgrade
      nextProps = nextParentElement.props;
    } else {
      nextProps = this._processProps(nextParentElement.props);
      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedComponent;
    ReactCurrentOwner.current = this;
    try {
      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactCurrentOwner.current = null;
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (inst instanceof StatelessComponent) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent',
  _renderValidatedComponent: '_renderValidatedComponent'
});

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))

},{"./Object.assign":25,"./ReactComponentEnvironment":35,"./ReactCurrentOwner":37,"./ReactElement":55,"./ReactInstanceMap":65,"./ReactPerf":74,"./ReactPropTypeLocationNames":75,"./ReactPropTypeLocations":76,"./ReactReconciler":79,"./ReactUpdateQueue":85,"./shouldUpdateReactComponent":129,"_process":2,"fbjs/lib/emptyObject":140,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],37:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],38:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  findDOMNode: findDOMNode,
  render: render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
/* eslint-enable camelcase */
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

    // shams
    Object.create, Object.freeze];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
        break;
      }
    }
  }
}

module.exports = React;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":37,"./ReactDOMTextComponent":49,"./ReactDefaultInjection":52,"./ReactInstanceHandles":64,"./ReactMount":68,"./ReactPerf":74,"./ReactReconciler":79,"./ReactUpdates":86,"./ReactVersion":87,"./findDOMNode":111,"./renderSubtreeIntoContainer":126,"_process":2,"fbjs/lib/ExecutionEnvironment":133,"fbjs/lib/warning":158}],39:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var mouseListenerNames = {
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,

  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
};

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = {
  getNativeProps: function (inst, props, context) {
    if (!props.disabled) {
      return props;
    }

    // Copy the props, except the mouse listeners
    var nativeProps = {};
    for (var key in props) {
      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
        nativeProps[key] = props[key];
      }
    }

    return nativeProps;
  }
};

module.exports = ReactDOMButton;
},{}],40:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventConstants = require('./EventConstants');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMButton = require('./ReactDOMButton');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactMount = require('./ReactMount');
var ReactMultiChild = require('./ReactMultiChild');
var ReactPerf = require('./ReactPerf');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var keyOf = require('fbjs/lib/keyOf');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var shallowEqual = require('fbjs/lib/shallowEqual');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var CHILDREN = keyOf({ children: null });
var STYLE = keyOf({ style: null });
var HTML = keyOf({ __html: null });

var ELEMENT_NODE_TYPE = 1;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

var legacyPropsDescriptor;
if (process.env.NODE_ENV !== 'production') {
  legacyPropsDescriptor = {
    props: {
      enumerable: false,
      get: function () {
        var component = this._reactInternalComponent;
        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
        return component._currentElement.props;
      }
    }
  };
}

function legacyGetDOMNode() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return this;
}

function legacyIsMounted() {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return !!component;
}

function legacySetStateEtc() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
}

function legacySetProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function legacyReplaceProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined becauses undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (process.env.NODE_ENV !== 'production') {
    if (voidElementTags[component._tag]) {
      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
    }
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
}

function enqueuePutListener(id, registrationName, listener, transaction) {
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
    listenTo(registrationName, doc);
  }
  transaction.getReactMountReady().enqueue(putListener, {
    id: id,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
  var node = ReactMount.getNode(inst._rootNodeID);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

  switch (inst._tag) {
    case 'iframe':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
        }
      }

      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
      break;
  }
}

function mountReadyInputWrapper() {
  ReactDOMInput.mountReadyWrapper(this);
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

// NOTE: menuitem's close tag should be omitted, but that causes problems.
var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = ({}).hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
    validatedTagCache[tag] = true;
  }
}

function processChildContextDev(context, inst) {
  // Pass down our tag name to child components for validation purposes
  context = assign({}, context);
  var info = context[validateDOMNesting.ancestorInfoContextKey];
  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
  return context;
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag.toLowerCase();
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._nodeWithLegacyProperties = null;
  if (process.env.NODE_ENV !== 'production') {
    this._unprocessedContextDev = null;
    this._processedContextDev = null;
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function (element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (rootID, transaction, context) {
    this._rootNodeID = rootID;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'button':
        props = ReactDOMButton.getNativeProps(this, props, context);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, context);
        props = ReactDOMInput.getNativeProps(this, props, context);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, context);
        props = ReactDOMOption.getNativeProps(this, props, context);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, context);
        props = ReactDOMSelect.getNativeProps(this, props, context);
        context = ReactDOMSelect.processChildContext(this, props, context);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, context);
        props = ReactDOMTextarea.getNativeProps(this, props, context);
        break;
    }

    assertValidProps(this, props);
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      this._unprocessedContextDev = context;
      this._processedContextDev = processChildContextDev(context, this);
      context = this._processedContextDev;
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement(this._currentElement.type);
      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
      // Populate node cache
      ReactMount.getID(el);
      this._updateDOMProperties({}, props, transaction, el);
      this._createInitialChildren(transaction, props, context, el);
      mountImage = el;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
      // falls through
      case 'button':
      case 'select':
      case 'textarea':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (propKey !== CHILDREN) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, el) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        setInnerHTML(el, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        setTextContent(el, contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          el.appendChild(mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'button':
        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
        break;
      case 'input':
        ReactDOMInput.updateWrapper(this);
        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
        break;
    }

    if (process.env.NODE_ENV !== 'production') {
      // If the context is reference-equal to the old one, pass down the same
      // processed object so the update bailout in ReactReconciler behaves
      // correctly (and identically in dev and prod). See #5005.
      if (this._unprocessedContextDev !== context) {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
      }
      context = this._processedContextDev;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction, null);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    if (!canDefineProperty && this._nodeWithLegacyProperties) {
      this._nodeWithLegacyProperties.props = nextProps;
    }

    if (this._tag === 'select') {
      // <select> value update needs to occur after <option> children
      // reconciliation
      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        DOMPropertyOperations.deleteValueForProperty(node, propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        if (propKey === CHILDREN) {
          nextProp = null;
        }
        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertantly setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      if (!node) {
        node = ReactMount.getNode(this._rootNodeID);
      }
      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function () {
    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
        ReactDOMInput.unmountWrapper(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
        break;
    }

    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
    this._wrapperState = null;
    if (this._nodeWithLegacyProperties) {
      var node = this._nodeWithLegacyProperties;
      node._reactInternalComponent = null;
      this._nodeWithLegacyProperties = null;
    }
  },

  getPublicInstance: function () {
    if (!this._nodeWithLegacyProperties) {
      var node = ReactMount.getNode(this._rootNodeID);

      node._reactInternalComponent = this;
      node.getDOMNode = legacyGetDOMNode;
      node.isMounted = legacyIsMounted;
      node.setState = legacySetStateEtc;
      node.replaceState = legacySetStateEtc;
      node.forceUpdate = legacySetStateEtc;
      node.setProps = legacySetProps;
      node.replaceProps = legacyReplaceProps;

      if (process.env.NODE_ENV !== 'production') {
        if (canDefineProperty) {
          Object.defineProperties(node, legacyPropsDescriptor);
        } else {
          // updateComponent will update this property on subsequent renders
          node.props = this._currentElement.props;
        }
      } else {
        // updateComponent will update this property on subsequent renders
        node.props = this._currentElement.props;
      }

      this._nodeWithLegacyProperties = node;
    }
    return this._nodeWithLegacyProperties;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))

},{"./AutoFocusUtils":4,"./CSSPropertyOperations":7,"./DOMProperty":12,"./DOMPropertyOperations":13,"./EventConstants":17,"./Object.assign":25,"./ReactBrowserEventEmitter":29,"./ReactComponentBrowserEnvironment":34,"./ReactDOMButton":39,"./ReactDOMInput":44,"./ReactDOMOption":45,"./ReactDOMSelect":46,"./ReactDOMTextarea":50,"./ReactMount":68,"./ReactMultiChild":69,"./ReactPerf":74,"./ReactUpdateQueue":85,"./canDefineProperty":107,"./escapeTextContentForBrowser":110,"./isEventSupported":122,"./setInnerHTML":127,"./setTextContent":128,"./validateDOMNesting":131,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/keyOf":151,"fbjs/lib/shallowEqual":156,"fbjs/lib/warning":158}],41:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFactories
 * @typechecks static-only
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');

var mapObject = require('fbjs/lib/mapObject');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if (process.env.NODE_ENV !== 'production') {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hgroup: 'hgroup',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  image: 'image',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOMFactories;
}).call(this,require('_process'))

},{"./ReactElement":55,"./ReactElementValidator":56,"_process":2,"fbjs/lib/mapObject":152}],42:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: false
};

module.exports = ReactDOMFeatureFlags;
},{}],43:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var invariant = require('fbjs/lib/invariant');

/**
 * Errors for properties that should not be updated with `updatePropertyByID()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function (id, name, value) {
    var node = ReactMount.getNode(id);
    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":11,"./DOMPropertyOperations":13,"./ReactMount":68,"./ReactPerf":74,"_process":2,"fbjs/lib/invariant":147}],44:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getNativeProps: function (inst, props, context) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var nativeProps = assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null,
      onChange: _handleChange.bind(inst)
    };
  },

  mountReadyWrapper: function (inst) {
    // Can't be in mountWrapper or else server rendering leaks.
    instancesByReactID[inst._rootNodeID] = inst;
  },

  unmountWrapper: function (inst) {
    delete instancesByReactID[inst._rootNodeID];
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
    }

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactMount.getNode(this._rootNodeID);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React with non-React.
      var otherID = ReactMount.getID(otherNode);
      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
      var otherInstance = instancesByReactID[otherID];
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))

},{"./LinkedValueUtils":24,"./Object.assign":25,"./ReactDOMIDOperations":43,"./ReactMount":68,"./ReactUpdates":86,"_process":2,"fbjs/lib/invariant":147}],45:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactDOMSelect = require('./ReactDOMSelect');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = ReactDOMSelect.valueContextKey;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, context) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
    }

    // Look up whether this option is 'selected' via context
    var selectValue = context[valueContextKey];

    // If context key is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === '' + props.value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === '' + props.value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  getNativeProps: function (inst, props, context) {
    var nativeProps = assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      nativeProps.selected = inst._wrapperState.selected;
    }

    var content = '';

    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    ReactChildren.forEach(props.children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
      }
    });

    nativeProps.children = content;
    return nativeProps;
  }

};

module.exports = ReactDOMOption;
}).call(this,require('_process'))

},{"./Object.assign":25,"./ReactChildren":31,"./ReactDOMSelect":46,"_process":2,"fbjs/lib/warning":158}],46:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    if (props.multiple) {
      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    } else {
      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactMount.getNode(inst._rootNodeID).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  valueContextKey: valueContextKey,

  getNativeProps: function (inst, props, context) {
    return assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };
  },

  processChildContext: function (inst, props, context) {
    // Pass down initial value so initial generated markup has correct
    // `selected` attributes
    var childContext = assign({}, context);
    childContext[valueContextKey] = inst._wrapperState.initialValue;
    return childContext;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // the context value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  this._wrapperState.pendingUpdate = true;
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))

},{"./LinkedValueUtils":24,"./Object.assign":25,"./ReactMount":68,"./ReactUpdates":86,"_process":2,"fbjs/lib/warning":158}],47:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":119,"./getTextContentAccessor":120,"fbjs/lib/ExecutionEnvironment":133}],48:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMServer
 */

'use strict';

var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactServerRendering = require('./ReactServerRendering');
var ReactVersion = require('./ReactVersion');

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;
},{"./ReactDefaultInjection":52,"./ReactServerRendering":83,"./ReactVersion":87}],49:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactMount = require('./ReactMount');

var assign = require('./Object.assign');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setTextContent = require('./setTextContent');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    this._rootNodeID = rootID;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement('span');
      DOMPropertyOperations.setAttributeForID(el, rootID);
      // Populate node cache
      ReactMount.getID(el);
      setTextContent(el, this._stringText);
      return el;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this in a `span` for the reasons stated above, but
        // since this is a situation where React won't take over (static pages),
        // we can simply return the text as it is.
        return escapedText;
      }

      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var node = ReactMount.getNode(this._rootNodeID);
        DOMChildrenOperations.updateTextContent(node, nextStringText);
      }
    }
  },

  unmountComponent: function () {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":11,"./DOMPropertyOperations":13,"./Object.assign":25,"./ReactComponentBrowserEnvironment":34,"./ReactMount":68,"./escapeTextContentForBrowser":110,"./setTextContent":128,"./validateDOMNesting":131,"_process":2}],50:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getNativeProps: function (inst, props, context) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    var nativeProps = assign({}, props, {
      defaultValue: undefined,
      value: undefined,
      children: inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
      }
      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(props);

    inst._wrapperState = {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))

},{"./LinkedValueUtils":24,"./Object.assign":25,"./ReactDOMIDOperations":43,"./ReactUpdates":86,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],51:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d, e);
    } else {
      transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./Object.assign":25,"./ReactUpdates":86,"./Transaction":103,"fbjs/lib/emptyFunction":139}],52:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var ClientReactRootIndex = require('./ClientReactRootIndex');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SelectEventPlugin = require('./SelectEventPlugin');
var ServerReactRootIndex = require('./ServerReactRootIndex');
var SimpleEventPlugin = require('./SimpleEventPlugin');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if (process.env.NODE_ENV !== 'production') {
    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
    if (/[?&]react_perf\b/.test(url)) {
      var ReactDefaultPerf = require('./ReactDefaultPerf');
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};
}).call(this,require('_process'))

},{"./BeforeInputEventPlugin":5,"./ChangeEventPlugin":9,"./ClientReactRootIndex":10,"./DefaultEventPluginOrder":15,"./EnterLeaveEventPlugin":16,"./HTMLDOMPropertyConfig":23,"./ReactBrowserComponentMixin":28,"./ReactComponentBrowserEnvironment":34,"./ReactDOMComponent":40,"./ReactDOMTextComponent":49,"./ReactDefaultBatchingStrategy":51,"./ReactDefaultPerf":53,"./ReactEventListener":61,"./ReactInjection":62,"./ReactInstanceHandles":64,"./ReactMount":68,"./ReactReconcileTransaction":78,"./SVGDOMPropertyConfig":88,"./SelectEventPlugin":89,"./ServerReactRootIndex":90,"./SimpleEventPlugin":91,"_process":2,"fbjs/lib/ExecutionEnvironment":133}],53:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var performanceNow = require('fbjs/lib/performanceNow');

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function () {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function () {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function () {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  getMeasurementsSummaryMap: function (measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
    return summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  printDOM: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function (item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result.type = item.type;
      result.args = JSON.stringify(item.args);
      return result;
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  _recordWrite: function (id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function (moduleName, fnName, func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0,
          created: {}
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function (update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
          });
        } else {
          // basic format
          var id = args[0];
          if (typeof id === 'object') {
            id = ReactMount.getID(args[0]);
          }
          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
      fnName === '_renderValidatedComponent')) {

        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          entry.created[rootNodeID] = true;
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;
},{"./DOMProperty":12,"./ReactDefaultPerfAnalysis":54,"./ReactMount":68,"./ReactPerf":74,"fbjs/lib/performanceNow":155}],54:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

'use strict';

var assign = require('./Object.assign');

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  SET_MARKUP: 'set innerHTML',
  TEXT_CONTENT: 'set textContent',
  'setValueForProperty': 'update attribute',
  'setValueForAttribute': 'update attribute',
  'deleteValueForProperty': 'remove attribute',
  'setValueForStyles': 'update styles',
  'replaceNodeWithMarkup': 'replace',
  'updateTextContent': 'set textContent'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  measurements.forEach(function (measurement) {
    Object.keys(measurement.writes).forEach(function (id) {
      measurement.writes[id].forEach(function (write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    });
  });
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function (a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function (a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    // check if component newly created
    if (measurement.created[id]) {
      isDirty = true;
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;
},{"./Object.assign":25}],55:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    Object.freeze(element.props);
    Object.freeze(element);
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

  if (process.env.NODE_ENV !== 'production') {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))

},{"./Object.assign":25,"./ReactCurrentOwner":37,"./canDefineProperty":107,"_process":2}],56:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactCurrentOwner = require('./ReactCurrentOwner');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
  if (addenda === null) {
    // we already showed the warning
    return;
  }
  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} messageType A key used for de-duping warnings.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 * @returns {?object} A set of addenda to use in the warning message, or null
 * if the warning has already been shown before (and shouldn't be shown again).
 */
function getAddendaForKeyUse(messageType, element, parentType) {
  var addendum = getDeclarationErrorAddendum();
  if (!addendum) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      addendum = ' Check the top-level render call using <' + parentName + '>.';
    }
  }

  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
  if (memoizer[addendum]) {
    return null;
  }
  memoizer[addendum] = true;

  var addenda = {
    parentOrOwner: addendum,
    url: ' See https://fb.me/react-warning-keys for more information.',
    childOwner: null
  };

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  return addenda;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":37,"./ReactElement":55,"./ReactPropTypeLocationNames":75,"./ReactPropTypeLocations":76,"./canDefineProperty":107,"./getIteratorFn":118,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],57:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactReconciler = require('./ReactReconciler');

var assign = require('./Object.assign');

var placeholderElement;

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function (component) {
    placeholderElement = ReactElement.createElement(component);
  }
};

var ReactEmptyComponent = function (instantiate) {
  this._currentElement = null;
  this._rootNodeID = null;
  this._renderedComponent = instantiate(placeholderElement);
};
assign(ReactEmptyComponent.prototype, {
  construct: function (element) {},
  mountComponent: function (rootID, transaction, context) {
    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
    this._rootNodeID = rootID;
    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
  },
  receiveComponent: function () {},
  unmountComponent: function (rootID, transaction, context) {
    ReactReconciler.unmountComponent(this._renderedComponent);
    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
    this._rootNodeID = null;
    this._renderedComponent = null;
  }
});

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{"./Object.assign":25,"./ReactElement":55,"./ReactEmptyComponentRegistry":58,"./ReactReconciler":79}],58:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponentRegistry
 */

'use strict';

// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

var ReactEmptyComponentRegistry = {
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID,
  deregisterNullComponentID: deregisterNullComponentID
};

module.exports = ReactEmptyComponentRegistry;
},{}],59:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a, b) {
  try {
    return func(a, b);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
    return undefined;
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
      var boundFunc = func.bind(null, a, b);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))

},{"_process":2}],60:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":18}],61:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  // TODO: Re-enable event.path handling
  //
  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
  //   // New browsers have a path attribute on native events
  //   handleTopLevelWithPath(bookKeeping);
  // } else {
  //   // Legacy browsers don't have a path attribute on native events
  //   handleTopLevelWithoutPath(bookKeeping);
  // }

  void handleTopLevelWithPath; // temporarily unused
  handleTopLevelWithoutPath(bookKeeping);
}

// Legacy browsers don't have a path attribute on native events
function handleTopLevelWithoutPath(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// New browsers have a path attribute on native events
function handleTopLevelWithPath(bookKeeping) {
  var path = bookKeeping.nativeEvent.path;
  var currentNativeTarget = path[0];
  var eventsFired = 0;
  for (var i = 0; i < path.length; i++) {
    var currentPathElement = path[i];
    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
      currentNativeTarget = path[i + 1];
    }
    // TODO: slow
    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
    if (reactParent === currentPathElement) {
      var currentPathElementID = ReactMount.getID(currentPathElement);
      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
      bookKeeping.ancestors.push(currentPathElement);

      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
      eventsFired++;
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

      // Jump to the root of this React render tree
      while (currentPathElementID !== newRootID) {
        i++;
        currentPathElement = path[i];
        currentPathElementID = ReactMount.getID(currentPathElement);
      }
    }
  }
  if (eventsFired === 0) {
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./Object.assign":25,"./PooledClass":26,"./ReactInstanceHandles":64,"./ReactMount":68,"./ReactUpdates":86,"./getEventTarget":117,"fbjs/lib/EventListener":132,"fbjs/lib/ExecutionEnvironment":133,"fbjs/lib/getUnboundedScrollPosition":144}],62:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactClass = require('./ReactClass');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactNativeComponent = require('./ReactNativeComponent');
var ReactPerf = require('./ReactPerf');
var ReactRootIndex = require('./ReactRootIndex');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":12,"./EventPluginHub":18,"./ReactBrowserEventEmitter":29,"./ReactClass":32,"./ReactComponentEnvironment":35,"./ReactEmptyComponent":57,"./ReactNativeComponent":71,"./ReactPerf":74,"./ReactRootIndex":81,"./ReactUpdates":86}],63:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":47,"fbjs/lib/containsNode":136,"fbjs/lib/focusNode":141,"fbjs/lib/getActiveElement":142}],64:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require('./ReactRootIndex');

var invariant = require('fbjs/lib/invariant');

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 10000;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {*} arg Argument to invoke the callback with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
  var traverseUp = isAncestorIDOf(stop, start);
  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start;; /* until break */id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function () {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function (rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function (id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Same as `traverseTwoPhase` but skips the `targetID`.
   */
  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, true);
      traverseParentPath(targetID, '', cb, arg, true, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function (targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;
}).call(this,require('_process'))

},{"./ReactRootIndex":81,"_process":2,"fbjs/lib/invariant":147}],65:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],66:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactIsomorphic
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactComponent = require('./ReactComponent');
var ReactClass = require('./ReactClass');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var assign = require('./Object.assign');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

module.exports = React;
}).call(this,require('_process'))

},{"./Object.assign":25,"./ReactChildren":31,"./ReactClass":32,"./ReactComponent":33,"./ReactDOMFactories":41,"./ReactElement":55,"./ReactElementValidator":56,"./ReactPropTypes":77,"./ReactVersion":87,"./onlyChild":124,"_process":2}],67:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags and self-closing tags)
    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":106}],68:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var containsNode = require('fbjs/lib/containsNode');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if (process.env.NODE_ENV !== 'production') {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
  if (ReactDOMFeatureFlags.useCreateElement) {
    context = assign({}, context);
    if (container.nodeType === DOC_NODE_TYPE) {
      context[ownerDocumentContextKey] = container;
    } else {
      context[ownerDocumentContextKey] = container.ownerDocument;
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (context === emptyObject) {
      context = {};
    }
    var tag = container.nodeName.toLowerCase();
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
  }
  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* forceHTML */shouldReuseMarkup);
  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container) {
  ReactReconciler.unmountComponent(instance);

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(node) {
  var reactRootID = getReactRootID(node);
  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
}

/**
 * Returns the first (deepest) ancestor of a node which is rendered by this copy
 * of React.
 */
function findFirstReactDOMImpl(node) {
  // This node might be from another React instance, so we make sure not to
  // examine the node cache here
  for (; node && node.parentNode !== node; node = node.parentNode) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      continue;
    }
    var nodeID = internalGetID(node);
    if (!nodeID) {
      continue;
    }
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

    // If containersByReactRootID contains the container we find by crawling up
    // the tree, we know that this instance of React rendered the node.
    // nb. isValid's strategy (with containsNode) does not work because render
    // trees may be nested and we don't want a false positive in that case.
    var current = node;
    var lastID;
    do {
      lastID = internalGetID(current);
      current = current.parentNode;
      if (current == null) {
        // The passed-in node has been detached from the container it was
        // originally rendered into.
        return null;
      }
    } while (lastID !== reactRootID);

    if (current === containersByReactRootID[reactRootID]) {
      return node;
    }
  }
  return null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var TopLevelWrapper = function () {};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  // this.props is actually a ReactElement
  return this.props;
};

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function (nextComponent, container) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(componentInstance, container);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function (container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var containerID = internalGetID(container);
      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
      }

      return false;
    }
    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if (process.env.NODE_ENV !== 'production') {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function (id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if (process.env.NODE_ENV !== 'production') {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        process.env.NODE_ENV !== 'production' ? warning(
        // Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
        var containerChild = container.firstChild;
        if (containerChild && reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function (id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component rendered by this copy of React.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function (node) {
    return findFirstReactDOMImpl(node);
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function (ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    if (process.env.NODE_ENV !== 'production') {
      // This will throw on the next line; give an early warning
      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
    }

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }
        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
  },

  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      container.appendChild(markup);
    } else {
      setInnerHTML(container, markup);
    }
  },

  ownerDocumentContextKey: ownerDocumentContextKey,

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  isValid: isValid,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;
}).call(this,require('_process'))

},{"./DOMProperty":12,"./Object.assign":25,"./ReactBrowserEventEmitter":29,"./ReactCurrentOwner":37,"./ReactDOMFeatureFlags":42,"./ReactElement":55,"./ReactEmptyComponentRegistry":58,"./ReactInstanceHandles":64,"./ReactInstanceMap":65,"./ReactMarkupChecksum":67,"./ReactPerf":74,"./ReactReconciler":79,"./ReactUpdateQueue":85,"./ReactUpdates":86,"./instantiateReactComponent":121,"./setInnerHTML":127,"./shouldUpdateReactComponent":129,"./validateDOMNesting":131,"_process":2,"fbjs/lib/containsNode":136,"fbjs/lib/emptyObject":140,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],69:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var flattenChildren = require('./flattenChildren');

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueInsertMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    content: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the markup of a node.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function enqueueSetMarkup(parentID, markup) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.SET_MARKUP,
    markupIndex: null,
    content: markup,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    content: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
      var nextChildren;
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements);
          } finally {
            ReactCurrentOwner.current = null;
          }
          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements);
      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChild(prevChildren[name]);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        this.setMarkup(nextMarkup);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChild(prevChild);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChild(prevChildren[name]);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function () {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, mountImage) {
      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function (textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Sets this markup string.
     *
     * @param {string} markup Markup to set.
     * @protected
     */
    setMarkup: function (markup) {
      enqueueSetMarkup(this._rootNodeID, markup);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;
}).call(this,require('_process'))

},{"./ReactChildReconciler":30,"./ReactComponentEnvironment":35,"./ReactCurrentOwner":37,"./ReactMultiChildUpdateTypes":70,"./ReactReconciler":79,"./flattenChildren":112,"_process":2}],70:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  SET_MARKUP: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":150}],71:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function (componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;
}).call(this,require('_process'))

},{"./Object.assign":25,"_process":2,"fbjs/lib/invariant":147}],72:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnTDZ(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnTDZ(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnTDZ(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnTDZ(publicInstance, 'setState');
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    warnTDZ(publicInstance, 'setProps');
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    warnTDZ(publicInstance, 'replaceProps');
  }

};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))

},{"_process":2,"fbjs/lib/warning":158}],73:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function (object) {
    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}).call(this,require('_process'))

},{"_process":2,"fbjs/lib/invariant":147}],74:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function (object, objectName, methodNames) {
    if (process.env.NODE_ENV !== 'production') {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function (objName, fnName, func) {
    if (process.env.NODE_ENV !== 'production') {
      var measuredFunc = null;
      var wrapper = function () {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function (measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;
}).call(this,require('_process'))

},{"_process":2}],75:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))

},{"_process":2}],76:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":150}],77:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getIteratorFn = require('./getIteratorFn');

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return '<<anonymous>>';
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
},{"./ReactElement":55,"./ReactPropTypeLocationNames":75,"./getIteratorFn":118,"fbjs/lib/emptyFunction":139}],78:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactInputSelection = require('./ReactInputSelection');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(forceHTML) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"./CallbackQueue":8,"./Object.assign":25,"./PooledClass":26,"./ReactBrowserEventEmitter":29,"./ReactDOMFeatureFlags":42,"./ReactInputSelection":63,"./Transaction":103}],79:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require('./ReactRef');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;
},{"./ReactRef":80}],80:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;

  return(
    // This has a few false positives w/r/t empty components.
    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":73}],81:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function (_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;
},{}],82:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerBatchingStrategy
 * @typechecks
 */

'use strict';

var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;
},{}],83:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
}).call(this,require('_process'))

},{"./ReactDefaultBatchingStrategy":51,"./ReactElement":55,"./ReactInstanceHandles":64,"./ReactMarkupChecksum":67,"./ReactServerBatchingStrategy":82,"./ReactServerRenderingTransaction":84,"./ReactUpdates":86,"./instantiateReactComponent":121,"_process":2,"fbjs/lib/emptyObject":140,"fbjs/lib/invariant":147}],84:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require('./PooledClass');
var CallbackQueue = require('./CallbackQueue');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = false;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"./CallbackQueue":8,"./Object.assign":25,"./PooledClass":26,"./Transaction":103,"fbjs/lib/emptyFunction":139}],85:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
  },

  enqueueSetPropsInternal: function (internalInstance, partialProps) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    var props = assign({}, element.props, partialProps);
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
  },

  enqueueReplacePropsInternal: function (internalInstance, props) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  enqueueElementInternal: function (internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))

},{"./Object.assign":25,"./ReactCurrentOwner":37,"./ReactElement":55,"./ReactInstanceMap":65,"./ReactUpdates":86,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],86:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
}

assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))

},{"./CallbackQueue":8,"./Object.assign":25,"./PooledClass":26,"./ReactPerf":74,"./ReactReconciler":79,"./Transaction":103,"_process":2,"fbjs/lib/invariant":147}],87:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

'use strict';

module.exports = '0.14.6';
},{}],88:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    xlinkActuate: MUST_USE_ATTRIBUTE,
    xlinkArcrole: MUST_USE_ATTRIBUTE,
    xlinkHref: MUST_USE_ATTRIBUTE,
    xlinkRole: MUST_USE_ATTRIBUTE,
    xlinkShow: MUST_USE_ATTRIBUTE,
    xlinkTitle: MUST_USE_ATTRIBUTE,
    xlinkType: MUST_USE_ATTRIBUTE,
    xmlBase: MUST_USE_ATTRIBUTE,
    xmlLang: MUST_USE_ATTRIBUTE,
    xmlSpace: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space'
  }
};

module.exports = SVGDOMPropertyConfig;
},{"./DOMProperty":12}],89:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSelect: null }),
      captured: keyOf({ onSelectCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case topLevelTypes.topSelectionChange:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (id, registrationName, listener) {
    if (registrationName === ON_SELECT_KEY) {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventConstants":17,"./EventPropagators":21,"./ReactInputSelection":63,"./SyntheticEvent":95,"./isTextInputElement":123,"fbjs/lib/ExecutionEnvironment":133,"fbjs/lib/getActiveElement":142,"fbjs/lib/keyOf":151,"fbjs/lib/shallowEqual":156}],90:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function () {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;
},{}],91:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactMount = require('./ReactMount');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  abort: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onAbort: true }),
      captured: keyOf({ onAbortCapture: true })
    }
  },
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBlur: true }),
      captured: keyOf({ onBlurCapture: true })
    }
  },
  canPlay: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlay: true }),
      captured: keyOf({ onCanPlayCapture: true })
    }
  },
  canPlayThrough: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlayThrough: true }),
      captured: keyOf({ onCanPlayThroughCapture: true })
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onClick: true }),
      captured: keyOf({ onClickCapture: true })
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onContextMenu: true }),
      captured: keyOf({ onContextMenuCapture: true })
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCopy: true }),
      captured: keyOf({ onCopyCapture: true })
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCut: true }),
      captured: keyOf({ onCutCapture: true })
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDoubleClick: true }),
      captured: keyOf({ onDoubleClickCapture: true })
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrag: true }),
      captured: keyOf({ onDragCapture: true })
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnd: true }),
      captured: keyOf({ onDragEndCapture: true })
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnter: true }),
      captured: keyOf({ onDragEnterCapture: true })
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragExit: true }),
      captured: keyOf({ onDragExitCapture: true })
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragLeave: true }),
      captured: keyOf({ onDragLeaveCapture: true })
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragOver: true }),
      captured: keyOf({ onDragOverCapture: true })
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragStart: true }),
      captured: keyOf({ onDragStartCapture: true })
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrop: true }),
      captured: keyOf({ onDropCapture: true })
    }
  },
  durationChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDurationChange: true }),
      captured: keyOf({ onDurationChangeCapture: true })
    }
  },
  emptied: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEmptied: true }),
      captured: keyOf({ onEmptiedCapture: true })
    }
  },
  encrypted: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEncrypted: true }),
      captured: keyOf({ onEncryptedCapture: true })
    }
  },
  ended: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEnded: true }),
      captured: keyOf({ onEndedCapture: true })
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onError: true }),
      captured: keyOf({ onErrorCapture: true })
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onFocus: true }),
      captured: keyOf({ onFocusCapture: true })
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onInput: true }),
      captured: keyOf({ onInputCapture: true })
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyDown: true }),
      captured: keyOf({ onKeyDownCapture: true })
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyPress: true }),
      captured: keyOf({ onKeyPressCapture: true })
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyUp: true }),
      captured: keyOf({ onKeyUpCapture: true })
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoad: true }),
      captured: keyOf({ onLoadCapture: true })
    }
  },
  loadedData: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedData: true }),
      captured: keyOf({ onLoadedDataCapture: true })
    }
  },
  loadedMetadata: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedMetadata: true }),
      captured: keyOf({ onLoadedMetadataCapture: true })
    }
  },
  loadStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadStart: true }),
      captured: keyOf({ onLoadStartCapture: true })
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseDown: true }),
      captured: keyOf({ onMouseDownCapture: true })
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseMove: true }),
      captured: keyOf({ onMouseMoveCapture: true })
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOut: true }),
      captured: keyOf({ onMouseOutCapture: true })
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOver: true }),
      captured: keyOf({ onMouseOverCapture: true })
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseUp: true }),
      captured: keyOf({ onMouseUpCapture: true })
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPaste: true }),
      captured: keyOf({ onPasteCapture: true })
    }
  },
  pause: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPause: true }),
      captured: keyOf({ onPauseCapture: true })
    }
  },
  play: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlay: true }),
      captured: keyOf({ onPlayCapture: true })
    }
  },
  playing: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlaying: true }),
      captured: keyOf({ onPlayingCapture: true })
    }
  },
  progress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onProgress: true }),
      captured: keyOf({ onProgressCapture: true })
    }
  },
  rateChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onRateChange: true }),
      captured: keyOf({ onRateChangeCapture: true })
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onReset: true }),
      captured: keyOf({ onResetCapture: true })
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onScroll: true }),
      captured: keyOf({ onScrollCapture: true })
    }
  },
  seeked: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeked: true }),
      captured: keyOf({ onSeekedCapture: true })
    }
  },
  seeking: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeking: true }),
      captured: keyOf({ onSeekingCapture: true })
    }
  },
  stalled: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onStalled: true }),
      captured: keyOf({ onStalledCapture: true })
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSubmit: true }),
      captured: keyOf({ onSubmitCapture: true })
    }
  },
  suspend: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSuspend: true }),
      captured: keyOf({ onSuspendCapture: true })
    }
  },
  timeUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTimeUpdate: true }),
      captured: keyOf({ onTimeUpdateCapture: true })
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchCancel: true }),
      captured: keyOf({ onTouchCancelCapture: true })
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchEnd: true }),
      captured: keyOf({ onTouchEndCapture: true })
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchMove: true }),
      captured: keyOf({ onTouchMoveCapture: true })
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchStart: true }),
      captured: keyOf({ onTouchStartCapture: true })
    }
  },
  volumeChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onVolumeChange: true }),
      captured: keyOf({ onVolumeChangeCapture: true })
    }
  },
  waiting: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWaiting: true }),
      captured: keyOf({ onWaitingCapture: true })
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWheel: true }),
      captured: keyOf({ onWheelCapture: true })
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topAbort: eventTypes.abort,
  topBlur: eventTypes.blur,
  topCanPlay: eventTypes.canPlay,
  topCanPlayThrough: eventTypes.canPlayThrough,
  topClick: eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy: eventTypes.copy,
  topCut: eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag: eventTypes.drag,
  topDragEnd: eventTypes.dragEnd,
  topDragEnter: eventTypes.dragEnter,
  topDragExit: eventTypes.dragExit,
  topDragLeave: eventTypes.dragLeave,
  topDragOver: eventTypes.dragOver,
  topDragStart: eventTypes.dragStart,
  topDrop: eventTypes.drop,
  topDurationChange: eventTypes.durationChange,
  topEmptied: eventTypes.emptied,
  topEncrypted: eventTypes.encrypted,
  topEnded: eventTypes.ended,
  topError: eventTypes.error,
  topFocus: eventTypes.focus,
  topInput: eventTypes.input,
  topKeyDown: eventTypes.keyDown,
  topKeyPress: eventTypes.keyPress,
  topKeyUp: eventTypes.keyUp,
  topLoad: eventTypes.load,
  topLoadedData: eventTypes.loadedData,
  topLoadedMetadata: eventTypes.loadedMetadata,
  topLoadStart: eventTypes.loadStart,
  topMouseDown: eventTypes.mouseDown,
  topMouseMove: eventTypes.mouseMove,
  topMouseOut: eventTypes.mouseOut,
  topMouseOver: eventTypes.mouseOver,
  topMouseUp: eventTypes.mouseUp,
  topPaste: eventTypes.paste,
  topPause: eventTypes.pause,
  topPlay: eventTypes.play,
  topPlaying: eventTypes.playing,
  topProgress: eventTypes.progress,
  topRateChange: eventTypes.rateChange,
  topReset: eventTypes.reset,
  topScroll: eventTypes.scroll,
  topSeeked: eventTypes.seeked,
  topSeeking: eventTypes.seeking,
  topStalled: eventTypes.stalled,
  topSubmit: eventTypes.submit,
  topSuspend: eventTypes.suspend,
  topTimeUpdate: eventTypes.timeUpdate,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd: eventTypes.touchEnd,
  topTouchMove: eventTypes.touchMove,
  topTouchStart: eventTypes.touchStart,
  topVolumeChange: eventTypes.volumeChange,
  topWaiting: eventTypes.waiting,
  topWheel: eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topAbort:
      case topLevelTypes.topCanPlay:
      case topLevelTypes.topCanPlayThrough:
      case topLevelTypes.topDurationChange:
      case topLevelTypes.topEmptied:
      case topLevelTypes.topEncrypted:
      case topLevelTypes.topEnded:
      case topLevelTypes.topError:
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topLoadedData:
      case topLevelTypes.topLoadedMetadata:
      case topLevelTypes.topLoadStart:
      case topLevelTypes.topPause:
      case topLevelTypes.topPlay:
      case topLevelTypes.topPlaying:
      case topLevelTypes.topProgress:
      case topLevelTypes.topRateChange:
      case topLevelTypes.topReset:
      case topLevelTypes.topSeeked:
      case topLevelTypes.topSeeking:
      case topLevelTypes.topStalled:
      case topLevelTypes.topSubmit:
      case topLevelTypes.topSuspend:
      case topLevelTypes.topTimeUpdate:
      case topLevelTypes.topVolumeChange:
      case topLevelTypes.topWaiting:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (id, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    if (registrationName === ON_CLICK_KEY) {
      var node = ReactMount.getNode(id);
      if (!onClickListeners[id]) {
        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (id, registrationName) {
    if (registrationName === ON_CLICK_KEY) {
      onClickListeners[id].remove();
      delete onClickListeners[id];
    }
  }

};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))

},{"./EventConstants":17,"./EventPropagators":21,"./ReactMount":68,"./SyntheticClipboardEvent":92,"./SyntheticDragEvent":94,"./SyntheticEvent":95,"./SyntheticFocusEvent":96,"./SyntheticKeyboardEvent":98,"./SyntheticMouseEvent":99,"./SyntheticTouchEvent":100,"./SyntheticUIEvent":101,"./SyntheticWheelEvent":102,"./getEventCharCode":114,"_process":2,"fbjs/lib/EventListener":132,"fbjs/lib/emptyFunction":139,"fbjs/lib/invariant":147,"fbjs/lib/keyOf":151}],92:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":95}],93:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":95}],94:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":99}],95:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;
  this.target = nativeEventTarget;
  this.currentTarget = nativeEventTarget;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;
}).call(this,require('_process'))

},{"./Object.assign":25,"./PooledClass":26,"_process":2,"fbjs/lib/emptyFunction":139,"fbjs/lib/warning":158}],96:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":101}],97:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":95}],98:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":101,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],99:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":101,"./ViewportMetrics":104,"./getEventModifierState":116}],100:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":101,"./getEventModifierState":116}],101:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":95,"./getEventTarget":117}],102:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":99}],103:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occurred.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;
}).call(this,require('_process'))

},{"_process":2,"fbjs/lib/invariant":147}],104:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],105:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))

},{"_process":2,"fbjs/lib/invariant":147}],106:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    for (; i < Math.min(i + 4096, m); i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],107:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule canDefineProperty
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))

},{"_process":2}],108:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"./CSSProperty":6}],109:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

'use strict';

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} fnName The name of the function
 * @param {string} newModule The module that fn will exist in
 * @param {string} newPackage The module that fn will exist in
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {function} The function that will warn once and then call fn
 */
function deprecated(fnName, newModule, newPackage, ctx, fn) {
  var warned = false;
  if (process.env.NODE_ENV !== 'production') {
    var newFn = function () {
      process.env.NODE_ENV !== 'production' ? warning(warned,
      // Require examples in this string must be split to prevent React's
      // build tools from mistaking them for real requires.
      // Otherwise the build tools will attempt to build a '%s' module.
      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
      warned = true;
      return fn.apply(ctx, arguments);
    };
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;
}).call(this,require('_process'))

},{"./Object.assign":25,"_process":2,"fbjs/lib/warning":158}],110:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;
},{}],111:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMount = require('./ReactMount');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
}

module.exports = findDOMNode;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":37,"./ReactInstanceMap":65,"./ReactMount":68,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],112:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = result[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))

},{"./traverseAllChildren":130,"_process":2,"fbjs/lib/warning":158}],113:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function (arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;
},{}],114:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],115:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":114}],116:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],117:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],118:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],119:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],120:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":133}],121:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactNativeComponent = require('./ReactNativeComponent');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function () {};
assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node) {
  var instance;

  if (node === null || node === false) {
    instance = new ReactEmptyComponent(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactNativeComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
}).call(this,require('_process'))

},{"./Object.assign":25,"./ReactCompositeComponent":36,"./ReactEmptyComponent":57,"./ReactNativeComponent":71,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],122:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":133}],123:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
}

module.exports = isTextInputElement;
},{}],124:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))

},{"./ReactElement":55,"_process":2,"fbjs/lib/invariant":147}],125:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":110}],126:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule renderSubtreeIntoContainer
*/

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":68}],127:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function (node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function (node, html) {
    MSApp.execUnsafeLocalFunction(function () {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;
},{"fbjs/lib/ExecutionEnvironment":133}],128:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":110,"./setInnerHTML":127,"fbjs/lib/ExecutionEnvironment":133}],129:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;
},{}],130:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} text Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":37,"./ReactElement":55,"./ReactInstanceHandles":64,"./getIteratorFn":118,"_process":2,"fbjs/lib/invariant":147,"fbjs/lib/warning":158}],131:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

'use strict';

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    parentTag: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.parentTag = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    /*eslint-disable space-after-keywords */
    do {
      /*eslint-enable space-after-keywords */
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
      }
    }
  };

  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))

},{"./Object.assign":25,"_process":2,"fbjs/lib/emptyFunction":139,"fbjs/lib/warning":158}],132:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function () {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function () {}
};

module.exports = EventListener;
}).call(this,require('_process'))

},{"./emptyFunction":139,"_process":2}],133:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],134:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

"use strict";

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],135:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":134}],136:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

'use strict';

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(_x, _x2) {
  var _again = true;

  _function: while (_again) {
    var outerNode = _x,
        innerNode = _x2;
    _again = false;

    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      _x = outerNode;
      _x2 = innerNode.parentNode;
      _again = true;
      continue _function;
    } else if (outerNode.contains) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
}

module.exports = containsNode;
},{"./isTextNode":149}],137:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

'use strict';

var toArray = require('./toArray');

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return(
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./toArray":157}],138:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":133,"./createArrayFromMixed":137,"./getMarkupWrap":143,"./invariant":147,"_process":2}],139:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],140:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))

},{"_process":2}],141:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],142:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
'use strict';

function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;
},{}],143:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

/*eslint-disable fb-www/unsafe-html */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":133,"./invariant":147,"_process":2}],144:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],145:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

'use strict';

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],146:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":145}],147:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

function invariant(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))

},{"_process":2}],148:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
'use strict';

function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],149:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

'use strict';

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":148}],150:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require('./invariant');

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function (obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}).call(this,require('_process'))

},{"./invariant":147,"_process":2}],151:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
"use strict";

var keyOf = function (oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
},{}],152:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;
},{}],153:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],154:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":133}],155:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

'use strict';

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function () {
    return performance.now();
  };
} else {
  performanceNow = function () {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":154}],156:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],157:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

'use strict';

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;
}).call(this,require('_process'))

},{"./invariant":147,"_process":2}],158:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  warning = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))

},{"./emptyFunction":139,"_process":2}],159:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":27}],160:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],161:[function(require,module,exports){
var Home = require("./home/Home");
var services_1 = require('./services');
var utils = require('./utils/utils');
function onConnected() {
    var parentElement = document.getElementById('deviceready');
    var listeningElement = parentElement.querySelector('.listening');
    var receivedElement = parentElement.querySelector('.received');
    listeningElement.setAttribute('style', 'display:none;');
    receivedElement.setAttribute('style', 'display:block;');
}
function onLoaded() {
    document.getElementById('deviceready').setAttribute('style', 'display:none;');
}
function onError() {
    var parentElement = document.getElementById('deviceready');
    parentElement.querySelector('.listening').setAttribute('style', 'display:none;');
    parentElement.querySelector('.received').setAttribute('style', 'display:none;');
    parentElement.querySelector('.spinner').setAttribute('style', 'display:none;');
    parentElement.querySelector('.error').setAttribute('style', 'display:block;');
    parentElement.setAttribute('style', 'display:flex;');
}
function onDeviceReady() {
    utils.delay(500).then(function () { return services_1.init(); }).then(function () {
        onConnected();
        return utils.delay(200).then(function () {
            onLoaded();
            new Home(document.getElementById('app'));
            return null;
        });
    }).catch(function (e) {
        onError();
        console.error(e);
    });
}
function initialize() {
    document.addEventListener('deviceready', onDeviceReady, false);
}
initialize();
},{"./home/Home":216,"./services":307,"./utils/utils":314}],162:[function(require,module,exports){
var Promise = require("bluebird");
var utils = require('../utils/utils');
var httpClient_1 = require('./httpClient');
var source_1 = require('./source');
var dictionary = require('../utils/dictionary');
function serverIsPrime(login, password) {
    var newurl = source_1.getUrl(source_1.source.isPrime);
    newurl = httpClient_1.addUrlGetParam(newurl, "l", login);
    newurl = httpClient_1.addUrlGetParam(newurl, "p", password);
    return httpClient_1.HttpClientGET(newurl).then(function (data) {
        console.info('<- serverIsPrime = ', data);
        if (!data || !data.user || !data.user.name) {
            throw new Error(dictionary.ERROR_LOGIN_INVALID);
        }
        return data;
    });
}
exports.serverIsPrime = serverIsPrime;
function emailGreeting(o) {
    var newurl = source_1.getUrl(source_1.source.emailGreeting);
    newurl = httpClient_1.addUrlGetParam(newurl, "l", o.email);
    newurl = httpClient_1.addUrlGetParam(newurl, "p", o.password);
    newurl = httpClient_1.addUrlGetParam(newurl, "n", o.name);
    return httpClient_1.HttpClientGET(newurl);
}
exports.emailGreeting = emailGreeting;
function serverUpdateValidTo(email, valid_to) {
    if (!utils.isValidISODate(valid_to)) {
        return Promise.reject(new Error('Date not valid' + valid_to));
    }
    var newurl = source_1.getUrl(source_1.source.updateValidation);
    var data = "l=" + email + "&d=" + valid_to;
    return httpClient_1.HttpClientPOST(newurl, data);
}
exports.serverUpdateValidTo = serverUpdateValidTo;
function serverRegister(email, password, name) {
    var newurl = source_1.getUrl(source_1.source.register);
    var data = "l=" + email + "&p=" + password + "&n=" + name;
    return httpClient_1.HttpClientPOST(newurl, data);
}
exports.serverRegister = serverRegister;
function updateLastLogin(email) {
    var newurl = source_1.getUrl(source_1.source.updateLastLogin);
    var data = "l=" + email + "&d=" + utils.getToDayISOdate();
    return httpClient_1.HttpClientPOST(newurl, data);
}
exports.updateLastLogin = updateLastLogin;
function updateStatus(o) {
    var newurl = source_1.getUrl(source_1.source.updateStatus);
    var data = "l=" + o.email + "&v=" + o.value + "&n=" + o.name;
    return httpClient_1.HttpClientPOST(newurl, data);
}
exports.updateStatus = updateStatus;
function readStatus(o) {
    var newurl = source_1.getUrl(source_1.source.readStatus);
    newurl = httpClient_1.addUrlGetParam(newurl, "l", o.email);
    return httpClient_1.HttpClientGET(newurl);
}
exports.readStatus = readStatus;
},{"../utils/dictionary":310,"../utils/utils":314,"./httpClient":163,"./source":164,"bluebird":1}],163:[function(require,module,exports){
var Promise = require("bluebird");
var types_1 = require('../types');
var timeMs = 20 * 1000;
function addUrlGetParam(url, param, value) {
    var a = document.createElement('a'), regex = /(?:\?|&amp;|&)+([^=]+)(?:=([^&]*))*/gi;
    var match = null, str = [];
    a.href = url;
    while (match = regex.exec(a.search))
        if (encodeURIComponent(param) != match[1])
            str.push(match[1] + (match[2] ? "=" + match[2] : ""));
    str.push(encodeURIComponent(param) + (value ? "=" + encodeURIComponent(value) : ""));
    a.search = str.join("&");
    return a.href;
}
exports.addUrlGetParam = addUrlGetParam;
function getHttpRequest() {
    if (window['XMLHttpRequest']) {
        return new XMLHttpRequest();
    }
    else {
        return new ActiveXObject("Microsoft.XMLHTTP");
    }
}
function HttpClientGET(aUrl) {
    return new Promise(function (resolve, reject) {
        var anHttpRequest = getHttpRequest();
        var time = setTimeout(function () {
            return reject(new types_1.TimeOutError());
        }, timeMs);
        anHttpRequest.onreadystatechange = function () {
            if (anHttpRequest.readyState === 4 && anHttpRequest.status === 200) {
                clearTimeout(time);
                try {
                    var data = JSON.parse(anHttpRequest.responseText);
                    return resolve(data);
                }
                catch (e) {
                    return reject(new types_1.InvalidServerDataError());
                }
            }
        };
        try {
            anHttpRequest.open("GET", aUrl, true);
            anHttpRequest.send();
        }
        catch (e) {
            return reject(new types_1.ServerRequestError());
        }
        return null;
    });
}
exports.HttpClientGET = HttpClientGET;
function HttpClientPOST(aUrl, data) {
    return new Promise(function (resolve, reject) {
        var anHttpRequest = getHttpRequest();
        var time = setTimeout(function () {
            return reject(new types_1.TimeOutError());
        }, timeMs);
        anHttpRequest.onreadystatechange = function () {
            if (anHttpRequest.readyState === 4 && anHttpRequest.status === 200) {
                clearTimeout(time);
                try {
                    var data_1 = JSON.parse(anHttpRequest.responseText);
                    return resolve(data_1);
                }
                catch (e) {
                    return reject(new types_1.InvalidServerDataError());
                }
            }
        };
        try {
            anHttpRequest.open("POST", aUrl, true);
            anHttpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
            anHttpRequest.send(data);
        }
        catch (e) {
            return reject(new types_1.ServerRequestError());
        }
        return null;
    });
}
exports.HttpClientPOST = HttpClientPOST;
},{"../types":308,"bluebird":1}],164:[function(require,module,exports){
var baseUrl = "http://clingykoala.com/crush";
var source = {
    isPrime: '/isPrime.php',
    updateValidation: '/updateValidation.php',
    register: '/register.php',
    updateLastLogin: '/updateLastLogin.php',
    emailGreeting: '/emailGreeting.php',
    updateStatus: '/updateStatus.php',
    readStatus: '/readStatus.php',
    notify: '/notify.php',
    cancelPage: '/cancel.html',
    successPage: '/success.html'
};
exports.source = source;
function getUrl(part) {
    return baseUrl + part;
}
exports.getUrl = getUrl;
;
},{}],165:[function(require,module,exports){
var css = require('../../utils/css/css');
var utils = require('../../utils/utils');
var panel = {
    position: 'absolute',
    width: '100%',
    height: '100%',
    overflow: 'hidden',
    backgroundColor: '#000',
    backgroundImage: css.themes.standard.backgroundImageBoard,
    backgroundSize: 'cover',
    backgroundRepeat: 'no-repeat'
};
var text = {
    fontSize: css.font.fontSize.XL
};
module.exports = utils.union(css, {
    getPanel: function () {
        return css.get(panel);
    },
    getText: function () {
        return css.get(text);
    }
});
},{"../../utils/css/css":309,"../../utils/utils":314}],166:[function(require,module,exports){
var React = require('react');
var BoardCss = require('./BoardCss');
var DrawView = require('./draw/DrawView');
var RadioView = require('./radio/RadioView');
var InradioView = require('./inradio/InradioView');
var QuatroView = require('./quatro/QuatroView');
var OneTwoThreeView = require('./oneTwoThree/OneTwoThreeView');
var MultiRadioView = require('./multiRadio/MultiRadioView');
var GratulationView = require('./gratulation/GratulationView');
var constants_1 = require('../../lessons/helper/constants');
var services_1 = require('../../services');
var div = React.DOM.div;
function getView(apiState) {
    var state = apiState.lessonsCatalog.current.answer;
    var id = apiState.lessonsCatalog.current.board.data.id;
    if (constants_1.isId.isDraw(id))
        return DrawView(state);
    if (constants_1.isId.isFourPictures(id))
        return QuatroView(state);
    if (constants_1.isId.isFourWords(id))
        return QuatroView(state);
    if (constants_1.isId.isInradio(id))
        return InradioView(state);
    if (constants_1.isId.isRadio(id))
        return RadioView(state);
    if (constants_1.isId.isMultiRadio(id))
        return MultiRadioView(state);
    if (constants_1.isId.isOneTwoThree(id))
        return OneTwoThreeView(state);
    console.error('GetView not recognized by id:' + id);
    return null;
}
function render() {
    var apiState = services_1.getState();
    if (!apiState.rootMenu.isMinimalized)
        return null;
    return div({
        style: BoardCss.getPanel()
    }, GratulationView(), getView(apiState));
}
module.exports = render;
},{"../../lessons/helper/constants":226,"../../services":307,"./BoardCss":165,"./draw/DrawView":168,"./gratulation/GratulationView":170,"./inradio/InradioView":174,"./multiRadio/MultiRadioView":180,"./oneTwoThree/OneTwoThreeView":182,"./quatro/QuatroView":184,"./radio/RadioView":186,"react":159}],167:[function(require,module,exports){
var css = require('../../../utils/css/css');
var utils = require('../../../utils/utils');
var bodyContent = {
    borderRadius: css.borderRadius,
    fontSize: css.font.fontSize.XL,
    alignItems: 'center',
    overflow: 'hidden',
    paddingTop: 0,
    margin: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
};
var body = {
    overflow: 'hidden',
    paddingTop: '1vh',
    margin: 0,
    paddingBottom: '1vh',
    paddingLeft: '1vw',
    paddingRight: '1vw'
};
module.exports = utils.union(css, {
    getPanel: css.layout.getPanel,
    getFooter: css.layout.getFooter,
    getBody: function () {
        return css.get(css.layout.getBody(), body);
    },
    getBodyContent: function () {
        return css.get(css.layout.getBodyContent(), bodyContent);
    }
});
},{"../../../utils/css/css":309,"../../../utils/utils":314}],168:[function(require,module,exports){
var React = require('react');
var DrawCss = require('./DrawCss');
var Signature = require('../../signature/index');
var MenuView = require('../menu/MenuView');
var HeaderView = require('../header/HeaderView');
var dictionary = require('../../../utils/dictionary');
var div = React.DOM.div;
function getFooter(onClick) {
    return div({
        style: DrawCss.getFooter()
    }, MenuView([{
            id: 'clear',
            name: dictionary.SIGNATURE_PAD_CLEAR,
            onClick: onClick
        }]));
}
var signatureClear = null;
function onGetInterfaceClear(onClear) {
    signatureClear = onClear;
}
function getBody(props) {
    return div({
        style: DrawCss.getBody()
    }, div({
        style: DrawCss.getBodyContent()
    }, Signature({
        id: props.board.autoId,
        backgroundColor: DrawCss.themes.signaturePad.background,
        penColor: DrawCss.themes.signaturePad.color,
        onGetInterface: onGetInterfaceClear
    })));
}
function clearSignature() {
    signatureClear && signatureClear();
}
module.exports = function render(props) {
    return div({
        style: DrawCss.getPanel()
    }, HeaderView(props), getBody(props), getFooter(clearSignature));
};
},{"../../../utils/dictionary":310,"../../signature/index":212,"../header/HeaderView":172,"../menu/MenuView":176,"./DrawCss":167,"react":159}],169:[function(require,module,exports){
var css = require('../../../utils/css/css');
var utils = require('../../../utils/utils');
var textShadow = '2px 2px 5px black';
var text = {
    color: css.font.color.normal,
    fontSize: css.font.fontSize.XL2,
    paddingBottom: '2vh',
    textShadow: textShadow
};
var content = {
    display: 'flex',
    flexGrow: 1,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
};
var panel = {
    position: 'absolute',
    zIndex: 100,
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    fontSize: css.font.fontSize.XL,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    display: 'flex',
    flexGrow: 1,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
};
module.exports = utils.union(css, {
    getPanel: function () {
        return css.get(panel);
    },
    getContent: function () {
        return css.get(content);
    },
    getText: function () {
        return css.get(text);
    }
});
},{"../../../utils/css/css":309,"../../../utils/utils":314}],170:[function(require,module,exports){
var React = require('react');
var dictionary = require('../../../utils/dictionary');
var GratulationCss = require('./GratulationCss');
var ButtonView = require('../../../components/button/ButtonView');
var services_1 = require('../../../services');
var events_1 = require('../../../events');
var div = React.DOM.div;
function getTitle() {
    return div({
        style: GratulationCss.getText()
    }, dictionary.GRATULATIONS_TITLE);
}
;
function getButtonContinue() {
    return ButtonView({
        name: dictionary.GRATULATIONS_BUTTON,
        isResponsibleHeight: true,
        onClick: function () { return events_1.events.closeStatusBoardEvent.publish(); }
    });
}
;
function getText(apiState) {
    return div({
        style: GratulationCss.getText()
    }, dictionary.GRATULATIONS_TEXT + apiState.lessonsCatalog.current.points.scorePercent + dictionary.PERCENT);
}
;
function getButtonSaveAndContinue(apiState) {
    var points = apiState.lessonsCatalog.current.points;
    if (!apiState.pass.user.email || points.score === 0) {
        return null;
    }
    return ButtonView({
        name: dictionary.GRATULATIONS_SAVE_BUTTON,
        isResponsibleHeight: true,
        isLoader: apiState.pass.status.process,
        onClick: function () {
            events_1.events.saveStatusBoardEvent.publish({
                uid: points.uid,
                status: points.score
            });
        }
    });
}
;
function getContent(apiState) {
    return div({
        style: GratulationCss.getContent()
    }, getTitle(), getText(apiState), getButtonSaveAndContinue(apiState), getButtonContinue());
}
;
function render() {
    var apiState = services_1.getState();
    if (!apiState.lessonsCatalog.current.points.isFinished)
        return null;
    return div({
        style: GratulationCss.getPanel()
    }, getContent(apiState));
}
module.exports = render;
},{"../../../components/button/ButtonView":189,"../../../events":215,"../../../services":307,"../../../utils/dictionary":310,"./GratulationCss":169,"react":159}],171:[function(require,module,exports){
var css = require('../../../utils/css/css');
var utils = require('../../../utils/utils');
var constants_1 = require('../../../lessons/helper/constants');
var header = {
    marginTop: '1vh'
};
var headerShrink = {
    marginTop: '1vh'
};
module.exports = utils.union(css, {
    getHeader: function (id) {
        return css.get(css.layout.getHeader(), header, constants_1.isId.isAnalogTime(id) ? headerShrink : null);
    },
    getInstructions: css.layout.getInstructions,
    getSupportIcon: function () {
        return css.icons.help;
    }
});
},{"../../../lessons/helper/constants":226,"../../../utils/css/css":309,"../../../utils/utils":314}],172:[function(require,module,exports){
var React = require('react');
var HeaderCss = require('./HeaderCss');
var ButtonView = require('../../button/ButtonView');
var TimeView = require('../time/TimeView');
var constants_1 = require('../../../lessons/helper/constants');
var events_1 = require('../../../events');
var div = React.DOM.div;
function getAnswerOrSupport(props) {
    if (props.board.data.isHelp && props.board.data.correct && props.board.data.correct.length) {
        return ButtonView({
            icon: props.isSupportShowAnswer ? null : HeaderCss.getSupportIcon(),
            isTime: constants_1.isId.isDigitalTime(props.board.data.id),
            isResponsibleCenter: true,
            name: props.isSupportShowAnswer ? props.board.data.correct.join(" ") : null,
            onClick: function () { return events_1.events.onToogleSupportHelp.publish(); }
        });
    }
    return null;
}
;
function getAnalogTime(state) {
    if (!constants_1.isId.isAnalogTime(state.board.data.id))
        return null;
    var time = state.board.data.name.split(':');
    return div({
        onClick: function () { return events_1.events.readEvent.publish(state.board.data.info); },
        style: HeaderCss.getInstructions(state.board.data.id)
    }, TimeView({
        hour: parseInt(time[0]),
        minute: parseInt(time[1])
    }));
}
function getInstructions(state) {
    if (!state.board.data.info)
        return null;
    return ButtonView({
        name: state.board.data.info,
        isInstructions: true,
        isTransparent: true,
        onClick: function () { return events_1.events.readEvent.publish(state.board.data.info); }
    });
}
function getHeader(state) {
    return div({
        style: HeaderCss.getHeader(state.board.data.id)
    }, getInstructions(state), getAnalogTime(state), ButtonView({
        name: state.text,
        onClick: function () { return events_1.events.readEvent.publish(state.text); }
    }), getAnswerOrSupport(state));
}
module.exports = getHeader;
},{"../../../events":215,"../../../lessons/helper/constants":226,"../../button/ButtonView":189,"../time/TimeView":187,"./HeaderCss":171,"react":159}],173:[function(require,module,exports){
var css = require('../../../utils/css/css');
var utils = require('../../../utils/utils');
var bodyContent = {
    alignItems: 'center',
    alignContent: 'center',
    flexFlow: 'row wrap',
    justifyContent: 'center'
};
var list = {
    display: 'inline-flex',
    flexDirection: 'column',
    alignItems: 'stretch',
    justifyContent: 'center'
};
module.exports = utils.union(css, {
    getPanel: css.layout.getPanel,
    getBody: css.layout.getBody,
    getFooter: css.layout.getFooter,
    getBodyContent: function () {
        return css.get(css.layout.getBodyContent(), bodyContent);
    },
    getList: function () {
        return css.get(list);
    },
});
},{"../../../utils/css/css":309,"../../../utils/utils":314}],174:[function(require,module,exports){
var React = require('react');
var InradioCss = require('./InradioCss');
var MenuView = require('../menu/MenuView');
var HeaderView = require('../header/HeaderView');
var ButtonView = require('../../button/ButtonView');
var constants_1 = require('../../../lessons/helper/constants');
var _ = require('underscore');
var events_1 = require('../../../events');
var div = React.DOM.div;
function getFooter() {
    return div({
        style: InradioCss.layout.getFooter()
    }, MenuView());
}
function getList(state) {
    var list = state.generatedList.map(function (name, index) {
        return ButtonView({
            key: name + index,
            name: name,
            isFail: state.selectedAnswer === name && !state.isCorrect,
            isSuccess: state.selectedAnswer === name && state.isCorrect,
            isResponsibleCenter: true,
            isGuess: true,
            onClick: function () { return events_1.events.onChooseRadio.publish(name); }
        });
    });
    return div({
        style: InradioCss.getList()
    }, list);
}
function getBody(state) {
    if (state.text.indexOf(constants_1.space) === -1) {
        return div({
            style: InradioCss.getBody()
        }, div({
            style: InradioCss.getBodyContent()
        }, ButtonView({
            isResponsibleCenter: true,
            isSuccess: true,
            name: state.text,
            onClick: function () { return events_1.events.readEvent.publish(state.text); }
        })));
    }
    else {
        var text = state.text.split(constants_1.space);
        var firstPart = null;
        if (_.first(text)) {
            firstPart = ButtonView({
                name: _.first(text),
                onClick: function () { return events_1.events.readEvent.publish(_.first(text)); }
            });
        }
        var lastPart = null;
        if (_.last(text)) {
            lastPart = ButtonView({
                name: _.last(text),
                onClick: function () { return events_1.events.readEvent.publish(_.last(text)); }
            });
        }
        return div({
            style: InradioCss.getBody()
        }, div({
            style: InradioCss.getBodyContent()
        }, firstPart, getList(state), lastPart));
    }
}
;
function render(state) {
    return div({
        style: InradioCss.layout.getPanel()
    }, HeaderView(state), getBody(state), getFooter());
}
;
module.exports = render;
},{"../../../events":215,"../../../lessons/helper/constants":226,"../../button/ButtonView":189,"../header/HeaderView":172,"../menu/MenuView":176,"./InradioCss":173,"react":159,"underscore":160}],175:[function(require,module,exports){
var css = require('../../../utils/css/css');
var utils = require('../../../utils/utils');
var panel = {
    display: 'flex',
    width: '100%',
    flexDirection: 'column',
    alignItems: 'stretch',
    alignContent: 'stretch',
};
var progress = {
    display: 'flex',
    flexGrow: 1,
    flexDirection: 'row',
    alignItems: 'stretch',
    alignContent: 'stretch',
    height: '1vh',
};
var menu = {
    display: 'flex',
    flexGrow: 1,
    flexDirection: 'row',
    alignItems: 'stretch',
    alignContent: 'stretch',
};
var menuItem = {
    display: 'flex',
    flexGrow: 1,
    alignItems: 'center',
};
module.exports = utils.union(css, {
    getPanel: function () {
        return panel;
    },
    getProgress: function () {
        return progress;
    },
    getMenu: function () {
        return menu;
    },
    getMenuItem: function () {
        return menuItem;
    },
    getClassNameIconSuccess: function () {
        return css.icons.success;
    },
    getClassNameIconFail: function () {
        return css.icons.fail;
    },
    getClassNameIconUnknown: function () {
        return css.icons.menu;
    }
});
},{"../../../utils/css/css":309,"../../../utils/utils":314}],176:[function(require,module,exports){
var React = require('react');
var MenuCss = require('./MenuCss');
var ButtonView = require('../../button/ButtonView');
var ProgressView = require('./progress/ProgressView');
var services_1 = require('../../../services');
var events_1 = require('../../../events');
var div = React.DOM.div;
var prev = [{
        id: 'prev',
        icon: MenuCss.icons.left,
        onClick: function () { return events_1.events.onPrevBoard.publish(); }
    }];
var next = [{
        id: 'next',
        icon: MenuCss.icons.right,
        onClick: function () { return events_1.events.onNextBoard.publish(); }
    }];
var nextRandom = [{
        id: 'nextrandom',
        icon: MenuCss.icons.random,
        onClick: function () { return events_1.events.onNextRandomBoard.publish(); }
    }];
function getMenuButton(apiState) {
    var points = apiState.lessonsCatalog.current.points;
    function getIcon() {
        if (points.isCurrentSuccess)
            return MenuCss.getClassNameIconSuccess();
        if (points.isCurrentFail)
            return MenuCss.getClassNameIconFail();
        return MenuCss.getClassNameIconUnknown();
    }
    function getIconColour() {
        if (points.isCurrentSuccess)
            return MenuCss.font.color.success;
        if (points.isCurrentFail)
            return MenuCss.font.color.fail;
        return null;
    }
    return div({
        style: MenuCss.getMenuItem()
    }, ButtonView({
        name: points.display,
        leftIcon: getIcon(),
        letfIconColour: getIconColour(),
        isExpandWidth: true,
        isResponsibleHeight: true,
        isResponsibleCenter: true,
        isQuickClick: true,
        onClick: function () { return events_1.events.showRootMenu.publish(); }
    }));
}
function render(items) {
    var apiState = services_1.getState();
    items = items || [];
    items = [].concat(items, prev, next, nextRandom);
    var buttons = items.map(function (item) {
        return div({
            key: item.id,
            style: MenuCss.getMenuItem()
        }, ButtonView({
            name: item.name,
            icon: item.icon,
            isExpandWidth: true,
            isResponsibleHeight: true,
            isResponsibleCenter: true,
            onClick: item.onClick,
            isQuickClick: true
        }));
    });
    return div({
        style: MenuCss.getPanel()
    }, div({
        style: MenuCss.getMenu()
    }, buttons, getMenuButton(apiState)), div({
        style: MenuCss.getProgress()
    }, ProgressView()));
}
;
module.exports = render;
},{"../../../events":215,"../../../services":307,"../../button/ButtonView":189,"./MenuCss":175,"./progress/ProgressView":178,"react":159}],177:[function(require,module,exports){
var css = require('../../../../utils/css/css');
var utils = require('../../../../utils/utils');
var panel = {
    display: 'flex',
    width: '100%',
    height: '100%',
    flexFlow: 'row nowrap',
    alignItems: 'stretch',
    alignContent: 'stretch',
};
var item = {
    display: 'inline-flex',
    flexGrow: 1,
    backgroundColor: 'transparent',
    borderLeft: '1px solid gray',
};
var current = {
    backgroundColor: 'yellow',
};
var success = {
    backgroundColor: css.font.color.success
};
var fail = {
    backgroundColor: css.font.color.fail
};
module.exports = utils.union(css, {
    getPanel: function () {
        return panel;
    },
    getBar: function (completeTrueFalseNone, isCurrent) {
        var style = item;
        if (completeTrueFalseNone === true) {
            style = css.get(style, success);
        }
        else if (completeTrueFalseNone === false) {
            style = css.get(style, fail);
        }
        if (isCurrent) {
            style = css.get(style, current);
        }
        return style;
    }
});
},{"../../../../utils/css/css":309,"../../../../utils/utils":314}],178:[function(require,module,exports){
var React = require('react');
var ProgressCss = require('./ProgressCss');
var services_1 = require('../../../../services');
var div = React.DOM.div;
function getBars(apiState) {
    var points = apiState.lessonsCatalog.current.points;
    return points.boards.map(function (board) {
        var completeTrueFalseNone = points.mapStatus[board.autoId];
        var isCurrent = board.autoId === points.board.autoId;
        return div({
            key: board.autoId,
            style: ProgressCss.getBar(completeTrueFalseNone, isCurrent)
        });
    });
}
function render() {
    var apiState = services_1.getState();
    return div({
        style: ProgressCss.getPanel()
    }, getBars(apiState));
}
;
module.exports = render;
},{"../../../../services":307,"./ProgressCss":177,"react":159}],179:[function(require,module,exports){
var css = require('../../../utils/css/css');
var utils = require('../../../utils/utils');
var bodyContent = {
    alignItems: 'center',
};
var line = {
    display: 'flex',
    flexGrow: 1,
    alignItems: 'stretch',
    flexDirection: 'column',
    justifyContent: 'center'
};
module.exports = utils.union(css, {
    getPanel: css.layout.getPanel,
    getBody: css.layout.getBody,
    getFooter: css.layout.getFooter,
    getBodyContent: function () {
        return css.get(css.layout.getBodyContent(), bodyContent);
    },
    getLine: function () {
        return css.get(line);
    },
});
},{"../../../utils/css/css":309,"../../../utils/utils":314}],180:[function(require,module,exports){
var React = require('react');
var MultiRadioCss = require('./MultiRadioCss');
var MenuView = require('../menu/MenuView');
var ButtonView = require('../../button/ButtonView');
var HeaderView = require('../header/HeaderView');
var events_1 = require('../../../events');
var div = React.DOM.div;
function getFooter() {
    return div({
        style: MultiRadioCss.getFooter()
    }, MenuView());
}
function getContentLine(state, name, key) {
    return div({
        key: 'line' + key,
        style: MultiRadioCss.getLine()
    }, ButtonView({
        name: name,
        isExpand: true,
        isFail: state.selectedAnswer === name && !state.isCorrect,
        isSuccess: state.selectedAnswer === name && state.isCorrect,
        isGuess: true,
        isExpandWidth: true,
        onClick: function () { return events_1.events.onChooseMultiRadio.publish(name); }
    }));
}
function getBodyContent(state) {
    var lines = state.generatedList.map(function (o, key) {
        return getContentLine(state, o, key);
    });
    return div({
        style: MultiRadioCss.getBodyContent()
    }, lines);
}
function getBody(state) {
    return div({
        style: MultiRadioCss.getBody()
    }, getBodyContent(state));
}
function render(state) {
    return div({
        style: MultiRadioCss.getPanel()
    }, HeaderView(state), getBody(state), getFooter());
}
;
module.exports = render;
},{"../../../events":215,"../../button/ButtonView":189,"../header/HeaderView":172,"../menu/MenuView":176,"./MultiRadioCss":179,"react":159}],181:[function(require,module,exports){
var css = require('../../../utils/css/css');
var utils = require('../../../utils/utils');
var bodyContent = {
    alignItems: 'center',
};
var line = {
    display: 'flex',
    flexGrow: 1,
    alignItems: 'stretch',
    flexDirection: 'column',
    justifyContent: 'center'
};
module.exports = utils.union(css, {
    getPanel: css.layout.getPanel,
    getBody: css.layout.getBody,
    getFooter: css.layout.getFooter,
    getBodyContent: function () {
        return css.get(css.layout.getBodyContent(), bodyContent);
    },
    getLine: function () {
        return css.get(line);
    },
});
},{"../../../utils/css/css":309,"../../../utils/utils":314}],182:[function(require,module,exports){
var React = require('react');
var OneTwoThreeCss = require('./OneTwoThreeCss');
var utils = require('../../../utils/utils');
var MenuView = require('../menu/MenuView');
var ButtonView = require('../../button/ButtonView');
var HeaderView = require('../header/HeaderView');
var events_1 = require('../../../events');
var div = React.DOM.div;
function getFooter() {
    return div({
        style: OneTwoThreeCss.getFooter()
    }, MenuView());
}
function getContentLine(state, name, key) {
    var isFail = false;
    var isSuccess = false;
    if (state.selectedAnswer === name) {
        if (state.isCorrect) {
            isSuccess = true;
        }
        else {
            isFail = true;
        }
    }
    return div({
        key: 'line' + key,
        style: OneTwoThreeCss.getLine()
    }, ButtonView({
        name: utils.tryToSetLowercaseFirstLetter(name, state.board.data.correct),
        isExpand: true,
        isFail: isFail,
        isSuccess: isSuccess,
        isGuess: true,
        isExpandWidth: true,
        onClick: function () { return events_1.events.onChooseOneTwoThree.publish(name); }
    }));
}
function getBodyContent(state) {
    var lines = state.generatedList.map(function (o, key) {
        return getContentLine(state, o, key);
    });
    return div({
        style: OneTwoThreeCss.getBodyContent()
    }, lines);
}
function getBody(state) {
    return div({
        style: OneTwoThreeCss.getBody()
    }, getBodyContent(state));
}
function render(state) {
    return div({
        style: OneTwoThreeCss.getPanel()
    }, HeaderView(state), getBody(state), getFooter());
}
;
module.exports = render;
},{"../../../events":215,"../../../utils/utils":314,"../../button/ButtonView":189,"../header/HeaderView":172,"../menu/MenuView":176,"./OneTwoThreeCss":181,"react":159}],183:[function(require,module,exports){
var css = require('../../../utils/css/css');
var utils = require('../../../utils/utils');
var line = {
    display: 'flex',
    flexGrow: 1,
    flexFlow: 'row wrap'
};
var itemWraper = {
    paddingTop: '2vh',
    paddingBottom: '2vh',
    paddingLeft: '2vw',
    paddingRight: '2vw',
    display: 'flex',
    flexGrow: 1,
    alignItems: 'stretch'
};
module.exports = utils.union(css, {
    getPanel: css.layout.getPanel,
    getBody: css.layout.getBody,
    getFooter: css.layout.getFooter,
    getBodyContent: css.layout.getBodyContent,
    getLine: function () {
        return css.get(line);
    },
    getItemWraper: function () {
        return itemWraper;
    },
});
},{"../../../utils/css/css":309,"../../../utils/utils":314}],184:[function(require,module,exports){
var React = require('react');
var QuatroCss = require('./QuatroCss');
var MenuView = require('../menu/MenuView');
var ButtonView = require('../../button/ButtonView');
var _ = require('underscore');
var constants_1 = require('../../../lessons/helper/constants');
var HeaderView = require('../header/HeaderView');
var events_1 = require('../../../events');
var div = React.DOM.div;
function getFooter() {
    return div({
        style: QuatroCss.getFooter()
    }, MenuView());
}
function getContentLine(state, list) {
    var elements = list.map(function (name) {
        var word = null;
        if (constants_1.isId.isFourWords(state.board.data.id)) {
            word = name;
        }
        var isFail = false;
        var isSuccess = false;
        if (state.selectedAnswer === name) {
            if (_.contains(state.board.data.correct, state.selectedAnswer)) {
                isSuccess = true;
            }
            else {
                isFail = true;
            }
        }
        return div({
            key: name,
            style: QuatroCss.getItemWraper()
        }, ButtonView({
            name: word,
            isExpand: true,
            isFail: isFail,
            isSuccess: isSuccess,
            isGuess: true,
            backUrl: word ? null : name,
            isTime: constants_1.isId.isDigitalTime(state.board.data.id),
            onClick: function () { return events_1.events.onChoosePicture.publish(name); }
        }));
    });
    return div({
        style: QuatroCss.getLine()
    }, elements);
}
function getBody(state) {
    var line1 = getContentLine(state, state.generatedList.slice(0, 2));
    var line2 = getContentLine(state, state.generatedList.slice(2, 4));
    return div({
        style: QuatroCss.getBody()
    }, div({
        style: QuatroCss.getBodyContent()
    }, line1, line2));
}
;
module.exports = function render(state) {
    return div({
        style: QuatroCss.getPanel()
    }, HeaderView(state), getBody(state), getFooter());
};
},{"../../../events":215,"../../../lessons/helper/constants":226,"../../button/ButtonView":189,"../header/HeaderView":172,"../menu/MenuView":176,"./QuatroCss":183,"react":159,"underscore":160}],185:[function(require,module,exports){
var css = require('../../../utils/css/css');
var utils = require('../../../utils/utils');
var bodyContent = {
    alignItems: 'center',
};
var list = {
    margin: 'auto',
    display: 'flex',
    flexGrow: 1,
    flexDirection: 'column',
    alignItems: 'stretch',
    justifyContent: 'center'
};
module.exports = utils.union(css, {
    getPanel: css.layout.getPanel,
    getBody: css.layout.getBody,
    getFooter: css.layout.getFooter,
    getBodyContent: function () {
        return css.get(css.layout.getBodyContent(), bodyContent);
    },
    getInstructions: css.layout.getInstructions,
    getList: function () {
        return list;
    }
});
},{"../../../utils/css/css":309,"../../../utils/utils":314}],186:[function(require,module,exports){
var React = require('react');
var RadioCss = require('./RadioCss');
var MenuView = require('../menu/MenuView');
var ButtonView = require('../../button/ButtonView');
var HeaderView = require('../header/HeaderView');
var events_1 = require('../../../events');
var div = React.DOM.div;
function getFooter() {
    return div({
        style: RadioCss.layout.getFooter()
    }, MenuView());
}
function getBody(state) {
    function getItems(state) {
        return state.generatedList.map(function (name, index) {
            var isFail = false;
            var isSuccess = false;
            if (state.selectedAnswer === name) {
                if (state.isCorrect) {
                    isSuccess = true;
                }
                else {
                    isFail = true;
                }
            }
            return ButtonView({
                key: name + index,
                name: name,
                isExpand: true,
                isFail: isFail,
                isSuccess: isSuccess,
                isGuess: true,
                isExpandWidth: true,
                onClick: function () { return events_1.events.onChooseRadio.publish(name); }
            });
        });
    }
    return div({
        style: RadioCss.getBody()
    }, div({
        style: RadioCss.getBodyContent()
    }, div({
        style: RadioCss.getList()
    }, getItems(state))));
}
;
module.exports = function render(state) {
    return div({
        style: RadioCss.layout.getPanel()
    }, HeaderView(state), getBody(state), getFooter());
};
},{"../../../events":215,"../../button/ButtonView":189,"../header/HeaderView":172,"../menu/MenuView":176,"./RadioCss":185,"react":159}],187:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var utils = require('../../../utils/utils');
var css = require('../../../utils/css/css');
var _ = require('underscore');
var _a = React.DOM, div = _a.div, canvas = _a.canvas;
var ReactDOM = require('react-dom');
function drawClock(ctx, radius, hour, minute) {
    drawFace(ctx, radius);
    drawNumbers(ctx, radius);
    drawTime(ctx, radius, hour, minute);
}
function drawFace(ctx, radius) {
    var grad;
    ctx.beginPath();
    ctx.arc(0, 0, radius, 0, 2 * Math.PI);
    ctx.fillStyle = 'white';
    ctx.fill();
    grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);
    grad.addColorStop(0, '#333');
    grad.addColorStop(0.5, 'white');
    grad.addColorStop(1, '#333');
    ctx.strokeStyle = grad;
    ctx.lineWidth = radius * 0.1;
    ctx.stroke();
    ctx.beginPath();
    ctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);
    ctx.fillStyle = '#333';
    ctx.fill();
}
function drawNumbers(ctx, radius) {
    var ang;
    var num;
    ctx.font = radius * 0.15 + "px arial";
    ctx.textBaseline = "middle";
    ctx.textAlign = "center";
    for (num = 1; num < 13; num++) {
        ang = num * Math.PI / 6;
        ctx.rotate(ang);
        ctx.translate(0, -radius * 0.85);
        ctx.rotate(-ang);
        ctx.fillText(num.toString(), 0, 0);
        ctx.rotate(ang);
        ctx.translate(0, radius * 0.85);
        ctx.rotate(-ang);
    }
}
function drawTime(ctx, radius, hour, minute) {
    var now = new Date();
    var hour = _.isNumber(hour) ? hour : now.getHours();
    var minute = _.isNumber(minute) ? minute : now.getMinutes();
    var second = now.getSeconds();
    hour = hour % 12;
    hour = (hour * Math.PI / 6) +
        (minute * Math.PI / (6 * 60)) +
        (second * Math.PI / (360 * 60));
    drawHand(ctx, hour, radius * 0.5, radius * 0.07);
    minute = (minute * Math.PI / 30) + (second * Math.PI / (30 * 60));
    drawHand(ctx, minute, radius * 0.8, radius * 0.07);
    second = (second * Math.PI / 30);
    drawHand(ctx, second, radius * 0.9, radius * 0.02);
}
function drawHand(ctx, pos, length, width) {
    ctx.beginPath();
    ctx.lineWidth = width;
    ctx.lineCap = "round";
    ctx.moveTo(0, 0);
    ctx.rotate(pos);
    ctx.lineTo(0, -length);
    ctx.stroke();
    ctx.rotate(-pos);
}
function getSize() {
    var s = css.getSize();
    var x = (s.x / 5);
    var y = (s.y / 5);
    var size = Math.min(x, y);
    size = Math.max(x, 50);
    if (size > 150) {
        size = 150;
    }
    return utils.round10(size, 1);
}
var TimeView = (function (_super) {
    __extends(TimeView, _super);
    function TimeView(props) {
        _super.call(this, props);
        this.canvas = null;
        this.ctx = null;
        this.radius = null;
        this.interval = null;
        this.lastRadius = 0;
        this.draw = this.draw.bind(this);
    }
    TimeView.prototype.componentWillUnmount = function () {
        clearInterval(this.interval);
    };
    TimeView.prototype.componentDidMount = function () {
        this.drawClock();
    };
    TimeView.prototype.componentDidUpdate = function () {
        this.drawClock();
    };
    TimeView.prototype.drawClock = function () {
        clearInterval(this.interval);
        this.canvas = ReactDOM.findDOMNode(this.refs["canvas"]);
        this.ctx = this.canvas.getContext("2d");
        this.radius = this.canvas.height / 2;
        if (this.lastRadius) {
            this.ctx.translate(-this.lastRadius, -this.lastRadius);
        }
        this.ctx.translate(this.radius, this.radius);
        this.lastRadius = 0 + this.radius;
        this.draw();
        this.interval = setInterval(this.draw, 1000);
    };
    TimeView.prototype.draw = function () {
        drawClock(this.ctx, this.radius * 0.90, this.props.hour, this.props.minute);
    };
    TimeView.prototype.render = function () {
        var size = getSize();
        return canvas({
            ref: 'canvas',
            style: {
                margin: 'auto',
                width: size,
                height: size
            },
            width: size,
            height: size
        });
    };
    return TimeView;
})(React.Component);
;
module.exports = React.createFactory(TimeView);
},{"../../../utils/css/css":309,"../../../utils/utils":314,"react":159,"react-dom":3,"underscore":160}],188:[function(require,module,exports){
var css = require('../../utils/css/css');
var utils = require('../../utils/utils');
var button = {
    display: 'flex',
    backgroundColor: css.button.backgroundColor.normal,
    backgroundImage: css.button.backgroundImage.normal(),
    color: css.button.color.normal,
    border: css.button.border.normal,
    MozBorderRadius: css.button.radius.borderRadius,
    WebkitBorderRadius: css.button.radius.borderRadius,
    borderRadius: css.button.radius.borderRadius,
    cursor: 'pointer',
    fontSize: css.font.fontSize.XL,
    textDecoration: 'none',
    textShadow: '0px 1px 0px #2f6627',
    margin: 0,
    padding: 0,
    flexDirection: 'row',
    alignItems: 'stretch',
    backgroundRepeat: 'no-repeat',
    backgroundPosition: 'center',
    WebkitBackgroundSize: 'contain',
    MozBackgroundSize: 'contain',
    OBackgroundSize: 'contain',
    backgroundSize: 'contain',
    minWidth: '15vw',
    maxWidth: '100%',
};
var pressed = {
    position: 'relative',
    top: 1,
    backgroundColor: css.button.backgroundColor.focus,
    backgroundImage: css.button.backgroundImage.focus,
    color: css.button.color.focus,
    border: css.button.border.focus
};
var isExpand = {
    display: 'flex',
    flexGrow: 1,
    flexDirection: 'column',
    alignItems: 'center',
    alignContent: 'center',
    justifyContent: 'center',
    textAlign: 'center'
};
var isExpandWidth = {
    width: '100%',
    flexGrow: 1
};
var isActive = {
    backgroundColor: css.button.backgroundColor.active,
    backgroundImage: css.button.backgroundImage.active,
    color: css.button.color.active,
    border: css.button.border.active
};
var isResponsibleHeight = {};
var isResponsibleCenter = {
    justifyContent: 'center',
    display: 'flex',
    flexGrow: 1
};
var isSuccess = {
    border: css.button.border.success
};
var isFail = {
    border: css.button.border.fail
};
var isGuess = {
    backgroundColor: css.button.backgroundColor.normalGuess,
    border: css.button.border.normalGuess,
    backgroundImage: css.button.backgroundImage.normalGuess()
};
var isTransparent = {
    backgroundColor: css.button.backgroundColor.transparent,
    border: css.button.border.transparent,
    backgroundImage: css.button.backgroundImage.transparent()
};
var isInstructions = {
    color: css.font.color.info,
    border: 'none',
};
var disabled = {
    backgroundColor: css.button.backgroundColor.disabled,
    backgroundImage: css.button.backgroundImage.disabled,
    color: css.button.color.disabled,
    border: css.button.border.disabled,
    cursor: css.cursor.normal
};
var name = {
    display: 'flex',
    paddingTop: '2vh',
    paddingBottom: '2vh',
    paddingLeft: '1vw',
    paddingRight: '1vw',
    justifyContent: 'flex-start',
    textAlign: 'left',
    alignSelf: 'center',
    alignItems: 'center',
    flexGrow: 1,
    wordBreak: 'break-word',
    wordWrap: 'break-word'
};
var nameNoBottom = {
    paddingBottom: 0,
};
var nameContainer = {
    textAlign: 'center',
    display: 'block',
    width: '100%'
};
var nameContainerIsExpand = {
    textAlign: 'center',
};
var icon = {
    paddingTop: '2vh',
    paddingBottom: '2vh',
    paddingLeft: '2vw',
    paddingRight: '2vw',
    alignSelf: 'center',
    fontSize: css.font.fontSize.mega
};
var leftIcon = {
    paddingTop: '2vh',
    paddingBottom: '2vh',
    paddingLeft: '2vw',
    paddingRight: '2vw',
    alignSelf: 'center',
    color: css.button.color.disabled,
};
var leftIconActive = {
    color: '#fff',
};
var iconSets = {
    display: 'flex',
    width: '100%',
    flexGrow: 1,
    paddingTop: 3,
    paddingBottom: 3,
    flexFlow: 'row wrap',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: css.font.fontSize.micro
};
var iconSet = {
    display: 'block',
    width: 32,
    height: 32,
    backgroundImage: '',
    backgroundSize: 'cover',
    backgroundRepeat: 'no-repeat'
};
var numbers = {
    display: 'inline-flex',
    flexFlow: 'row nowrap',
    fontSize: css.font.fontSize.micro,
    alignSelf: 'center',
    color: css.button.color.disabled,
    paddingLeft: 2,
    border: '0 solid transparent',
    borderRightWidth: 10
};
var numbersActive = {
    color: css.button.color.active
};
var numbersStatus = {};
module.exports = utils.union(css, {
    getButton: function (o) {
        var style = button;
        if (o.isExpandWidth)
            style = css.get(style, isExpandWidth);
        if (o.isExpand)
            style = css.get(style, isExpand);
        if (o.isActive)
            style = css.get(style, isActive);
        if (o.pressed)
            style = css.get(style, pressed);
        if (o.isResponsibleHeight)
            style = css.get(style, isResponsibleHeight);
        if (o.isGuess)
            style = css.get(style, isGuess);
        if (o.isSuccess)
            style = css.get(style, isSuccess);
        if (o.isFail)
            style = css.get(style, isFail);
        if (o.isTime)
            style = css.get(style, css.fontFamily.time);
        if (o.isTransparent)
            style = css.get(style, isTransparent);
        if (o.backUrl)
            style = css.get(style, { backgroundImage: "url(" + o.backUrl + ")" });
        if (o.isInstructions)
            style = css.get(style, isInstructions);
        if (o.disabled)
            style = css.get(style, disabled);
        return style;
    },
    getName: function (o) {
        return css.get(name, o.isResponsibleCenter ? isResponsibleCenter : null, o.isIconSet ? nameNoBottom : null);
    },
    getNameContainer: function (isExpand) {
        return css.get(nameContainer, isExpand ? nameContainerIsExpand : null);
    },
    getIcon: function (o) {
        return css.get(icon, o.isResponsibleCenter ? isResponsibleCenter : null);
    },
    getLeftIcon: function (isActive, letfIconColour) {
        return css.get(leftIcon, isActive ? leftIconActive : null, letfIconColour ? { color: letfIconColour } : null);
    },
    getIconSets: function () {
        return css.get(iconSets);
    },
    getIconSet: function (icon) {
        return css.get(iconSet, { backgroundImage: "url(" + icon + ")" });
    },
    getNumbers: function (isActive) {
        return css.get(numbers, isActive ? numbersActive : null);
    },
    getNumbersStatus: function (numb, length) {
        var percent = utils.toPercent(numb, length);
        var color = null;
        if (percent >= 90) {
            color = '#00FF00';
        }
        else if (percent >= 80) {
            color = '#64E986';
        }
        else if (percent >= 50) {
            color = '#89C35C';
        }
        else if (percent >= 30) {
            color = '#8BB381';
        }
        else {
            color = '#99C68E';
        }
        return css.get(numbersStatus, { color: color });
    }
});
},{"../../utils/css/css":309,"../../utils/utils":314}],189:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var ButtonCss = require('./ButtonCss');
var LoaderView = require('../loader/LoaderView');
var _ = require('underscore');
var _a = React.DOM, div = _a.div, button = _a.button;
function getIcon(props) {
    if (!props.icon)
        return null;
    return div({
        className: props.icon,
        style: ButtonCss.getIcon({
            isResponsibleCenter: props.isResponsibleCenter
        })
    });
}
function getLeftIcon(props) {
    if (!props.leftIcon)
        return null;
    return div({
        className: props.leftIcon,
        style: ButtonCss.getLeftIcon(props.isActive, props.letfIconColour)
    });
}
function getIconSet(props) {
    if (!props.iconSet || !props.iconSet.length)
        return null;
    var set = props.iconSet.map(function (icon) {
        return div({
            style: ButtonCss.getIconSet(icon),
            key: icon,
        });
    });
    return div({
        style: ButtonCss.getIconSets()
    }, set);
}
function getName(props) {
    if (!props.name)
        return null;
    return div({
        style: ButtonCss.getNameContainer(props.isExpand)
    }, div({
        style: ButtonCss.getName({
            isResponsibleCenter: props.isResponsibleCenter,
            isIconSet: !!(props.iconSet && props.iconSet.length)
        })
    }, props.name), getIconSet(props));
}
function getNumberStatus(props) {
    if (!_.isNumber(props.numbersStatus))
        return null;
    return div({
        style: ButtonCss.getNumbersStatus(props.numbersStatus, props.numbers)
    }, props.numbersStatus);
}
function getNumbers(props) {
    if (!props.numbers)
        return null;
    var numberStatus = getNumberStatus(props);
    return div({
        style: ButtonCss.getNumbers(props.isActive)
    }, numberStatus, numberStatus ? '/' : null, props.numbers);
}
function render(props, state, clickHandler) {
    var loader = props.isLoader ? LoaderView() : null;
    return button({
        ref: props.ref,
        key: props.key,
        disabled: props.disabled,
        onClick: clickHandler,
        style: ButtonCss.getButton({
            disabled: props.disabled,
            pressed: state.pressed,
            isExpand: props.isExpand,
            isExpandWidth: props.isExpandWidth,
            isActive: props.isActive,
            isResponsibleHeight: props.isResponsibleHeight,
            isSuccess: props.isSuccess,
            isFail: props.isFail,
            backUrl: props.backUrl,
            isTime: props.isTime,
            isGuess: props.isGuess,
            isTransparent: props.isTransparent,
            isInstructions: props.isInstructions
        })
    }, getLeftIcon(props), getIcon(props), getName(props), getNumbers(props), loader);
}
var ButtonView = (function (_super) {
    __extends(ButtonView, _super);
    function ButtonView(props) {
        _super.call(this, props);
        this.time = null;
        this.state = {
            pressed: false
        };
        this.clickHandler = this.clickHandler.bind(this);
        this.unpress = this.unpress.bind(this);
    }
    ButtonView.prototype.clickHandler = function (e) {
        e.preventDefault();
        e.stopPropagation();
        this.setState({ pressed: true });
        this.props.isQuickClick && this.props.onClick(this.props);
        this.time = setTimeout(this.unpress, 100, this);
    };
    ButtonView.prototype.unpress = function () {
        this.setState && this.setState({ pressed: false });
        !this.props.isQuickClick && this.props.onClick(this.props);
    };
    ButtonView.prototype.componentWillUnmount = function () {
        clearTimeout(this.time);
    };
    ButtonView.prototype.render = function () {
        return render(this.props, this.state, this.clickHandler.bind(this));
    };
    return ButtonView;
})(React.Component);
;
module.exports = React.createFactory(ButtonView);
},{"../loader/LoaderView":191,"./ButtonCss":188,"react":159,"underscore":160}],190:[function(require,module,exports){
var React = require('react');
var css = require('../../utils/css/css');
var source_1 = require('../../catalog/source');
var _a = React.DOM, div = _a.div, form = _a.form, input = _a.input, img = _a.img, label = _a.label;
function getPayPal(props) {
    return form({
        action: "https://www.paypal.com/cgi-bin/webscr",
        method: "post",
        target: "_top"
    }, input({
        type: "hidden",
        name: "cmd",
        value: "_s-xclick"
    }), input({
        type: "hidden",
        name: "hosted_button_id",
        value: props.code
    }), input({
        type: "hidden",
        name: "invoice",
        value: props.user
    }), input({
        type: "hidden",
        name: "custom",
        value: props.valid
    }), input({
        type: "hidden",
        name: "return",
        value: source_1.getUrl(source_1.source.successPage)
    }), input({
        type: "hidden",
        name: "cancel_return",
        value: source_1.getUrl(source_1.source.cancelPage)
    }), input({
        type: "hidden",
        name: "notify_url",
        value: source_1.getUrl(source_1.source.notify)
    }), input({
        style: {
            display: 'block',
            color: 'white',
            backgroundColor: css.button.backgroundColor.normal,
            backgroundImage: css.button.backgroundImage.normal(),
            borderRadius: css.button.radius.borderRadius,
            border: css.button.border.normal,
            paddingBottom: '2vh',
            paddingTop: '2vh',
            paddingLeft: '2vw',
            paddingRight: '2vw',
        },
        type: 'submit',
        value: props.name,
        alt: "PayPal – The safer, easier way to pay online!"
    }), img({
        alt: "",
        src: "https://www.paypalobjects.com/en_GB/i/scr/pixel.gif",
        width: "1",
        height: "1"
    }));
}
exports.getPayPal = getPayPal;
},{"../../catalog/source":164,"../../utils/css/css":309,"react":159}],191:[function(require,module,exports){
var React = require('react');
var div = React.DOM.div;
function render() {
    return div({
        className: 'spinner'
    }, div({ className: 'bounce1' }), div({ className: 'bounce2' }), div({ className: 'bounce3' }));
}
;
module.exports = render;
},{"react":159}],192:[function(require,module,exports){
var css = require('../../utils/css/css');
var utils = require('../../utils/utils');
var panel = {
    position: 'absolute',
    zIndex: 2,
    top: 0,
    left: 0,
    color: css.font.color.normal,
    backgroundColor: 'rgba(0,0,0,0.9)',
    width: '100%',
    height: '100%',
    display: 'flex',
    flexFlow: 'row nowrap',
    alignItems: 'stretch',
    alignContent: 'stretch',
    fontSize: css.font.fontSize.XL,
    backgroundImage: css.themes.standard.backgroundImageRead,
    backgroundSize: 'cover',
    backgroundRepeat: 'no-repeat'
};
var wid = 22;
var main = {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'stretch',
    height: '100%',
    overflowX: 'hidden',
    overflowY: 'auto',
    width: 100 - wid + '%'
};
var menu = {
    display: 'flex',
    height: '100%',
    marginBottom: '2px',
    flexDirection: 'column',
    alignItems: 'stretch',
    alignContent: 'stretch',
    width: wid + '%',
};
var item = {
    display: 'flex',
    flexGrow: 1,
    flexDirection: 'column',
    alignItems: 'stretch',
    alignContent: 'stretch',
};
module.exports = utils.union(css, {
    getPanel: function () {
        return css.get(panel);
    },
    getMain: function () {
        return main;
    },
    getMenu: function () {
        return css.get(menu);
    },
    getItem: function () {
        return item;
    }
});
},{"../../utils/css/css":309,"../../utils/utils":314}],193:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var ButtonView = require('../../components/button/ButtonView');
var _ = require('underscore');
var SettingsRootCss = require('./SettingsRootCss');
var SwitcherView = require('./views/switcher/SwitcherView');
var ExplenationView = require('./views/explenation/ExplenationView');
var UserView = require('./views/user/UserView');
var types_1 = require('../../types');
var services_1 = require('../../services');
var events_1 = require('../../events');
var ReactDOM = require('react-dom');
var div = React.DOM.div;
var scrollRef = 'scrollRef';
function getItem(item) {
    return ButtonView({
        name: item.name,
        backUrl: item.backUrl,
        onClick: function () { return events_1.events.rootMenuEvent.publish(item.id); },
        isQuickClick: true,
        isTransparent: item.id === types_1.RootType.close ? true : false,
        isExpandWidth: true,
        isExpand: true,
        isActive: item.active,
    });
}
function getList(apiState) {
    return _.map(apiState.rootMenu.list, function (item) {
        return div({
            key: item.id,
            style: SettingsRootCss.getItem(),
        }, getItem(item));
    });
}
function getMenu(apiState) {
    return div({
        style: SettingsRootCss.getMenu()
    }, getList(apiState));
}
function updatePosition(e) {
    events_1.events.scrollPosition.publish(e.target.scrollTop);
}
var throttled = _.throttle(updatePosition, 800);
function getMain(apiState) {
    function getMainView() {
        switch (apiState.rootMenu.activeId) {
            case types_1.RootType.lessons: return SwitcherView();
            case types_1.RootType.explenation: return ExplenationView();
            case types_1.RootType.user: return UserView();
        }
        return null;
    }
    return div({
        style: SettingsRootCss.getMain(),
        onScroll: throttled,
        ref: scrollRef
    }, getMainView());
}
function render(apiState) {
    if (apiState.rootMenu.isMinimalized)
        return null;
    return div({
        style: SettingsRootCss.getPanel()
    }, getMain(apiState), getMenu(apiState));
}
var View = (function (_super) {
    __extends(View, _super);
    function View() {
        _super.call(this);
    }
    View.prototype.componentDidUpdate = function () {
        var region = ReactDOM.findDOMNode(this.refs[scrollRef]);
        if (region) {
            var apiState = services_1.getState();
            region.scrollTop = apiState.rootMenu.scrollPosition;
        }
    };
    View.prototype.render = function () {
        var apiState = services_1.getState();
        return render(apiState);
    };
    return View;
})(React.Component);
;
module.exports = React.createFactory(View);
},{"../../components/button/ButtonView":189,"../../events":215,"../../services":307,"../../types":308,"./SettingsRootCss":192,"./views/explenation/ExplenationView":195,"./views/switcher/SwitcherView":197,"./views/user/UserView":200,"react":159,"react-dom":3,"underscore":160}],194:[function(require,module,exports){
var css = require('../../../../utils/css/css');
var utils = require('../../../../utils/utils');
var panel = {
    width: '100%',
    paddingBottom: '10vh',
    fontFamily: css.fontFamily.journal.fontFamily,
    color: css.font.color.ink
};
var title = {
    paddingTop: '5vh',
    padding: '2vh',
    paddingBottom: 0,
    textAlign: 'center',
    fontFamily: css.fontFamily.charcoal.fontFamily,
    fontSize: css.font.fontSize.XL4,
};
var body = {
    paddingTop: '2vh',
    paddingBottom: '5vh',
    paddingLeft: '2vw',
    paddingRight: '2vw',
    margin: 'auto',
    color: css.font.color.ink
};
var bodyContent = {
    wordWrap: 'break-word',
    whiteSpace: 'pre-wrap',
    marginBottom: 30,
    fontSize: css.font.fontSize.XL3,
};
module.exports = utils.union(css, {
    getPanel: function () {
        return panel;
    },
    getTitle: function () {
        return title;
    },
    getBody: function () {
        return body;
    },
    getBodyContent: function () {
        return bodyContent;
    },
});
},{"../../../../utils/css/css":309,"../../../../utils/utils":314}],195:[function(require,module,exports){
var React = require('react');
var ExplenationCss = require('./ExplenationCss');
var utils_1 = require('../../../../utils/utils');
var ButtonView = require('../../../button/ButtonView');
var dictionary = require('../../../../utils/dictionary');
var services_1 = require('../../../../services');
var events_1 = require('../../../../events');
var div = React.DOM.div;
function render() {
    var apiState = services_1.getState();
    var explenation = apiState.lessonsCatalog.current.board.data.explenation;
    if (!explenation)
        return null;
    var title = div({
        style: ExplenationCss.getTitle(),
        onClick: function () { return utils_1.voice.read(apiState.lessonsCatalog.lessonsTitle); }
    }, apiState.lessonsCatalog.lessonsTitle);
    var buttonGoPractice = ButtonView({
        name: dictionary.GO_TEST,
        isExpandWidth: true,
        onClick: function () { return events_1.events.goTest.publish(); }
    });
    var body = div({
        style: ExplenationCss.getBody()
    }, div({
        style: ExplenationCss.getBodyContent()
    }, explenation.exp), buttonGoPractice);
    return div({
        style: ExplenationCss.getPanel()
    }, title, body);
}
;
module.exports = render;
},{"../../../../events":215,"../../../../services":307,"../../../../utils/dictionary":310,"../../../../utils/utils":314,"../../../button/ButtonView":189,"./ExplenationCss":194,"react":159}],196:[function(require,module,exports){
var css = require('../../../../utils/css/css');
var utils = require('../../../../utils/utils');
var panel = {
    width: '100%',
    paddingBottom: '10vh'
};
module.exports = utils.union(css, {
    getPanel: function () {
        return panel;
    }
});
},{"../../../../utils/css/css":309,"../../../../utils/utils":314}],197:[function(require,module,exports){
var React = require('react');
var SwitchCss = require('./SwitchCss');
var ButtonView = require('../../../button/ButtonView');
var services_1 = require('../../../../services');
var events_1 = require('../../../../events');
var types_1 = require('../../../../types');
var css = require('../../../../utils/css/css');
var div = React.DOM.div;
function isFree(apiState, freeType) {
    switch (freeType) {
        case types_1.FreeType.alwaysFree_____: return true;
        case types_1.FreeType.whenRegistered_: return (apiState.isProduction ? !!apiState.pass.user.email : true);
        case types_1.FreeType.whenPrime______: return (apiState.isProduction ? !!apiState.pass.user.isPrime : true);
        case types_1.FreeType.inProgressBlock: return (apiState.isProduction ? false : true);
    }
}
function getIconSet(disabled, lesson) {
    var icons = lesson.iconSet;
    if (lesson.freeType === types_1.FreeType.inProgressBlock)
        icons = [css.iconsSets.progress].concat(icons);
    return disabled ? [css.iconsSets.lock].concat(icons) : icons;
}
function getButtions() {
    var apiState = services_1.getState();
    return apiState.lessonsCatalog.sortedLessons.map(function (lesson) {
        var disabled = !isFree(apiState, lesson.freeType);
        return ButtonView({
            key: lesson.uid,
            ref: lesson.uid,
            iconSet: getIconSet(disabled, lesson),
            name: lesson.name,
            numbersStatus: lesson.numberFinished,
            numbers: lesson.boards.length,
            disabled: disabled,
            onClick: function () { return events_1.events.loadNewLessonEvent.publish(lesson.uid); },
            isQuickClick: false,
            isExpandWidth: true,
            isActive: lesson.active
        });
    });
}
function render() {
    return div({ style: SwitchCss.getPanel() }, getButtions());
}
module.exports = render;
},{"../../../../events":215,"../../../../services":307,"../../../../types":308,"../../../../utils/css/css":309,"../../../button/ButtonView":189,"./SwitchCss":196,"react":159}],198:[function(require,module,exports){
var css = require('../../../../utils/css/css');
var utils = require('../../../../utils/utils');
var React = require('react');
var _a = React.DOM, div = _a.div, label = _a.label;
var panel = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'stretch',
    alignContent: 'stretch',
    fontSize: css.font.fontSize.XL,
};
var container = {
    display: 'flex',
    flexGrow: 1,
    margin: '2vmax',
    marginRight: '1vmax',
    marginBottom: '1vmax',
    flexDirection: 'column',
    alignItems: 'flex-start',
    justifyContent: 'flex-start',
    width: 'calc(100% - 3vmax)'
};
var text = {
    color: css.font.color.normal,
    fontSize: css.font.fontSize.XL2,
    paddingBottom: '2vh',
    justifyContent: 'flex-start',
};
var box = {
    display: 'flex',
    width: '100%',
    maxWidth: '100%',
    paddingTop: '2vh',
    paddingBottom: '1vh',
    flexDirection: 'column',
};
var boxSplit = {
    display: 'flex',
    flexGrow: 1,
    maxWidth: '100%',
    paddingLeft: '1vw',
    paddingRight: '1vw',
    flexFlow: 'row wrap',
    justifyContent: 'flex-start'
};
var boxSplitToCenter = {
    justifyContent: 'center'
};
var boxLine = {
    display: 'flex',
    maxWidth: '100%',
    width: '100%',
    flexFlow: 'row wrap',
    justifyContent: 'space-between'
};
var boxLabel = {
    color: css.font.color.normal,
    alignItems: 'flex-start',
    display: 'flex',
    paddingRight: '1vw',
    maxWidth: '100%'
};
var boxInput = {
    flexGrow: 1,
    display: 'flex',
    flexBasis: '50%',
    maxWidth: '100%',
    border: '1px solid #e6e6e6',
    borderRadius: '4px',
    backgroundColor: '#3CBC8D',
    color: css.font.color.normal,
    marginBottom: '1vh',
    paddingLeft: '1vw',
    paddingRight: '1vw',
    paddingTop: '1vh',
    paddingBottom: '1vh',
    fontSize: '0.7em',
    width: '100%'
};
var error = {
    color: css.font.color.fail
};
module.exports = utils.union(css, {
    getPanel: function (isHidden) {
        return css.get(panel, isHidden ? { display: 'none' } : null);
    },
    getText: function () {
        return css.get(text);
    },
    getContainer: function () {
        return css.get(container);
    },
    getBox: function () {
        return css.get(box);
    },
    getBoxSplit: function () {
        return css.get(boxSplit);
    },
    getBoxSplitToCenter: function () {
        return css.get(boxSplit, boxSplitToCenter);
    },
    getBoxLine: function (isError) {
        return css.get(boxLine, isError ? error : null);
    },
    getBoxLineRight: function () {
        return css.get(boxLine, { justifyContent: 'flex-end' });
    },
    getBoxLabel: function () {
        return css.get(boxLabel);
    },
    getBoxInput: function () {
        return css.get(boxInput);
    },
    makeBoxLine: function (text, inputEl) {
        return div({
            style: this.getBoxLine()
        }, label({
            style: this.getBoxLabel()
        }, text), inputEl);
    }
});
},{"../../../../utils/css/css":309,"../../../../utils/utils":314,"react":159}],199:[function(require,module,exports){
var css = require('../../../../utils/css/css');
var utils = require('../../../../utils/utils');
var panel = {
    width: '100%',
    paddingBottom: '10vh',
};
module.exports = utils.union(css, {
    getPanel: function () {
        return panel;
    }
});
},{"../../../../utils/css/css":309,"../../../../utils/utils":314}],200:[function(require,module,exports){
var React = require('react');
var UserCss = require('./UserCss');
var div = React.DOM.div;
var LogoutView = require('./logout/LogoutView');
var RegisteringView = require('./registering/RegisteringView');
var LoginView = require('./login/LoginView');
var SubscribingView = require('./subscribing/SubscribingView');
var SubscribedView = require('./subscribed/SubscribedView');
var InfosView = require('./infos/InfosView');
var DonateView = require('./donate/DonateView');
var StatisticsView = require('./statistics/StatisticsView');
function render() {
    return div({
        style: UserCss.getPanel()
    }, LogoutView(), LoginView(), SubscribedView(), RegisteringView(), StatisticsView(), SubscribingView(), InfosView(), DonateView());
}
module.exports = render;
},{"./UserCss":199,"./donate/DonateView":201,"./infos/InfosView":202,"./login/LoginView":203,"./logout/LogoutView":204,"./registering/RegisteringView":206,"./statistics/StatisticsView":208,"./subscribed/SubscribedView":209,"./subscribing/SubscribingView":210,"react":159}],201:[function(require,module,exports){
var dictionary = require('../../../../../utils/dictionary');
var React = require('react');
var CommonCss = require('../CommonCss');
var css = require('../../../../../utils/css/css');
var services_1 = require('../../../../../services');
var _a = React.DOM, div = _a.div, form = _a.form, input = _a.input, img = _a.img;
function getPayPal() {
    return form({
        action: "https://www.paypal.com/cgi-bin/webscr",
        method: "post",
        target: "_blank"
    }, input({
        type: "hidden",
        name: "cmd",
        value: "_s-xclick"
    }), input({
        type: "hidden",
        name: "hosted_button_id",
        value: "HRQXPU6JQB8MS"
    }), input({
        style: {
            display: 'block',
            color: 'white',
            backgroundColor: css.button.backgroundColor.normal,
            backgroundImage: css.button.backgroundImage.normal(),
            borderRadius: css.button.radius.borderRadius,
            border: css.button.border.normal,
            paddingBottom: '2vh',
            paddingTop: '2vh',
            paddingLeft: '2vw',
            paddingRight: '2vw',
        },
        type: 'submit',
        value: dictionary.DONATE
    }), img({
        alt: "",
        src: "https://www.paypalobjects.com/en_GB/i/scr/pixel.gif",
        width: "1",
        height: "1"
    }));
}
function getBox() {
    return div({
        style: CommonCss.getBox()
    }, div({ style: CommonCss.getBoxSplit() }, getPayPal()));
}
function render() {
    var apiState = services_1.getState();
    if (!apiState.pass.user.email || !apiState.pass.user.isPrime)
        return null;
    return div({
        style: CommonCss.getPanel()
    }, div({
        style: CommonCss.getContainer()
    }, getBox()));
}
module.exports = render;
},{"../../../../../services":307,"../../../../../utils/css/css":309,"../../../../../utils/dictionary":310,"../CommonCss":198,"react":159}],202:[function(require,module,exports){
var dictionary = require('../../../../../utils/dictionary');
var React = require('react');
var CommonCss = require('../CommonCss');
var utils = require('../../../../../utils/utils');
var _a = React.DOM, div = _a.div, label = _a.label;
function render() {
    function getBox() {
        return div({
            style: CommonCss.getBox()
        }, div({ style: CommonCss.getBoxSplit() }, !utils.isBrowserSupported() ? CommonCss.makeBoxLine(dictionary.INFO_BROWSER, null) : null));
    }
    return div({
        style: CommonCss.getPanel()
    }, div({
        style: CommonCss.getContainer()
    }, getBox()));
}
module.exports = render;
},{"../../../../../utils/dictionary":310,"../../../../../utils/utils":314,"../CommonCss":198,"react":159}],203:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var dictionary = require('../../../../../utils/dictionary');
var React = require('react');
var CommonCss = require('../CommonCss');
var ButtonView = require('../../../../../components/button/ButtonView');
var services_1 = require('../../../../../services');
var utils = require('../../../../../utils/utils');
var constants_1 = require('../../../../../lessons/helper/constants');
var events_1 = require('../../../../../events');
var _a = React.DOM, div = _a.div, input = _a.input, label = _a.label;
function handleLogIn(state, setState) {
    events_1.events.onLogin.publish({
        email: state.email,
        password: state.password
    });
    state.password = '';
    setState(state);
}
function getEmail(apiState, state, setState) {
    return input({
        type: 'text',
        style: CommonCss.getBoxInput(),
        value: state.email,
        disabled: apiState.pass.login.process,
        onChange: function (e) {
            state.email = utils.removeInvalidChars(e.target.value);
            setState(state);
        }
    });
}
function getPassword(apiState, state, setState) {
    return input({
        type: 'password',
        style: CommonCss.getBoxInput(),
        value: state.password,
        disabled: apiState.pass.login.process,
        onChange: function (e) {
            state.password = utils.removeInvalidChars(e.target.value);
            setState(state);
        },
        onKeyPress: function (e) {
            if (e.key == 'Enter')
                handleLogIn(state, setState);
        }
    });
}
function getButtonSubmit(apiState, state, setState) {
    return ButtonView({
        name: dictionary.SUBMIT_BUTTON_LOGIN,
        isResponsibleHeight: true,
        isResponsibleCenter: true,
        isLoader: apiState.pass.login.process,
        disabled: apiState.pass.login.process || !state.email || !state.password ? true : false,
        onClick: function () { return handleLogIn(state, setState); }
    });
}
function getStatusText(apiState, state) {
    return apiState.pass.login.error || null;
}
function getLogin(apiState, state, setState) {
    return div({
        style: CommonCss.getBox()
    }, div({ style: CommonCss.getBoxSplit() }, div({ style: CommonCss.getBoxLine() }, CommonCss.makeBoxLine(dictionary.EMAIL, getEmail(apiState, state, setState)), CommonCss.makeBoxLine(dictionary.PASSWORD, getPassword(apiState, state, setState))), div({ style: CommonCss.getBoxLine(true) }, getStatusText(apiState, state)), div({ style: CommonCss.getBoxLineRight() }, getButtonSubmit(apiState, state, setState))));
}
function render(apiState, state, setState) {
    if (apiState.pass.login.success || apiState.pass.register.show)
        return null;
    return div({
        style: CommonCss.getPanel()
    }, div({
        style: CommonCss.getContainer()
    }, getLogin(apiState, state, setState)));
}
var View = (function (_super) {
    __extends(View, _super);
    function View() {
        _super.call(this);
        var defaultUser = constants_1.getDefaultUser(services_1.getState());
        this.state = {
            email: defaultUser.email,
            password: defaultUser.password
        };
    }
    View.prototype.render = function () {
        var state = this.state;
        var apiState = services_1.getState();
        return render(apiState, state, this.setState.bind(this));
    };
    return View;
})(React.Component);
;
module.exports = React.createFactory(View);
},{"../../../../../components/button/ButtonView":189,"../../../../../events":215,"../../../../../lessons/helper/constants":226,"../../../../../services":307,"../../../../../utils/dictionary":310,"../../../../../utils/utils":314,"../CommonCss":198,"react":159}],204:[function(require,module,exports){
var React = require('react');
var CommonCss = require('../CommonCss');
var ButtonView = require('../../../../button/ButtonView');
var dictionary = require('../../../../../utils/dictionary');
var utils_1 = require('../../../../../utils/utils');
var services_1 = require('../../../../../services');
var events_1 = require('../../../../../events');
var div = React.DOM.div;
function getButtonLogOut() {
    return ButtonView({
        name: dictionary.LOG_OUT,
        isResponsibleHeight: true,
        isResponsibleCenter: true,
        onClick: function () { return events_1.events.onLogOut.publish(); }
    });
}
function getLogOut(apiState) {
    return div({ style: CommonCss.getBox() }, div({ style: CommonCss.getBoxSplit() }, div({ style: CommonCss.getBoxLine() }, dictionary.LOGEDIN_AS + ' ' + apiState.pass.user.name), div({ style: CommonCss.getBoxLine() }, apiState.pass.user.last_login ? dictionary.LAST_LOGIN + ' ' + utils_1.getHumanizedDate(apiState.pass.user.last_login) : null)), div({ style: CommonCss.getBoxSplit() }, getButtonLogOut()));
}
function render() {
    var apiState = services_1.getState();
    if (!apiState.pass.login.success)
        return null;
    return div({
        style: CommonCss.getPanel()
    }, div({ style: CommonCss.getContainer() }, getLogOut(apiState)));
}
module.exports = render;
},{"../../../../../events":215,"../../../../../services":307,"../../../../../utils/dictionary":310,"../../../../../utils/utils":314,"../../../../button/ButtonView":189,"../CommonCss":198,"react":159}],205:[function(require,module,exports){
var dictionary = require('../../../../../utils/dictionary');
var utils = require('../../../../../utils/utils');
var Promise = require("bluebird");
function isPasswordMatched(p) {
    return new Promise(function (resolve, reject) {
        if (p.password === p.retypePassword) {
            return resolve(null);
        }
        return reject(new Error(dictionary.ERROR_REGISTERING_NO_MATCH_PASSWORDS));
    });
}
function isNameEntered(p) {
    return new Promise(function (resolve, reject) {
        if (p.name) {
            return resolve(null);
        }
        return reject(new Error(dictionary.ERROR_REGISTERING_NO_NAME));
    });
}
function isPasswordEntered(p) {
    return new Promise(function (resolve, reject) {
        if (p.password) {
            return resolve(null);
        }
        return reject(new Error(dictionary.ERROR_REGISTERING_NO_PASSWORD));
    });
}
function isRetypedPasswordEntered(p) {
    return new Promise(function (resolve, reject) {
        if (p.retypePassword) {
            return resolve(null);
        }
        return reject(new Error(dictionary.ERROR_REGISTERING_NO_RETYPED_PASSWORD));
    });
}
function isEmailEntered(p) {
    return new Promise(function (resolve, reject) {
        if (p.email) {
            return resolve(null);
        }
        return reject(new Error(dictionary.ERROR_REGISTERING_NO_EMAIL));
    });
}
function isValidEmail(p) {
    return new Promise(function (resolve, reject) {
        if (utils.checkEmail(p.email)) {
            return resolve(null);
        }
        return reject(new Error(dictionary.ERROR_REGISTERING_INVALID_EMAIL));
    });
}
function isValidPassword(p) {
    return new Promise(function (resolve, reject) {
        if (p.password.length >= 5) {
            return resolve(null);
        }
        return reject(new Error(dictionary.ERROR_REGISTERING_PASSWORD_TO_SHORT));
    });
}
function validate(props) {
    return isNameEntered(props)
        .then(function () { return isEmailEntered(props); })
        .then(function () { return isValidEmail(props); })
        .then(function () { return isPasswordEntered(props); })
        .then(function () { return isValidPassword(props); })
        .then(function () { return isRetypedPasswordEntered(props); })
        .then(function () { return isPasswordMatched(props); });
}
exports.validate = validate;
},{"../../../../../utils/dictionary":310,"../../../../../utils/utils":314,"bluebird":1}],206:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var dictionary = require('../../../../../utils/dictionary');
var React = require('react');
var CommonCss = require('../CommonCss');
var ButtonView = require('../../../../../components/button/ButtonView');
var utils_1 = require('../../../../../utils/utils');
var constants_1 = require('../../../../../lessons/helper/constants');
var services_1 = require('../../../../../services');
var events_1 = require('../../../../../events');
var _a = React.DOM, div = _a.div, input = _a.input;
function getToggleRegister(apiState) {
    return ButtonView({
        name: apiState.pass.register.show ? dictionary.BACK : dictionary.GO_REGISTERING,
        isResponsibleHeight: true,
        isResponsibleCenter: true,
        leftIcon: apiState.pass.register.show ? CommonCss.icons.left : '',
        onClick: function () { return events_1.events.onToogleRegisterView.publish(); }
    });
}
function getName(apiState, state, setState) {
    return input({
        type: 'text',
        style: CommonCss.getBoxInput(),
        value: state.user.name,
        disabled: apiState.pass.register.process,
        onChange: function (e) {
            state.user.name = utils_1.removeInvalidChars(e.target.value);
            setState({ user: state.user });
        }
    });
}
function getEmail(apiState, state, setState) {
    return input({
        type: 'text',
        style: CommonCss.getBoxInput(),
        value: state.user.email,
        disabled: apiState.pass.register.process,
        onChange: function (e) {
            state.user.email = utils_1.removeInvalidChars(e.target.value);
            setState({ user: state.user });
        }
    });
}
function getPassword(apiState, state, setState) {
    return input({
        type: 'password',
        style: CommonCss.getBoxInput(),
        value: state.user.password,
        disabled: apiState.pass.register.process,
        onChange: function (e) {
            state.user.password = utils_1.removeInvalidChars(e.target.value);
            setState({ user: state.user });
        }
    });
}
function getRetypePassword(apiState, state, setState) {
    return input({
        type: 'password',
        style: CommonCss.getBoxInput(),
        value: state.user.retypePassword,
        disabled: apiState.pass.register.process,
        onChange: function (e) {
            state.user.retypePassword = utils_1.removeInvalidChars(e.target.value);
            setState({ user: state.user });
        }
    });
}
function getButtonSubmit(apiState, state) {
    return ButtonView({
        name: dictionary.SUBMIT_BUTTON_REGISTERING,
        isResponsibleHeight: true,
        isResponsibleCenter: true,
        disabled: apiState.pass.register.process,
        isLoader: apiState.pass.register.process,
        onClick: function () { return events_1.events.onRegisterOnServer.publish(state.user); }
    });
}
function getStatusText(apiState) {
    return apiState.pass.register.error;
}
function getBox(apiState, state, setState) {
    if (apiState.pass.register.show && !apiState.pass.register.success) {
        return div({
            style: CommonCss.getBox()
        }, div({ style: CommonCss.getBoxSplit() }, CommonCss.makeBoxLine(dictionary.NAME, getName(apiState, state, setState)), CommonCss.makeBoxLine(dictionary.EMAIL, getEmail(apiState, state, setState)), CommonCss.makeBoxLine(dictionary.PASSWORD, getPassword(apiState, state, setState)), CommonCss.makeBoxLine(dictionary.RETYPE_PASSWORD, getRetypePassword(apiState, state, setState))), div({ style: CommonCss.getBoxLine(true) }, getStatusText(apiState)), div({ style: CommonCss.getBoxLineRight() }, getButtonSubmit(apiState, state)));
    }
    return null;
}
function render(apiState, state, setState) {
    if (apiState.pass.login.success)
        return null;
    if (apiState.pass.register.success) {
        state.user.email = null;
        state.user.name = null;
        state.user.password = null;
        state.user.retypePassword = null;
    }
    return div({
        style: CommonCss.getPanel()
    }, div({
        style: CommonCss.getContainer()
    }, getToggleRegister(apiState), getBox(apiState, state, setState)));
}
var View = (function (_super) {
    __extends(View, _super);
    function View() {
        _super.call(this);
        var defaultUser = constants_1.getDefaultUser(services_1.getState());
        this.state = {
            user: {
                name: defaultUser.name,
                email: defaultUser.email,
                password: defaultUser.password,
                retypePassword: defaultUser.password
            }
        };
    }
    View.prototype.render = function () {
        var apiState = services_1.getState();
        return render(apiState, this.state, this.setState.bind(this));
    };
    return View;
})(React.Component);
;
module.exports = React.createFactory(View);
},{"../../../../../components/button/ButtonView":189,"../../../../../events":215,"../../../../../lessons/helper/constants":226,"../../../../../services":307,"../../../../../utils/dictionary":310,"../../../../../utils/utils":314,"../CommonCss":198,"react":159}],207:[function(require,module,exports){
var css = require('../../../../../utils/css/css');
var pie = {
    width: 250,
    height: 125
};
var brick = {
    display: 'inline-flex',
    border: '1px solid white',
    padding: 7,
    marginRight: 10
};
var brickLine = {
    padding: 7,
    fontSize: css.font.fontSize.micro,
    display: 'flex',
    flexFlow: 'row nowrap',
    width: '100%',
    justifyContent: 'flex-start'
};
var correctPercentage = {
    color: css.font.color.success,
    alignItems: 'center',
    display: 'flex'
};
var lessonsFinished = {
    alignItems: 'center',
    display: 'flex',
    flexFlow: 'row'
};
var lessonsFinishedMark = {
    color: css.font.color.success,
    marginLeft: '1vw'
};
var icon = {
    display: 'block',
    width: 32,
    height: 32,
    backgroundImage: '',
    backgroundSize: 'cover',
    backgroundRepeat: 'no-repeat',
    marginRight: 10
};
var iconNumber = {
    display: 'block',
    minWidth: 150,
    textAlign: 'left'
};
var iconSet = {
    display: 'flex',
    flexGrow: 1,
    width: '100%',
    flexFlow: 'row nowrap',
    justifyContent: 'center',
    textAlign: 'center',
    alignItems: 'center'
};
module.exports = {
    getPie: function () { return css.get(pie); },
    getBrickLine: function () { return css.get(brickLine); },
    getBrick: function (colour) { return css.get(brick, { backgroundColor: colour }); },
    getCorrectPercentage: function () { return css.get(correctPercentage); },
    getLessonsFinished: function () { return css.get(lessonsFinished); },
    getLessonsFinishedMark: function () { return css.get(lessonsFinishedMark); },
    getIconSets: function () { return css.get(iconSet); },
    getIcon: function (url) { return css.get(icon, { backgroundImage: "url(" + url + ")" }); },
    getIconNumber: function () { return css.get(iconNumber); },
    correct: css.font.color.success,
    incorrect: css.font.color.fail,
    rest: css.font.color.merge
};
},{"../../../../../utils/css/css":309}],208:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var dictionary = require('../../../../../utils/dictionary');
var React = require('react');
var CommonCss = require('../CommonCss');
var StatisticsCss = require('./StatisticsCss');
var ReactDOM = require('react-dom');
var services_1 = require('../../../../../services');
var _a = React.DOM, div = _a.div, canvas = _a.canvas;
var pie = 'pie';
function rerenderChart(apiState, region) {
    var status = apiState.lessonsCatalog.status;
    if (region) {
        var canvas_1 = region;
        var ctx = canvas_1.getContext("2d");
        var lastend = 0;
        var correct = 360 * status.allBoardsCorrect / status.allBoardsLength;
        var incorrect = 360 * status.allBoardsIncorrect / status.allBoardsLength;
        var rest = 360 - correct - incorrect;
        var data = [rest, correct, incorrect];
        var myTotal = 0;
        var myColor = [StatisticsCss.rest, StatisticsCss.correct, StatisticsCss.incorrect];
        for (var e = 0; e < data.length; e++) {
            myTotal += data[e];
        }
        for (var i = 0; i < data.length; i++) {
            ctx.fillStyle = myColor[i];
            ctx.beginPath();
            ctx.moveTo(canvas_1.width / 2, canvas_1.height / 2);
            ctx.arc(canvas_1.width / 2, canvas_1.height / 2, canvas_1.height / 2, lastend, lastend + (Math.PI * 2 * (data[i] / myTotal)), false);
            ctx.lineTo(canvas_1.width / 2, canvas_1.height / 2);
            ctx.fill();
            lastend += Math.PI * 2 * (data[i] / myTotal);
        }
    }
}
function render(apiState) {
    var status = apiState.lessonsCatalog.status;
    function getPercentStatus() {
        return div({
            style: StatisticsCss.getCorrectPercentage()
        }, status.entriesCorrectPercentage);
    }
    function getLessonsFinished() {
        return div({
            style: StatisticsCss.getLessonsFinished()
        }, div({}, dictionary.statistics.lessonsFinished + ' '), div({
            style: StatisticsCss.getLessonsFinishedMark()
        }, +status.finishedLessons));
    }
    function getIconStatistics() {
        return status.iconSetStatus.map(function (item) {
            return div({
                key: item.icon,
                style: StatisticsCss.getIconSets()
            }, div({
                style: StatisticsCss.getIcon(item.icon)
            }), div({
                style: StatisticsCss.getIconNumber()
            }, item.name));
        });
    }
    function getLegend(text, colour) {
        return div({
            style: StatisticsCss.getBrickLine()
        }, div({
            style: StatisticsCss.getBrick(colour)
        }), text);
    }
    function getBox() {
        return div({
            style: CommonCss.getBox()
        }, div({ style: CommonCss.getBoxSplitToCenter() }, div({ style: CommonCss.getBoxLine() }, dictionary.statistics.titleEntries), canvas({
            ref: pie,
            style: StatisticsCss.getPie()
        }), getPercentStatus()), div({ style: CommonCss.getBoxSplit() }, getLegend(dictionary.statistics.entriesCorrect + ' ' + status.allBoardsCorrect, StatisticsCss.correct), getLegend(dictionary.statistics.entriesIncorrect + ' ' + status.allBoardsIncorrect, StatisticsCss.incorrect), getLegend(dictionary.statistics.entriesUndane + ' ' + status.allBoardsUndane, StatisticsCss.rest)), div({
            style: CommonCss.getBoxLine()
        }, getLessonsFinished()), div({
            style: CommonCss.getBoxSplitToCenter()
        }, getIconStatistics()));
    }
    return div({
        style: CommonCss.getPanel(!apiState.pass.user.email)
    }, div({
        style: CommonCss.getContainer()
    }, getBox()));
}
var View = (function (_super) {
    __extends(View, _super);
    function View() {
        _super.call(this);
        this.state = {
            region: null
        };
    }
    View.prototype.componentDidUpdate = function () {
        var apiState = services_1.getState();
        rerenderChart(apiState, this.state.region);
    };
    View.prototype.componentDidMount = function () {
        var apiState = services_1.getState();
        this.state.region = ReactDOM.findDOMNode(this.refs[pie]);
        rerenderChart(apiState, this.state.region);
    };
    View.prototype.render = function () {
        var apiState = services_1.getState();
        return render(apiState);
    };
    return View;
})(React.Component);
;
module.exports = React.createFactory(View);
},{"../../../../../services":307,"../../../../../utils/dictionary":310,"../CommonCss":198,"./StatisticsCss":207,"react":159,"react-dom":3}],209:[function(require,module,exports){
var dictionary = require('../../../../../utils/dictionary');
var React = require('react');
var CommonCss = require('../CommonCss');
var services_1 = require('../../../../../services');
var utils_1 = require('../../../../../utils/utils');
var div = React.DOM.div;
function getTitleText(apiState) {
    var daysLeft = utils_1.howManyDaysLeft(apiState.pass.user.valid_to);
    if (daysLeft > 0) {
        var unit = Math.abs(daysLeft) === 1 ? dictionary.DAY : dictionary.DAYS;
        return dictionary.HEADER_SUBSCRIBED_VALID + ' ' + daysLeft + ' ' + unit;
    }
    return dictionary.HEADER_SUBSCRIBED_EXPIRED + apiState.pass.user.valid_to;
}
function getTitle(apiState) {
    return div({
        style: CommonCss.getText()
    }, getTitleText(apiState));
}
function render() {
    var apiState = services_1.getState();
    if (!apiState.pass.user.isPrime && !apiState.pass.user.valid_to)
        return null;
    return div({
        style: CommonCss.getPanel()
    }, div({
        style: CommonCss.getContainer()
    }, getTitle(apiState)));
}
module.exports = render;
},{"../../../../../services":307,"../../../../../utils/dictionary":310,"../../../../../utils/utils":314,"../CommonCss":198,"react":159}],210:[function(require,module,exports){
var dictionary = require('../../../../../utils/dictionary');
var React = require('react');
var CommonCss = require('../CommonCss');
var ButtonView = require('../../../../../components/button/ButtonView');
var PayPalButton_1 = require('../../../../../components/button/PayPalButton');
var services_1 = require('../../../../../services');
var utils = require('../../../../../utils/utils');
var events_1 = require('../../../../../events');
var div = React.DOM.div;
function getTitle() {
    return div({
        style: CommonCss.getText()
    }, dictionary.HEADER_SUBSCRIBING);
}
function getButtonSubmit(apiState, text, valid_to) {
    return ButtonView({
        name: text,
        isResponsibleHeight: true,
        isLoader: apiState.pass.subscribe.process,
        disabled: apiState.pass.subscribe.process,
        onClick: function () { return events_1.events.onSubscribeOnServer.publish(valid_to); }
    });
}
function getStatusText(apiState) {
    return apiState.pass.subscribe.error;
}
function getBox(apiState) {
    return div({ style: CommonCss.getBox() }, div({ style: CommonCss.getBoxSplit() }, PayPalButton_1.getPayPal({
        code: "8WMXFQDNG4H7Y",
        name: dictionary.SUBMIT_BUTTON_SUBSCRIBING_ONE_YEAR,
        user: apiState.pass.user.email,
        valid: utils.getNextYearISOdate()
    }), PayPalButton_1.getPayPal({
        code: "YPLK2MRG5WTNW",
        name: dictionary.SUBMIT_BUTTON_SUBSCRIBING_ONE_MONTH,
        user: apiState.pass.user.email,
        valid: utils.getNextMonthISOdate()
    }), PayPalButton_1.getPayPal({
        code: "AD64JSC44JR66",
        name: dictionary.SUBMIT_BUTTON_SUBSCRIBING_ONE_WEEK,
        user: apiState.pass.user.email,
        valid: utils.getNext7DaysISOdate()
    }), apiState.isProduction ? null : PayPalButton_1.getPayPal({
        code: "4PBFNAL7VPDDG",
        name: '1p subscription test',
        user: apiState.pass.user.email,
        valid: utils.getNext7DaysISOdate()
    }), apiState.isProduction ? null : getButtonSubmit(apiState, '0p subscription test', utils.getNext7DaysISOdate()), div({ style: CommonCss.getBoxLine(true) }, getStatusText(apiState)), div({ style: CommonCss.getText() }, dictionary.SUBSCRIBING_EXPLANATION)));
}
function render() {
    var apiState = services_1.getState();
    if (!apiState.pass.login.success || apiState.pass.user.isPrime)
        return null;
    return div({
        style: CommonCss.getPanel()
    }, div({
        style: CommonCss.getContainer()
    }, getTitle(), getBox(apiState)));
}
module.exports = render;
},{"../../../../../components/button/ButtonView":189,"../../../../../components/button/PayPalButton":190,"../../../../../events":215,"../../../../../services":307,"../../../../../utils/dictionary":310,"../../../../../utils/utils":314,"../CommonCss":198,"react":159}],211:[function(require,module,exports){
var Bezier = (function () {
    function Bezier(startPoint, control1, control2, endPoint) {
        this.startPoint = startPoint;
        this.control1 = control1;
        this.control2 = control2;
        this.endPoint = endPoint;
        this.startPoint = startPoint;
        this.control1 = control1;
        this.control2 = control2;
        this.endPoint = endPoint;
    }
    Bezier.prototype.length = function () {
        var steps = 10, length = 0, i, t, cx, cy, px, py, xdiff, ydiff;
        for (i = 0; i <= steps; i++) {
            t = i / steps;
            cx = this._point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);
            cy = this._point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);
            if (i > 0) {
                xdiff = cx - px;
                ydiff = cy - py;
                length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);
            }
            px = cx;
            py = cy;
        }
        return length;
    };
    Bezier.prototype._point = function (t, start, c1, c2, end) {
        return start * (1.0 - t) * (1.0 - t) * (1.0 - t)
            + 3.0 * c1 * (1.0 - t) * (1.0 - t) * t
            + 3.0 * c2 * (1.0 - t) * t * t
            + end * t * t * t;
    };
    return Bezier;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Bezier;
},{}],212:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var ReactDOM = require('react-dom');
var bezier_1 = require("./bezier");
var Point = require("./point");
var css = require('../../utils/css/css');
var SignaturePad = (function (_super) {
    __extends(SignaturePad, _super);
    function SignaturePad(props) {
        _super.call(this, props);
        this.id = props.id;
        this.velocityFilterWeight = props.velocityFilterWeight || 0.7;
        this.minWidth = props.minWidth || 0.5;
        this.maxWidth = props.maxWidth || 2.5;
        this.dotSize = props.dotSize || function () {
            return (this.minWidth + this.maxWidth) / 2;
        };
        this.penColor = props.penColor || "white";
        this.backgroundColor = props.backgroundColor || "rgba(0,0,0,0)";
        this.onEnd = props.onEnd;
        this.onBegin = props.onBegin;
        this.clear = this.clear.bind(this);
    }
    SignaturePad.prototype.componentDidMount = function () {
        this._canvas = ReactDOM.findDOMNode(this.refs["cv"]);
        this._ctx = this._canvas.getContext("2d");
        this._handleMouseEvents();
        this._handleTouchEvents();
        this.clear();
        this.props.onGetInterface(this.clear);
    };
    SignaturePad.prototype.componentWillUnmount = function () {
        this.off();
    };
    SignaturePad.prototype.componentWillReceiveProps = function (props) {
        if (props.id !== this.id) {
            this.id = props.id;
            this.clear();
        }
    };
    SignaturePad.prototype.clear = function (e) {
        if (e) {
            e.preventDefault();
        }
        var ctx = this._ctx;
        var canvas = this._canvas;
        ctx.fillStyle = "rgba(0,0,0,0)";
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        this._reset();
        this._resizeCanvas();
    };
    SignaturePad.prototype.toDataURL = function (imageType, quality) {
        var canvas = this._canvas;
        return canvas.toDataURL.apply(canvas, arguments);
    };
    SignaturePad.prototype.fromDataURL = function (dataUrl) {
        var self = this, image = new Image(), ratio = window.devicePixelRatio || 1, width = this._canvas.width / ratio, height = this._canvas.height / ratio;
        this._reset();
        image.src = dataUrl;
        image.onload = function () {
            self._ctx.drawImage(image, 0, 0, width, height);
        };
        this._isEmpty = false;
    };
    SignaturePad.prototype.isEmpty = function () {
        return this._isEmpty;
    };
    SignaturePad.prototype._resizeCanvas = function () {
        var ctx = this._ctx;
        var canvas = this._canvas;
        var ratio = Math.max(window.devicePixelRatio || 1, 1);
        canvas.width = canvas.offsetWidth * ratio;
        canvas.height = canvas.offsetHeight * ratio;
        ctx.scale(ratio, ratio);
    };
    SignaturePad.prototype._reset = function () {
        this.points = [];
        this._lastVelocity = 0;
        this._lastWidth = (this.minWidth + this.maxWidth) / 2;
        this._isEmpty = true;
        this._ctx.fillStyle = this.penColor;
    };
    ;
    SignaturePad.prototype._handleMouseEvents = function () {
        this._mouseButtonDown = false;
        this._canvas.addEventListener("mousedown", this._handleMouseDown.bind(this));
        this._canvas.addEventListener("mousemove", this._handleMouseMove.bind(this));
        document.addEventListener("mouseup", this._handleMouseUp.bind(this));
        window.addEventListener("resize", this.clear.bind(this));
    };
    ;
    SignaturePad.prototype._handleTouchEvents = function () {
        this._canvas.style.msTouchAction = 'none';
        this._canvas.addEventListener("touchstart", this._handleTouchStart.bind(this));
        this._canvas.addEventListener("touchmove", this._handleTouchMove.bind(this));
        document.addEventListener("touchend", this._handleTouchEnd.bind(this));
    };
    ;
    SignaturePad.prototype.off = function () {
        this._canvas.removeEventListener("mousedown", this._handleMouseDown);
        this._canvas.removeEventListener("mousemove", this._handleMouseMove);
        document.removeEventListener("mouseup", this._handleMouseUp);
        this._canvas.removeEventListener("touchstart", this._handleTouchStart);
        this._canvas.removeEventListener("touchmove", this._handleTouchMove);
        document.removeEventListener("touchend", this._handleTouchEnd);
        window.removeEventListener("resize", this._resizeCanvas);
    };
    SignaturePad.prototype._handleMouseDown = function (event) {
        if (event.which === 1) {
            this._mouseButtonDown = true;
            this._strokeBegin(event);
        }
    };
    ;
    SignaturePad.prototype._handleMouseMove = function (event) {
        if (this._mouseButtonDown) {
            this._strokeUpdate(event);
        }
    };
    ;
    SignaturePad.prototype._handleMouseUp = function (event) {
        if (event.which === 1 && this._mouseButtonDown) {
            this._mouseButtonDown = false;
            this._strokeEnd(event);
        }
    };
    ;
    SignaturePad.prototype._handleTouchStart = function (event) {
        var touch = event.changedTouches[0];
        this._strokeBegin(touch);
    };
    ;
    SignaturePad.prototype._handleTouchMove = function (event) {
        event.preventDefault();
        var touch = event.changedTouches[0];
        this._strokeUpdate(touch);
    };
    ;
    SignaturePad.prototype._handleTouchEnd = function (event) {
        var wasCanvasTouched = event.target === this._canvas;
        if (wasCanvasTouched) {
            this._strokeEnd(event);
        }
    };
    ;
    SignaturePad.prototype._strokeUpdate = function (event) {
        var point = this._createPoint(event);
        this._addPoint(point);
    };
    ;
    SignaturePad.prototype._strokeBegin = function (event) {
        this._reset();
        this._strokeUpdate(event);
        if (typeof this.onBegin === 'function') {
            this.onBegin(event);
        }
    };
    ;
    SignaturePad.prototype._strokeDraw = function (point) {
        var ctx = this._ctx, dotSize = typeof (this.dotSize) === 'function' ? this.dotSize() : this.dotSize;
        ctx.beginPath();
        this._drawPoint(point.x, point.y, dotSize);
        ctx.closePath();
        ctx.fill();
    };
    ;
    SignaturePad.prototype._strokeEnd = function (event) {
        var canDrawCurve = this.points.length > 2, point = this.points[0];
        if (!canDrawCurve && point) {
            this._strokeDraw(point);
        }
        if (typeof this.onEnd === 'function') {
            this.onEnd(event);
        }
    };
    ;
    SignaturePad.prototype._createPoint = function (event) {
        var rect = this._canvas.getBoundingClientRect();
        return new Point(event.clientX - rect.left, event.clientY - rect.top, null);
    };
    ;
    SignaturePad.prototype._addPoint = function (point) {
        var points = this.points, c2, c3, curve, tmp;
        points.push(point);
        if (points.length > 2) {
            if (points.length === 3)
                points.unshift(points[0]);
            tmp = this._calculateCurveControlPoints(points[0], points[1], points[2]);
            c2 = tmp.c2;
            tmp = this._calculateCurveControlPoints(points[1], points[2], points[3]);
            c3 = tmp.c1;
            curve = new bezier_1.default(points[1], c2, c3, points[2]);
            this._addCurve(curve);
            points.shift();
        }
    };
    SignaturePad.prototype._calculateCurveControlPoints = function (s1, s2, s3) {
        var dx1 = s1.x - s2.x, dy1 = s1.y - s2.y, dx2 = s2.x - s3.x, dy2 = s2.y - s3.y, m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 }, m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 }, l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1), l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2), dxm = (m1.x - m2.x), dym = (m1.y - m2.y), k = l2 / (l1 + l2), cm = { x: m2.x + dxm * k, y: m2.y + dym * k }, tx = s2.x - cm.x, ty = s2.y - cm.y;
        return {
            c1: new Point(m1.x + tx, m1.y + ty, null),
            c2: new Point(m2.x + tx, m2.y + ty, null)
        };
    };
    ;
    SignaturePad.prototype._addCurve = function (curve) {
        var startPoint = curve.startPoint, endPoint = curve.endPoint, velocity, newWidth;
        velocity = endPoint.velocityFrom(startPoint);
        velocity = this.velocityFilterWeight * velocity
            + (1 - this.velocityFilterWeight) * this._lastVelocity;
        newWidth = this._strokeWidth(velocity);
        this._drawCurve(curve, this._lastWidth, newWidth);
        this._lastVelocity = velocity;
        this._lastWidth = newWidth;
    };
    ;
    SignaturePad.prototype._drawPoint = function (x, y, size) {
        var ctx = this._ctx;
        ctx.moveTo(x, y);
        ctx.arc(x, y, size, 0, 2 * Math.PI, false);
        this._isEmpty = false;
    };
    ;
    SignaturePad.prototype._drawCurve = function (curve, startWidth, endWidth) {
        var ctx = this._ctx, widthDelta = endWidth - startWidth, drawSteps, width, i, t, tt, ttt, u, uu, uuu, x, y;
        drawSteps = Math.floor(curve.length());
        ctx.beginPath();
        for (i = 0; i < drawSteps; i++) {
            t = i / drawSteps;
            tt = t * t;
            ttt = tt * t;
            u = 1 - t;
            uu = u * u;
            uuu = uu * u;
            x = uuu * curve.startPoint.x;
            x += 3 * uu * t * curve.control1.x;
            x += 3 * u * tt * curve.control2.x;
            x += ttt * curve.endPoint.x;
            y = uuu * curve.startPoint.y;
            y += 3 * uu * t * curve.control1.y;
            y += 3 * u * tt * curve.control2.y;
            y += ttt * curve.endPoint.y;
            width = startWidth + ttt * widthDelta;
            this._drawPoint(x, y, width);
        }
        ctx.closePath();
        ctx.fill();
    };
    ;
    SignaturePad.prototype._strokeWidth = function (velocity) {
        return Math.max(this.maxWidth / (velocity + 1), this.minWidth);
    };
    ;
    SignaturePad.prototype.render = function () {
        var size = css.getSize();
        return React.DOM.canvas({
            ref: 'cv',
            style: {
                display: 'flex',
                flexGrow: 1,
                width: size.x - 5,
                height: size.y - 150,
                cursor: 'pointer',
                backgroundColor: this.props.backgroundColor
            }
        });
    };
    return SignaturePad;
})(React.Component);
module.exports = React.createFactory(SignaturePad);
},{"../../utils/css/css":309,"./bezier":211,"./point":213,"react":159,"react-dom":3}],213:[function(require,module,exports){
var Point = (function () {
    function Point(x, y, time) {
        this.x = x;
        this.y = y;
        this.time = time;
        this.x = x;
        this.y = y;
        this.time = time || new Date().getTime();
    }
    Point.prototype.velocityFrom = function (start) {
        return (this.time !== start.time) ? this.distanceTo(start) / (this.time - start.time) : 1;
    };
    ;
    Point.prototype.distanceTo = function (start) {
        return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));
    };
    ;
    return Point;
})();
module.exports = Point;
},{}],214:[function(require,module,exports){
function VoidEventFactory(diagnosticName) {
    var e = EventFactory(diagnosticName);
    var publish = function () { return e.publish(undefined); };
    return { publish: publish, subscribe: e.subscribe };
}
exports.VoidEventFactory = VoidEventFactory;
function EventFactory(diagnosticName) {
    var handlers = [];
    function subscribe(handler) {
        handlers.push(handler);
        return function () { return unsubscribe(handler); };
    }
    function unsubscribe(handler) {
        handlers = handlers.filter(function (h) { return h !== handler; });
    }
    function publish(payload) {
        handlers.forEach(function (handler) {
            handler(payload);
        });
    }
    function logError(err, payload) {
        var payloadStr = payload && Object.keys(payload).join(',');
        payloadStr = JSON.stringify(payload);
    }
    return {
        subscribe: subscribe,
        publish: publish
    };
}
exports.EventFactory = EventFactory;
},{}],215:[function(require,module,exports){
var factory_1 = require('./factory');
exports.unsubscribe = function (unsubscribes) { return unsubscribes && unsubscribes.forEach(function (u) { return u(); }); };
exports.events = {
    scrollPosition: factory_1.EventFactory('scrollPosition'),
    onLogin: factory_1.EventFactory('onLogin'),
    onLogOut: factory_1.VoidEventFactory('onLogOut'),
    onToogleRegisterView: factory_1.VoidEventFactory('onToogleRegisterView'),
    onRegisterOnServer: factory_1.EventFactory('onRegisterOnServer'),
    onSubscribeOnServer: factory_1.EventFactory('onSubscribeOnServer'),
    readEvent: factory_1.EventFactory('readEvent'),
    saveStatusBoardEvent: factory_1.EventFactory('saveStatusBoardEvent'),
    closeStatusBoardEvent: factory_1.VoidEventFactory('closeStatusBoardEvent'),
    goTest: factory_1.VoidEventFactory('goTest'),
    showRootMenu: factory_1.VoidEventFactory('showRootMenu'),
    rootMenuEvent: factory_1.EventFactory('rootMenuEvent'),
    loadNewLessonEvent: factory_1.EventFactory('loadNewLessonEvent'),
    onNextBoard: factory_1.VoidEventFactory('onNextBoard'),
    onNextRandomBoard: factory_1.VoidEventFactory('onNextRandomBoard'),
    onPrevBoard: factory_1.VoidEventFactory('onPrevBoard'),
    onChoosePicture: factory_1.EventFactory('onChoosePicture'),
    onChooseRadio: factory_1.EventFactory('onChooseRadio'),
    onChooseOneTwoThree: factory_1.EventFactory('onChooseOneTwoThree'),
    onChooseMultiRadio: factory_1.EventFactory('onChooseMultiRadio'),
    onToogleSupportHelp: factory_1.VoidEventFactory('onToogleSupportHelp'),
};
exports.renderEvent = factory_1.VoidEventFactory('renderEvent');
},{"./factory":214}],216:[function(require,module,exports){
var ReactDOM = require('react-dom');
var Layout = require('./layout/Layout');
var utils = require('../utils/utils');
var events_1 = require('../events');
var Home = (function () {
    function Home(el) {
        this.el = el;
        this.subscribers = [];
        this.component = null;
        utils.keys();
        this.component = ReactDOM.render(Layout(), this.el);
        this.subscribers = [
            events_1.renderEvent.subscribe(this.onChange.bind(this))
        ];
    }
    Home.prototype.onChange = function () {
        console.log('render');
        this.component && this.component.setState({});
    };
    return Home;
})();
module.exports = Home;
},{"../events":215,"../utils/utils":314,"./layout/Layout":217,"react-dom":3}],217:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var SettingsRootView = require('../../components/settings/SettingsRootView');
var BoardView = require('../../components/board/BoardView');
var div = React.DOM.div;
var Layout = (function (_super) {
    __extends(Layout, _super);
    function Layout() {
        _super.call(this);
    }
    Layout.prototype.render = function () {
        return div({}, BoardView(), SettingsRootView());
    };
    return Layout;
})(React.Component);
;
module.exports = React.createFactory(Layout);
},{"../../components/board/BoardView":166,"../../components/settings/SettingsRootView":193,"react":159}],218:[function(require,module,exports){
var constants_1 = require('../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.fourPictures];
var s = 'img/animals/';
var a = {
    camel: s + 'camel.png',
    cat: s + 'cat.png',
    cow: s + 'cow.png',
    donky: s + 'donky.png',
    lamb: s + 'lamb.png',
    lion: s + 'lion.png',
    rat: s + 'rat.png',
    rabbit: s + 'rabbit.png',
    tiger: s + 'tiger.png',
    wolf: s + 'wolf.png',
};
var title = 'Animals';
exports.title = title;
var info = 'Choose the correct animal.';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Camel',
        correct: [a.camel],
        incorrect: constants_1.getRest(a, a.camel),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Cat',
        correct: [a.cat],
        incorrect: constants_1.getRest(a, a.cat),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Cow",
        correct: [a.cow],
        incorrect: constants_1.getRest(a, a.cow),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Donkey",
        correct: [a.donky],
        incorrect: constants_1.getRest(a, a.donky),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Lamb",
        correct: [a.lamb],
        incorrect: constants_1.getRest(a, a.lamb),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Lion",
        correct: [a.lion],
        incorrect: constants_1.getRest(a, a.lion),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Rat",
        correct: [a.rat],
        incorrect: constants_1.getRest(a, a.rat),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Rabbit",
        correct: [a.rabbit],
        incorrect: constants_1.getRest(a, a.rabbit),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Tiger",
        correct: [a.tiger],
        incorrect: constants_1.getRest(a, a.tiger),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Wolf",
        correct: [a.wolf],
        incorrect: constants_1.getRest(a, a.wolf),
    }
];
exports.lessons = lessons;
},{"../helper/constants":226,"./explenation":219}],219:[function(require,module,exports){
var renderer_1 = require('../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "",
    list: [
        { l: "Camel" },
        { l: "Cat" },
        { l: "Cow" },
        { l: "Donkey" },
        { l: "Lamb" },
        { l: "Lion" },
        { l: "Rat" },
        { l: "Rabbit" },
        { l: "Tiger" },
        { l: "Wolf" },
    ]
}));
module.exports = {
    exp: exp
};
},{"../helper/renderer":227}],220:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio, constants_1.TypeId.analogTime];
var title = 'What time is it?';
exports.title = title;
var info = 'Choose the correct time.';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "11:50",
        correct: ["It's ten to twelve."],
        incorrect: ["It's ten past eleven.", "It's ten past twelve."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "06:15",
        correct: ["It's a quarter past six."],
        incorrect: ["It's half past three.", "It's a quarter to six."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "03:55",
        correct: ["It's five to four."],
        incorrect: ["It's five past three.", "It's five past four."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "08:40",
        correct: ["It's twenty to nine."],
        incorrect: ["It's nine to twenty.", "It's twenty past eight."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "04:45",
        correct: ["It's a quarter to five."],
        incorrect: ["It's a quarter past five.", "It's a quarter past four."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "02:25",
        correct: ["It's twenty-five past two."],
        incorrect: ["It's twenty-five to two.", "It's half past two."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "01:10",
        correct: ["It's ten past one."],
        incorrect: ["It's one to ten.", "It's one past ten.", "It's ten to one."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "01:30",
        correct: ["It's half past one."],
        incorrect: ["It's one past half.", "It's half to one.", "It's one to half."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "01:45",
        correct: ["It's quarter to two."],
        incorrect: ["It's quarter past two.", "It's quarter past one.", "It's quarter to one."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "02:00",
        correct: ["It's two o'clock."],
        incorrect: ["It's o'clock past two.", "It's twelve past two.", "It's two past twelve."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "02:21",
        correct: ["It's twenty-one past two."],
        incorrect: ["It's twenty-one to two.", "It's two past twenty-one.", "It's two to twenty-one."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "03:05",
        correct: ["It's five past three."],
        incorrect: ["It's three to five.", "It's three past five.", "It's five to three."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "04:20",
        correct: ["It's twenty past four."],
        incorrect: ["It's four past twenty.", "It's twenty to four.", "It's twenty to five."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "05:35",
        correct: ["It's twenty-five to six."],
        incorrect: ["It's twenty-five past six.", "It's twenty-five past five.", "It's twenty-five to five."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "04:50",
        correct: ["It's ten to five."],
        incorrect: ["It's ten past five.", "It's five to six.", "It's five past ten."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "08:15",
        correct: ["It's quarter past eight."],
        incorrect: ["It's quarter to eight.", "It's eight past fifteen.", "It's quarter to fifteen."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "05:00",
        correct: ["It's five o'clock."],
        incorrect: ["It's five past twelve.", "It's zero past five.", "It's five past zero.", "It's zero o'clock."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "06:30",
        correct: ["It's half past six."],
        incorrect: ["It's six o'clock.", "It's half past to six.", "It's half past seven."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "06:40",
        correct: ["It's twenty to seven."],
        incorrect: ["It's twenty past seven.", "It's twenty to six.", "It's twenty past six."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "07:55",
        correct: ["It's five to eight."],
        incorrect: ["It's five to seven.", "It's eight past five.", "It's five past eight."],
    },
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":223}],221:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.draw, constants_1.TypeId.digitalTime];
var title = 'What time is it?';
exports.title = title;
var info = 'Write the correct time.';
var isHelp = true;
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's quarter to two.",
        correct: ["01:45"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's twelve o'clock.",
        correct: ["12:00"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's twenty-five past ten.",
        correct: ["10:25"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's five past six.",
        correct: ["06:05"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's five to seven.",
        correct: ["06:55"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's ten past eight.",
        correct: ["08:10"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's half past eleven.",
        correct: ["11:30"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's twenty to two.",
        correct: ["01:40"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's twenty past nine.",
        correct: ["09:20"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's quarter past three.",
        correct: ["03:30"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's quarter past three.",
        correct: ["03:15"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's five to four.",
        correct: ["03:55"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's five past five.",
        correct: ["05:05"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's ten to ten.",
        correct: ["09:50"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's twenty to eight.",
        correct: ["07:40"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's three o'clock.",
        correct: ["01:00"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's five past three.",
        correct: ["03:05"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's half past five.",
        correct: ["05:30"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's twenty-five to ten.",
        correct: ["09:35"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, isHelp: isHelp,
        name: "It's quarter to four.",
        correct: ["03:45"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":223}],222:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.fourWords, constants_1.TypeId.digitalTime];
var title = 'What time is it?';
exports.title = title;
var info = 'Choose the correct time.';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's twenty-five past ten.",
        correct: ["10:25"],
        incorrect: ["10:35", "10:45", "09:25", "09:35", "05:25"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's quarter to four.",
        correct: ["03:45"],
        incorrect: ["03:15", "04:15", "03:30", "03:40", "04:45"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's five past six.",
        correct: ["06:05"],
        incorrect: ["05:06", "06:55", "04:55", "06:50", "04:05"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's twelve o'clock.",
        correct: ["12:00"],
        incorrect: ["00:00", "00:12", "12:06", "01:00", "12:30"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's five to six.",
        correct: ["05:55"],
        incorrect: ["06:55", "05:05", "05:06", "06:05", "06:15"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's ten past nine.",
        correct: ["09:10"],
        incorrect: ["08:10", "10:09", "09:50", "08:50", "09:20"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's twenty to nine.",
        correct: ["08:40"],
        incorrect: ["08:20", "09:20", "20:09", "08:50", "09:29"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's ten to ten.",
        correct: ["09:50"],
        incorrect: ["10:50", "10:10", "09:10", "09:05"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's half past four.",
        correct: ["04:30"],
        incorrect: ["03:30", "04:15", "03:04", "00:34", "03:15"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's twenty-five to nine.",
        correct: ["08:35"],
        incorrect: ["09:35", "09:25", "08:25", "05:09", "10:35"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's twenty to eight.",
        correct: ["07:40"],
        incorrect: ["08:40", "07:20", "02:08", "08:20", "07:02"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's twenty past six.",
        correct: ["06:20"],
        incorrect: ["02:06", "06:06", "02:20", "05:40", "05:20"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's quarter past three.",
        correct: ["03:30"],
        incorrect: ["03:15", "04:30", "15:30", "03:45", "03:03"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's quarter past four.",
        correct: ["04:15"],
        incorrect: ["03:15", "04:30", "15:40", "04:45", "03:45"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's five to four.",
        correct: ["03:55"],
        incorrect: ["04:05", "03:50", "04:50", "05:04", "04:55"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's five past four.",
        correct: ["04:05"],
        incorrect: ["05:05", "03:55", "04:50", "3:55", "04:15", "05:04"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's one o'clock.",
        correct: ["01:00"],
        incorrect: ["02:00", "12:00", "00:01", "10:00"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's half past eleven.",
        correct: ["11:30"],
        incorrect: ["12:30", "10:30", "03:30", "11:15"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's quarter to one.",
        correct: ["12:45"],
        incorrect: ["01:45", "01:30", "01:15", "12:15"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "It's five past two.",
        correct: ["02:05"],
        incorrect: ["01:05", "02:55", "02:50", "1:55", "02:15"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":223}],223:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exports.exp = exp;
exp.push(renderer_1.tList({
    t: "6:00",
    list: [
        { l: "It's 6 o'clock." },
        { l: "" },
    ]
}));
exp.push(renderer_1.tList({
    t: "6:05",
    list: [
        { l: "It's 5 <p>past</p> 6." },
        { l: "It's six oh five." },
    ]
}));
exp.push(renderer_1.tList({
    t: "6:15",
    list: [
        { l: "It's quarter <p>past</p> 6." },
        { l: "It's six fifteen." },
    ]
}));
exp.push(renderer_1.tList({
    t: "6:30",
    list: [
        { l: "It's half <p>past</p> 6." },
        { l: "It's six thirty." },
    ]
}));
exp.push(renderer_1.tList({
    t: "6:35",
    list: [
        { l: "It's 25 <p>to</p> 7." },
        { l: "It's six thirty-five." },
    ]
}));
exp.push(renderer_1.tList({
    t: "6:45",
    list: [
        { l: "It's quarter <p>to</p> seven." },
        { l: "It's six forty-five." },
    ]
}));
exp.push(renderer_1.tList({
    t: "6:55",
    list: [
        { l: "It's 5 to 7." },
        { l: "It's six fifty-five." },
    ]
}));
exp.push(renderer_1.tList({
    t: "7:00",
    list: [
        { l: "It's 7 o'clock." },
    ]
}));
exp.push(renderer_1.tList({
    t: "Remember",
    list: [
        { eq: ["quarter", "15 minutes"] },
        { eq: ["half", "30 minutes"] },
        { eq: ["o'clock", "of the clock"] }
    ]
}));
exp.push(renderer_1.tList({
    t: "The 12-hour-system in English",
    list: [
        { to: ["<p>Germany</p>", "<p>England</p>"] },
        { mute_to: ["0:00", "midnight"] },
        { mute_to: ["0:01", "12:01 a.m."] },
        { mute_to: ["8:00", "8:00 a.m."] },
        { mute_to: ["12:00", "noon"] },
        { mute_to: ["12:01", "12:01 p.m."] },
        { mute_to: ["14:00", "2 p.m."] },
        { mute_to: ["18:00", "6 p.m."] },
        { mute_to: ["23:59", "11:59 p.m."] }
    ]
}));
},{"../../helper/renderer":227}],224:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "<p>up</p> - <p>down</p>",
    list: [
        { l: "My house is <p>up</p> the road." },
        { l: "My friend lives <p>down</p> the river." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>everywhere</p> - <p>nowhere</p>",
    list: [
        { l: "You can find mushrooms <p>everywhere</p>." },
        { l: "Birds of paradise live in Papua New Guinea and <p>nowhere</p> else." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>(in) indoors</p> - <p>(out) outdoors</p>",
    list: [
        { l: "He worked <p>indoors</p> all afternoon." },
        { l: "Let's play badminton <p>outdoors</p>." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>here</p> - <p>there</p>",
    list: [
        { l: "Come <p>here</p> and give me that book." },
        { i: "<p>Here</p> is used to locate something which is near, within the range of one's vision." },
        { s: " " },
        { l: "Go over <p>there</p> and get that book." },
        { i: "<p>There</p> is used to locate something which is far, out of the range of one's vision." }
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>off</p>",
    list: [
        { l: "The ship sank 10 miles <p>off</p> the shore." },
        { l: "<p>Off</p> the normal route, he discovered new restaurants." }
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>from</p>",
    list: [
        { l: "The ambush occurred 50 metres <p>from</p> a checkpoint." },
        { l: "We walked <p>from</p> George Street to Park Avenue." }
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>away</p>",
    list: [
        { l: "We can cycle there. It's only 2 miles <p>away</p>." },
        { l: "The music faded <p>away</p>." }
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>beyond</p>",
    list: [
        { l: "Pushing the laws to their limits and <p>beyond</p>." },
        { l: "She longed to go to the next village and <p>beyond</p>." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>on top of</p>",
    list: [
        { l: "This book goes <p>on the top</p> shelf." },
        { l: "A town perched <p>on top of</p> a hill." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>in the centre (middle of)</p>",
    list: [
        { l: "There is a nice park <p>in the center of</p> the town." },
        { l: "The chandelier <p>in centre of</p> the ceiling." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>at the bottom of</p>",
    list: [
        { l: "Please write your name <p>at the bottom of</p> this paper." },
        { l: "The strange creature found <p>at the bottom of</p> the sea." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>ahead of</p>",
    list: [
        { l: "Tom sat two rows <p>ahead of</p> me." },
        { l: "She walked <p>ahead of</p> him along the corridor." }
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>at the front of</p> - <p>at the back</p> - <p>at the rear of</p>",
    list: [
        { l: "I found my tennis racket <p>at the back of</p> the cupboard." },
        { l: "We sat <p>at the back of</p> the bus." },
        { s: " " },
        { l: "Katherine stood <p>at the back of</p> the room." },
        { s: " " },
        { l: "The field <p>at the rear of</p> the church." },
        { l: "The kitchen door <p>at the rear of</p> the house." }
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>parallel</p> - <p>perpendicular</p> - <p>at an angle</p>",
    list: [
        { l: "Draw this line <p>parallel</p> to that one." },
        { i: "Lines are parallel if they are always the same distance apart." },
        { s: " " },
        { l: "This building is <p>perpendicular</p> to the ground." },
        { i: "It just means at right angles (90°) to." },
        { s: " " },
        { l: "She wore her beret <p>at an angle</p>." },
        { i: "In a direction different from parallel, vertical, or horizontal." }
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>in front of</p> - <p>behind</p>",
    list: [
        { l: "The letter box is <p>in front of</p> the bank." },
        { l: "She is hiding <p>behind</p> the fence." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>opposite</p> - <p>across</p>",
    list: [
        { l: "Our son was sitting <p>opposite<p> us on the train." },
        { l: "Our son was sitting <p>across from</p> us on the train." },
        { i: "Opposite is never used with 'of'." },
        { l: "The park is <p>opposite</p> the school." },
        { l: "They're building a new bridge <p>across</p> the river." },
        { l: "She walked <p>across</p> the field." },
        { l: "He folded his arms <p>across</p> his chest." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>below</p> - <p>under</p> - <p>above</p> - <p>over</p>",
    list: [
        { l: "Write your name <p>below</p> the line." },
        { l: "The letter is <p>under</p> the book." },
        { l: "Look at the sentence <p>above</p>." },
        { l: "She is wearing a shawl <p>over</p> her shoulders." },
    ]
}));
exp.push(renderer_1.tList({
    t: "Cardinal direction",
    list: [
        { l: "north" },
        { l: "east" },
        { l: "west" },
        { l: "south" },
        { s: " " },
        { l: "Asia is <p>east</p> of Europe." },
        { l: "Europe is <p>west</p> of Asia" },
    ]
}));
exp.push(renderer_1.tList({
    t: "",
    list: [
        { l: "worldwide" },
        { l: "nationwide" },
        { l: "local" },
        { l: "global, universal" },
        { l: "widespread" },
        { l: "eastern" },
        { l: "western" },
        { l: "northern" },
        { l: "southern" },
        { s: " " },
        { l: "She achieved worldwide fame." },
        { l: "We are having nationwide elections." },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],225:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var _ = require("underscore");
var title = 'Location';
exports.title = title;
var info = 'Choose the right answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: constants_1.capital.places.Barcelona + " is " + constants_1.space + " of " + constants_1.capital.countries.Spain + ".",
        correct: ["in the east"],
        incorrect: ["the bottom", "across", "on top", "above"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The divers found a shipwreck " + constants_1.space + " of the sea.",
        correct: ["at the bottom"],
        incorrect: ["in the centre", "across", "down"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The house stood at " + constants_1.space + " the green hill.",
        correct: ["the top of"],
        incorrect: ["there", "above", "up", "opposite", "away"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "We spent all morning " + constants_1.space + ", picking mushrooms in the woods.",
        correct: ["outdoors"],
        incorrect: ["opposite", "at the front of", "nowhere", "beyond"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The ship sank " + _.sample([2, 200, 165, 202, 3, 18, 22, 55, 700]) + " miles " + constants_1.space + " the shore.",
        correct: ["off"],
        incorrect: ["below", "away", "outdoors", "local", "western", "northern", "worldwide"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "We stayed " + constants_1.space + " because it was raining all day.",
        correct: ["indoors"],
        incorrect: ["north", "ahead of", "outdoors", "local", "western", "eastern"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The library is right there, " + constants_1.space + " the street.",
        correct: ["across"],
        incorrect: ["south", "away", "below", "rear of"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "There is a narrow alley at " + constants_1.space + " to the main street.",
        correct: ["an angle"],
        incorrect: ["parallel to", "perpendicular to", "in front of"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The tower stands " + constants_1.space + " of the city.",
        correct: ["in the centre"],
        incorrect: ["from", "in here", "up"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "You can find this brand only in that store and " + constants_1.space + " else.",
        correct: ["nowhere"],
        incorrect: ["everywhere", "there", "here"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The dog sat " + constants_1.space + " " + constants_1.getNameFemale() + ".",
        correct: ["beside"],
        incorrect: ["from", "off", "northern", "there"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The fish swims " + constants_1.space + " the surface of the water.",
        correct: ["below"],
        incorrect: ["above", "in", "down", "worldwide"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The baby is " + constants_1.space + " the blanket.",
        correct: ["under"],
        incorrect: ["off", "nowhere", "there", "up"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "He is sitting " + constants_1.space + " the computer.",
        correct: ["in front of"],
        incorrect: ["in the centre", "outdoors", "indoors", "down", "up"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "My keys are " + constants_1.space + " my bag.",
        correct: ["in"],
        incorrect: ["in the centre", "widespread", "indoors", "nationwide"],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Write your name " + constants_1.space + " the line.",
        correct: ["below"],
        incorrect: ["from", "south", "away", "in "],
    },
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "There is a large garden at the " + constants_1.space + " the property.",
        correct: ["back of"],
        incorrect: ["behind", "beyond", "below", "opposite"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":224,"underscore":160}],226:[function(require,module,exports){
var _ = require('underscore');
exports.space = '___';
exports.multi = '−';
exports.empty = '_';
(function (TypeId) {
    TypeId[TypeId["fourPictures"] = 1] = "fourPictures";
    TypeId[TypeId["fourWords"] = 2] = "fourWords";
    TypeId[TypeId["oneTwoThree"] = 3] = "oneTwoThree";
    TypeId[TypeId["radio"] = 4] = "radio";
    TypeId[TypeId["multiRadio"] = 5] = "multiRadio";
    TypeId[TypeId["inradio"] = 6] = "inradio";
    TypeId[TypeId["draw"] = 7] = "draw";
    TypeId[TypeId["digitalTime"] = 8] = "digitalTime";
    TypeId[TypeId["analogTime"] = 9] = "analogTime";
    TypeId[TypeId["areRepeated"] = 10] = "areRepeated";
    TypeId[TypeId["noSpace"] = 11] = "noSpace";
    TypeId[TypeId["multiAnswer"] = 12] = "multiAnswer";
})(exports.TypeId || (exports.TypeId = {}));
var TypeId = exports.TypeId;
function getDefaultUser(apiState) {
    return {
        name: apiState.isProduction ? '' : 'kamil',
        email: apiState.isProduction ? '' : 'kamil.praczyk1@gmail.com',
        password: apiState.isProduction ? '' : 'kamil'
    };
}
exports.getDefaultUser = getDefaultUser;
exports.isId = {
    isOneTwoThree: function (id) { return _.contains(id, TypeId.oneTwoThree); },
    isRadio: function (id) { return _.contains(id, TypeId.radio); },
    isMultiRadio: function (id) { return _.contains(id, TypeId.multiRadio); },
    isInradio: function (id) { return _.contains(id, TypeId.inradio); },
    isDraw: function (id) { return _.contains(id, TypeId.draw); },
    isFourPictures: function (id) { return _.contains(id, TypeId.fourPictures); },
    isFourWords: function (id) { return _.contains(id, TypeId.fourWords); },
    isDigitalTime: function (id) { return _.contains(id, TypeId.digitalTime); },
    isAnalogTime: function (id) { return _.contains(id, TypeId.analogTime); },
    isNoSpace: function (id) { return _.contains(id, TypeId.noSpace); },
    isRepeated: function (id) { return _.contains(id, TypeId.areRepeated); },
    isMultiAnswer: function (id) { return _.contains(id, TypeId.multiAnswer); }
};
function id(a, b, c) {
    if (a === void 0) { a = []; }
    if (b === void 0) { b = []; }
    if (c === void 0) { c = []; }
    return a.concat(b).concat(c);
}
exports.id = id;
function getRest(group, exclude) {
    return _.chain(group).values().without(exclude).value();
}
exports.getRest = getRest;
var namesMale = ['Tim', 'George', 'Paul', 'Bob', 'Peter', 'Jason', 'John', 'Jack', 'Chris', 'Mike', 'Mark', 'Sam', 'Rob', 'Tom'];
var namesFemale = ['Jane', 'Jadie', 'Mary', 'Lisa', 'Maria', 'Suzan', 'Sara', 'Sally'];
var possessiveNamesMale = ["Rob's"];
var possessiveNamesFemale = ["Kate's"];
var surname = ['Wilson', 'Thomas'];
var mounths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
function getNameMale() {
    return _.sample(namesMale, 1)[0];
}
exports.getNameMale = getNameMale;
function getNameFemale() {
    return _.sample(namesFemale, 1)[0];
}
exports.getNameFemale = getNameFemale;
function getPossessiveNameMale() {
    return _.sample(possessiveNamesMale, 1)[0];
}
exports.getPossessiveNameMale = getPossessiveNameMale;
function getPossessiveNameFemale() {
    return _.sample(possessiveNamesFemale, 1)[0];
}
exports.getPossessiveNameFemale = getPossessiveNameFemale;
function getSurname() {
    return _.sample(surname, 1)[0];
}
exports.getSurname = getSurname;
function getMounth() {
    return _.sample(mounths, 1)[0];
}
exports.getMounth = getMounth;
function getDay() {
    return _.sample(days, 1)[0];
}
exports.getDay = getDay;
var _names = [].concat(namesMale).concat(namesFemale).concat(possessiveNamesMale).concat(possessiveNamesFemale).concat(surname);
_names = _.object(_names, _names);
exports.capital = {
    exeptions: {
        I: 'I',
        Iam: "I'm",
        Ihave: "I've"
    },
    names: _names,
    places: {
        Antarctica: 'Antarctica',
        Sun: 'Sun',
        Moon: 'Moon',
        Earth: 'Earth',
        Atlantic: ' Atlantic',
        Pacific: 'Pacific',
        Thames: 'Thames',
        McDonalds: "McDonald's",
        Barcelona: 'Barcelona',
        Manchester: 'Manchester',
        NewYork: 'New York',
        Madrid: 'Madrid',
        London: 'London',
        Himalayas: 'Himalayas',
        EnglishChannel: 'English Channel',
        Alps: 'Alps',
        Sahara: 'Sahara',
        SouthPole: 'South Pole'
    },
    streets: {
        ClarkAvenue: 'Clark Avenue',
        CravenDrive: 'Craven Drive',
        ParkLane: 'Park Lane',
        GeorgeStreet: 'George Street',
        ParkAvenue: 'Park Avenue',
        SydneyOperaHouse: 'Sydney Opera House',
        CentralPark: 'Central Park',
        EmpireStateBuilding: 'Empire State Building',
        WallStreet: 'Wall Street',
    },
    mounths: {
        January: 'January',
        February: 'February',
        March: 'March',
        April: 'April',
        May: 'May',
        June: 'June',
        July: 'July',
        August: 'August',
        September: 'September',
        October: 'October',
        November: 'November',
        December: 'December',
    },
    days: {
        Monday: 'Monday',
        Tuesday: 'Tuesday',
        Wednesday: 'Wednesday',
        Thursday: 'Thursday',
        Friday: 'Friday',
        Saturday: 'Saturday',
        Sunday: 'Sunday'
    },
    daysPlural: {
        Mondays: 'Mondays',
        Tuesdays: 'Tuesdays',
        Wednesdays: 'Wednesdays',
        Thursdays: 'Thursdays',
        Fridays: 'Fridays',
        Saturdays: 'Saturdays',
        Sundays: 'Sundays'
    },
    holidays: {
        Christmas: 'Christmas',
        Easter: 'Easter',
        NewYearsDay: "New Year's Day",
        ThanksgivingDay: "Thanksgiving Day"
    },
    books: {
        GameOfThrones: "'Game of Thrones'",
        TrueBlood: "'True Blood'",
    },
    countries: {
        Germany: 'Germany',
        Poland: 'Poland',
        America: 'America',
        England: 'England',
        Scotland: 'Scotland',
        China: 'China',
        Spain: 'Spain',
        Japan: 'Japan',
        UnitedKingdom: 'United Kingdom'
    },
    nationalityAdj: {
        English: 'English',
        Japanese: 'Japanese',
        French: 'French',
        Australian: 'Australian',
        German: 'German',
        Arabic: 'Arabic',
        Polish: 'Polish',
        Spanish: 'Spanish'
    },
    nationalityNoun: {
        English: 'English',
        Germans: 'Germans',
        French: 'French',
        Americans: 'Americans',
        Polish: 'Polish',
        Chinese: 'Chinese'
    },
    people: {
        Catholic: 'Catholic',
        Englishman: 'Englishman',
        Peruvian: 'Peruvian',
        Buddhist: 'Buddhist'
    },
    things: {
        TV: 'TV',
        Internet: 'Internet',
    },
    clock: {
        pm: 'p.m.',
        am: 'a.m.'
    },
    abbreviations: {
        UFO: 'UFO',
        FBI: 'FBI'
    }
};
},{"underscore":160}],227:[function(require,module,exports){
var _ = require('underscore');
var React = require('react');
var utils = require('../../utils/utils');
var _a = React.DOM, div = _a.div, button = _a.button;
var rendererCss = require('./rendererCss');
var cleanText = function (l) {
    l = utils.replaceAll(l, '<p>', '');
    l = utils.replaceAll(l, '</p>', '');
    l = utils.replaceAll(l, '<s>', '');
    l = utils.replaceAll(l, '</s>', '');
    l = utils.replaceAll(l, '</b>', '');
    return utils.replaceAll(l, '<b>', '');
};
function getTitle(o) {
    if (!o.t)
        return null;
    var onClick = function () { return utils.voice.read(cleanText(o.t)); };
    return button({
        style: rendererCss.title(!!onClick),
        dangerouslySetInnerHTML: {
            __html: o.t
        },
        onClick: onClick
    });
}
function getInfo(o) {
    if (!o.i)
        return null;
    var onClick = function () { return utils.voice.read(cleanText(o.i)); };
    return button({
        style: rendererCss.info(!!onClick),
        dangerouslySetInnerHTML: {
            __html: o.i
        },
        onClick: onClick
    });
}
function getLine(item, key) {
    if (!item.l)
        return null;
    var onClick = function () { return utils.voice.read(cleanText(item.l)); };
    return button({
        key: 'line' + key,
        style: rendererCss.item(!!onClick),
        dangerouslySetInnerHTML: {
            __html: item.l
        },
        onClick: onClick
    });
}
function getLineInfo(item, key) {
    if (!item.i)
        return null;
    var onClick = function () { return utils.voice.read(cleanText(item.i)); };
    return button({
        key: 'lineInfo' + key,
        style: rendererCss.info(!!onClick),
        dangerouslySetInnerHTML: {
            __html: item.i
        },
        onClick: onClick
    });
}
function getLineSeparator(item, key) {
    if (!item.s)
        return null;
    return div({
        style: rendererCss.itemLineSep(),
        key: 'separ' + key
    });
}
function getTo(text, isMute) {
    var onClick = isMute ? null : function () { return utils.voice.read(cleanText(text)); };
    return button({
        style: rendererCss.itemTo(!!onClick),
        dangerouslySetInnerHTML: {
            __html: text
        },
        onClick: onClick
    });
}
function getEQ(to, key, sep, isMute) {
    var separator = div({
        style: rendererCss.itemSep()
    }, sep);
    var v1 = getTo(to[0], isMute);
    var v2 = to.length >= 3 ? getTo(to[1], isMute) : separator;
    var v3 = to.length >= 3 ? getTo(to[2], isMute) : getTo(to[1], isMute);
    return div({
        style: rendererCss.wrapperItemTo(),
        key: 'eq' + key
    }, v1, v2, v3);
}
function getList(o) {
    return _.compact(o.list.map(function (item, key) {
        if (item.l)
            return getLine(item, key);
        else if (item.i)
            return getLineInfo(item, key);
        else if (item.eq)
            return getEQ(item.eq, key, '=', false);
        else if (item.to)
            return getEQ(item.to, key, ' ', false);
        else if (item.mute_to)
            return getEQ(item.mute_to, key, ' ', true);
        else if (item.s)
            return getLineSeparator(item, key);
        return null;
    }));
}
function logExpTest(o) {
    o.i && console.info(o.i.toString());
    o.t && console.info(o.t.toString());
    if (o.list) {
        o.list.map(function (item) {
            item.l && console.info(item.l.toString());
            item.i && console.info(item.i.toString());
            item.eq && console.info(item.eq.join(' '));
            item.to && console.info(item.to.join(' '));
            item.mute_to && console.info(item.mute_to.join(' '));
        });
    }
}
exports.tList = function (o) {
    return div({
        key: _.uniqueId('key')
    }, getTitle(o), getInfo(o), getList(o));
};
},{"../../utils/utils":314,"./rendererCss":228,"react":159,"underscore":160}],228:[function(require,module,exports){
var React = require('react');
var css = require('../../utils/css/css');
var div = React.DOM.div;
var title = {
    color: css.font.color.normal,
    marginTop: '5vh',
    paddingTop: '2vh',
    paddingBottom: '2vh',
    paddingLeft: '1vh',
    paddingRight: '1vh',
    textAlign: 'left',
    fontWeight: 'bold',
    fontSize: css.font.fontSize.XL2,
    width: '100%',
    backgroundColor: 'transparent'
};
var info = {
    color: css.font.color.info,
    textAlign: 'left',
    fontSize: '0.7em',
    marginBottom: '1vh',
    paddingLeft: '1vh',
    paddingRight: '1vh',
    display: 'block',
    backgroundColor: 'transparent'
};
var item = {
    color: css.font.color.normal,
    paddingLeft: '1vh',
    paddingRight: '1vh',
    textAlign: 'left',
    display: 'block',
    backgroundColor: 'transparent'
};
var itemInfo = {
    color: css.font.color.info,
    fontSize: '0.8em',
    paddingLeft: '1vh',
    paddingRight: '1vh',
    textAlign: 'left',
    display: 'block',
    backgroundColor: 'transparent'
};
var wrapperItemTo = {
    color: css.font.color.normal,
    display: 'flex',
    flexGrow: 1,
    flexFlow: 'row wrap'
};
var itemTo = {
    color: css.font.color.normal,
    display: 'block',
    textAlign: 'left',
    flexGrow: 1,
    paddingLeft: '1vh',
    paddingRight: '1vh',
    backgroundColor: 'transparent'
};
var noClick = {
    color: css.font.color.normal,
    opacity: '0.4'
};
var itemSep = {
    color: css.font.color.normal,
    display: 'flex',
    flexBasis: 0,
    alignItems: 'flex-start',
    paddingLeft: '2vh',
    paddingRight: '2vh',
};
var itemLineSep = {
    color: css.font.color.normal,
    marginTop: '5vh',
};
module.exports = {
    title: function (isClick) { return css.get(title, isClick ? {} : noClick); },
    info: function (isClick) { return css.get(info, isClick ? {} : noClick); },
    item: function (isClick) { return css.get(item, isClick ? {} : noClick); },
    itemInfo: function (isClick) { return css.get(itemInfo, isClick ? {} : noClick); },
    wrapperItemTo: function () { return wrapperItemTo; },
    itemTo: function (isClick) { return css.get(itemTo, isClick ? {} : noClick); },
    itemSep: function () { return itemSep; },
    itemLineSep: function () { return itemLineSep; }
};
},{"../../utils/css/css":309,"react":159}],229:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "",
    list: [
        { l: "beat - beat - beaten" },
        { l: "become - became - become" },
        { l: "begin - began - begun" },
        { l: "bend - bent - bent" },
        { l: "bite - bit - bitten" },
        { l: "blow - blew - blown" },
        { l: "break - broke - broken" },
        { l: "bring - brought - brought" },
        { l: "build - built - built" },
        { l: "burst - burst - burst" },
        { l: "buy - bought - bought" },
        { l: "catch - caught - caught" },
        { l: "choose - chose - chosen" },
        { l: "come - came - come" },
        { l: "cost - cost - cost" },
        { l: "cut - cut - cut" },
        { l: "dig - dug - dug" },
        { l: "do - did - done" },
        { l: "draw - drew - drawn" },
        { l: "drink - drank - drunk" },
        { l: "drive - drove - driven" },
        { l: "eat - ate - eaten" },
        { l: "fall - fell - fallen" },
        { l: "feed - fed - fed" },
        { l: "feel - felt - felt" },
        { l: "fight - fought - fought" },
        { l: "find - found - found" },
        { l: "fly - flew - flown" },
        { l: "forget - forgot - forgotten" },
        { l: "freeze - froze - frozen" },
        { l: "give - gave - given" },
        { l: "go - went - gone" },
        { l: "grow - grew - grown" },
        { l: "have - had - had" },
        { l: "hear - heard - heard" },
        { l: "hide - hid - hidden" },
        { l: "hit - hit - hit" },
        { l: "hold - held - held" },
        { l: "hurt - hurt - hurt" },
        { l: "keep - kept - kept" },
        { l: "know - knew - known" },
        { l: "lead - led - led" },
        { l: "leave - left - left" },
        { l: "let - let - let " },
        { l: "light - lit - lit " },
        { l: "lose - lost - lost " },
        { l: "make - made - made " },
        { l: "mean - meant - meant " },
        { l: "meet - met - met " },
        { l: "pay - paid - paid " },
        { l: "put - put - put " },
        { l: "read - read - read " },
        { l: "ride - rode - ridden " },
        { l: "ring - rang - rung " },
        { l: "rise - rose - risen " },
        { l: "run - ran - run " },
        { l: "say - said - said " },
        { l: "see - saw - seen " },
        { l: "sell - sold - sold " },
        { l: "send - sent - sent " },
        { l: "shake - shook - shaken " },
        { l: "shine - shone - shone " },
        { l: "shoot - shot - shot " },
        { l: "shut - shut - shut " },
        { l: "sing - sang - sung " },
        { l: "sink - sank - sunk " },
        { l: "sit - sat - sat " },
        { l: "sleep - slept - slept" },
        { l: "speak - spoke - spoken " },
        { l: "spread - spread - spread " },
        { l: "stand - stood - stood " },
        { l: "steal - stole - stolen " },
        { l: "stick - stuck - stuck " },
        { l: "strike - struck - struck " },
        { l: "sweep - swept - swept " },
        { l: "swim - swam - swum " },
        { l: "take - took - taken " },
        { l: "teach - taught - taught " },
        { l: "tear - tore - torn " },
        { l: "tell - told - told " },
        { l: "think - thought - thought" },
        { l: "throw - threw - thrown " },
        { l: "wake - woke - woken " },
        { l: "wear - wore - worn " },
        { l: "win - won - won " },
        { l: "write - wrote - written" }
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],230:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.draw];
var title = 'Irregular Verbs';
exports.title = title;
var info = 'Practise your writing: Infinitive - Past Simple - Past Participle.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "beat - beat - beaten",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "become - became - become",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "begin - began - begun",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "bend - bent - bent",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "bite - bit - bitten",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "blow - blew - blown",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "break - broke - broken",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "bring - brought - brought",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "build - built - built",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "burst - burst - burst",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "buy - bought - bought",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "catch - caught - caught",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "choose - chose - chosen",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "come - came - come",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "cost - cost - cost",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "cut - cut - cut",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "dig - dug - dug",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "do - did - done",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "draw - drew - drawn",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "drink - drank - drunk",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "drive - drove - driven",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "eat - ate - eaten",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "fall - fell - fallen",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "feed - fed - fed",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "feel - felt - felt",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "fight - fought - fought",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "find - found - found",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "fly - flew - flown",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "forget - forgot - forgotten",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "freeze - froze - frozen",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "give - gave - given",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "go - went - gone",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "grow - grew - grown",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "have - had - had",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "hear - heard - heard",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "hide - hid - hidden",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "hit - hit - hit",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "hold - held - held",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "hurt - hurt - hurt",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "keep - kept - kept",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "know - knew - known",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "lead - led - led",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "leave - left - left",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "let - let - let",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "light - lit - lit",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "lose - lost - lost",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "make - made - made",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "mean - meant - meant",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "meet - met - met",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "pay - paid - paid",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "put - put - put",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "read - read - read",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "ride - rode - ridden",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "ring - rang - rung",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "rise - rose - risen",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "run - ran - run",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "say - said - said",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "see - saw - seen",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "sell - sold - sold",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "send - sent - sent",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "shake - shook - shaken",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "shine - shone - shone",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "shoot - shot - shot",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "shut - shut - shut",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "sing - sang - sung",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "sink - sank - sunk",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "sit - sat - sat",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "sleep - slept - slept",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "speak - spoke - spoken",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "spread - spread - spread",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "stand - stood - stood",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "steal - stole - stolen",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "stick - stuck - stuck",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "strike - struck - struck",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "sweep - swept - swept",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "swim - swam - swum",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "take - took - taken",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "teach - taught - taught",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "tear - tore - torn",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "tell - told - told",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "think - thought - thought",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "throw - threw - thrown",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "wake - woke - woken",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "wear - wore - worn",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "win - won - won",
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "write - wrote - written",
    }];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":229}],231:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " - ";
var common = [constants_1.TypeId.oneTwoThree, constants_1.TypeId.areRepeated];
var title = 'Irregular Verbs';
exports.title = title;
var info = 'Choose in right order: Infinitive - Past Simple - Past Participle.';
var postfix = "";
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["beat", "beat", "beaten"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["become", "became", "become"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["begin", "began", "begun"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["bend", "bent", "bent"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["bite", "bit", "bitten"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["blow", "blew", "blown"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["break", "broke", "broken"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["bring", "brought", "brought"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["build", "built", "built"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["burst", "burst", "burst"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["buy", "bought", "bought"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["catch", "caught", "caught"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["choose", "chose", "chosen"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["come", "came", "come"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["cost", "cost", "cost"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["cut", "cut", "cut"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["dig", "dug", "dug"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["do", "did", "done"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["draw", "drew", "drawn"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["drink", "drank", "drunk"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["drive", "drove", "driven"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["eat", "ate", "eaten"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["fall", "fell", "fallen"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["feed", "fed", "fed"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["feel", "felt", "felt"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["fight", "fought", "fought"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["find", "found", "found"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator, correct: ["fly", "flew", "flown"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["forget", "forgot", "forgotten"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["freeze", "froze", "frozen"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["give", "gave", "given"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["go", "went", "gone"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["grow", "grew", "grown"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["have", "had", "had"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["hear", "heard", "heard"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["hide", "hid", "hidden"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["hit", "hit", "hit"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["hold", "held", "held"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["hurt", "hurt", "hurt"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["keep", "kept", "kept"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["know", "knew", "known"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["lead", "led", "led"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["leave", "left", "left"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["let", "let", "let"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["light", "lit", "lit"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["lose", "lost", "lost"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["make", "made", "made"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["mean", "meant", "meant"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["meet", "met", "met"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["pay", "paid", "paid"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["put", "put", "put"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["read", "read", "read"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["ride", "rode", "ridden"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["ring", "rang", "rung"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["rise", "rose", "risen"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["run", "ran", "run"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["say", "said", "said"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["see", "saw", "seen"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["sell", "sold", "sold"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["send", "sent", "sent"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["shake", "shook", "shaken"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["shine", "shone", "shone"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["shoot", "shot", "shot"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["shut", "shut", "shut"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["sing", "sang", "sung"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["sink", "sank", "sunk"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["sit", "sat", "sat"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["sleep", "slept", "slept"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["speak", "spoke", "spoken"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["spread", "spread", "spread"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["stand", "stood", "stood"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["steal", "stole", "stolen"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["stick", "stuck", "stuck"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["strike", "struck", "struck"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["sweep", "swept", "swept"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["swim", "swam", "swum"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["take", "took", "taken"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["teach", "taught", "taught"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["tear", "tore", "torn"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["tell", "told", "told"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["think", "thought", "thought"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["throw", "threw", "thrown"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["wake", "woke", "woken"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["wear", "wore", "worn"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["win", "won", "won"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation, postfix: postfix,
        name: separator,
        correct: ["write", "wrote", "written"],
    }];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":229}],232:[function(require,module,exports){
var types_1 = require('../types');
var Promise = require('bluebird');
var animals = require('./animals/animals');
var clockFourWords = require('./extra/clock/clockFourWords');
var clockDraw = require('./extra/clock/clockDraw');
var clock = require('./extra/clock/clock');
var presentTenseOneToThree = require('./tense/presentTense/presentTenseOneToThree');
var presentTenseOneToThreePartTwo = require('./tense/presentTense/presentTenseOneToThreePartTwo');
var presentTenseRadio = require('./tense/presentTense/presentTenseRadio');
var presentTenseMatch = require('./tense/presentTense/presentTenseMatch');
var presentContinuousTenseOneToThree = require('./tense/presentContinuousTense/presentContinuousTenseOneToThree');
var presentContinuousTenseOneToThreePartTwo = require('./tense/presentContinuousTense/presentContinuousTenseOneToThreePartTwo');
var presentContinuousTenseRadio = require('./tense/presentContinuousTense/presentContinuousTenseRadio');
var presentPerfectTenseOneToThree = require('./tense/presentPerfectTense/presentPerfectTenseOneToThree');
var presentPerfectTenseOneToThreePartTwo = require('./tense/presentPerfectTense/presentPerfectTenseOneToThreePartTwo');
var presentPerfectTenseRadio = require('./tense/presentPerfectTense/presentPerfectTenseRadio');
var presentPerfectContinuousTenseOneToThree = require('./tense/presentPerfectContinuousTense/presentPerfectContinuousTenseOneToThree');
var presentPerfectContinuousTenseOneToThreePartTwo = require('./tense/presentPerfectContinuousTense/presentPerfectContinuousTenseOneToThreePartTwo');
var presentPerfectContinuousTenseRadio = require('./tense/presentPerfectContinuousTense/presentPerfectContinuousTenseRadio');
var location = require('./extra/location/location');
var eitherNeither = require('./words/eitherNeither/eitherNeither');
var an_a_shortOne = require('./words/an_a/an_a_shortOne');
var an_a_shortTwo = require('./words/an_a/an_a_shortTwo');
var an_a_shortThree = require('./words/an_a/an_a_shortThree');
var an_a_shortFour = require('./words/an_a/an_a_shortFour');
var irregularVerbs = require('./irregular/verbs/irregularVerbs');
var irregularVerbsOneTwoThree = require('./irregular/verbs/irregularVerbsOneTwoThree');
var singularAndPlural = require('./singularAndPlural/singularAndPlural');
var fewLittle = require('./quantifiers/fewLittle/fewLittle');
var muchManyALot = require('./quantifiers/muchManyALot/muchManyALot');
var verbHave = require('./verb/have/verbHave');
var toBeInPresentAndPast = require('./verb/toBeInPresentAndPast/toBeInPresentAndPast');
var mineYour = require('./pronouns/possesive/mineYour');
var myselfYourself = require('./pronouns/reflexive/myselfYourself');
var spellingVerbsIngOne = require('./words/ing/spellingVerbsIngOne');
var spellingVerbsIngTwo = require('./words/ing/spellingVerbsIngTwo');
var spellingVerbsIngThree = require('./words/ing/spellingVerbsIngThree');
var prefixes_one = require('./words/prefixes/prefixes_one');
var prefixes_two = require('./words/prefixes/prefixes_two');
var verbEndings = require('./verb/endings/verbEndings');
var speech_one = require('./words/speach/speech_one');
var simpleFutureOneToThree = require('./tense/simpleFuture/simpleFutureOneToThree');
var simpleFutureOneToThreePartTwo = require('./tense/simpleFuture/simpleFutureOneToThreePartTwo');
var simpleFutureOneToThreePartThree = require('./tense/simpleFuture/simpleFutureOneToThreePartThree');
var simpleFutureOneToThreePartFour = require('./tense/simpleFuture/simpleFutureOneToThreePartFour');
var simpleFutureRadio = require('./tense/simpleFuture/simpleFutureRadio');
var occupation = require('./pictures/occupation/occupation');
var synonymsAD = require('./synonyms/ad/synonymsAD');
var synonymsDF = require('./synonyms/df/synonymsDF');
var synonymsGL = require('./synonyms/gl/synonymsGL');
var synonymsLS = require('./synonyms/ls/synonymsLS');
var synonymsSW = require('./synonyms/sw/synonymsSW');
function getLessons(lessonsCatalog) {
    return new Promise(function (resolve, reject) {
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'A___0', verbEndings);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'A___1', speech_one);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'PR__2', prefixes_one);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'PR__3', prefixes_two);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'SP__1', spellingVerbsIngOne);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'SP__2', spellingVerbsIngTwo);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'SP__3', spellingVerbsIngThree);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'AN__1', an_a_shortOne);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'AN__2', an_a_shortTwo);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'AN__3', an_a_shortThree);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'AN__4', an_a_shortFour);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'CL_01', clockFourWords);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'CL_02', clockDraw);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'CL_03', clock);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'AN__01', animals);
        lessonsCatalog.add(types_1.FreeType.alwaysFree_____, 'PC__01', occupation);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PT__01', presentTenseOneToThree);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PT__02', presentTenseOneToThreePartTwo);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PT__03', presentTenseRadio);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PT__04', presentTenseMatch);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PCT_01', presentContinuousTenseOneToThree);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PCT_02', presentContinuousTenseOneToThreePartTwo);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PCT_03', presentContinuousTenseRadio);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PPT_01', presentPerfectTenseOneToThree);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PPT_02', presentPerfectTenseOneToThreePartTwo);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PPT_03', presentPerfectTenseRadio);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PPCT_1', presentPerfectContinuousTenseOneToThree);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PPCT_2', presentPerfectContinuousTenseOneToThreePartTwo);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'PPCT_3', presentPerfectContinuousTenseRadio);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'SFT_1', simpleFutureOneToThree);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'SFT_2', simpleFutureOneToThreePartTwo);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'SFT_3', simpleFutureOneToThreePartThree);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'SFT_4', simpleFutureOneToThreePartFour);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'SFT1R', simpleFutureRadio);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'L___1', location);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'EINE1', eitherNeither);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'IV__1', irregularVerbs);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'IV__2', irregularVerbsOneTwoThree);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'P_S_1', singularAndPlural);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'FEW_1', fewLittle);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'MUCH1', muchManyALot);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'V___1', verbHave);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'BE__1', toBeInPresentAndPast);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'MINE1', mineYour);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'MINE2', myselfYourself);
        lessonsCatalog.add(types_1.FreeType.whenPrime______, 'SY_AD', synonymsAD);
        lessonsCatalog.add(types_1.FreeType.inProgressBlock, 'SY_DF', synonymsDF);
        lessonsCatalog.add(types_1.FreeType.inProgressBlock, 'SY_GL', synonymsGL);
        lessonsCatalog.add(types_1.FreeType.inProgressBlock, 'SY_LS', synonymsLS);
        lessonsCatalog.add(types_1.FreeType.inProgressBlock, 'SY_SW', synonymsSW);
        lessonsCatalog.setActiveLesson('SY_AD');
        console.info('Finish loading lessons');
        return resolve(lessonsCatalog);
    });
}
exports.getLessons = getLessons;
},{"../types":308,"./animals/animals":218,"./extra/clock/clock":220,"./extra/clock/clockDraw":221,"./extra/clock/clockFourWords":222,"./extra/location/location":225,"./irregular/verbs/irregularVerbs":230,"./irregular/verbs/irregularVerbsOneTwoThree":231,"./pictures/occupation/occupation":234,"./pronouns/possesive/mineYour":236,"./pronouns/reflexive/myselfYourself":238,"./quantifiers/fewLittle/fewLittle":240,"./quantifiers/muchManyALot/muchManyALot":242,"./singularAndPlural/singularAndPlural":244,"./synonyms/ad/synonymsAD":246,"./synonyms/df/synonymsDF":248,"./synonyms/gl/synonymsGL":250,"./synonyms/ls/synonymsLS":252,"./synonyms/sw/synonymsSW":254,"./tense/presentContinuousTense/presentContinuousTenseOneToThree":256,"./tense/presentContinuousTense/presentContinuousTenseOneToThreePartTwo":257,"./tense/presentContinuousTense/presentContinuousTenseRadio":258,"./tense/presentPerfectContinuousTense/presentPerfectContinuousTenseOneToThree":260,"./tense/presentPerfectContinuousTense/presentPerfectContinuousTenseOneToThreePartTwo":261,"./tense/presentPerfectContinuousTense/presentPerfectContinuousTenseRadio":262,"./tense/presentPerfectTense/presentPerfectTenseOneToThree":264,"./tense/presentPerfectTense/presentPerfectTenseOneToThreePartTwo":265,"./tense/presentPerfectTense/presentPerfectTenseRadio":266,"./tense/presentTense/presentTenseMatch":268,"./tense/presentTense/presentTenseOneToThree":269,"./tense/presentTense/presentTenseOneToThreePartTwo":270,"./tense/presentTense/presentTenseRadio":271,"./tense/simpleFuture/simpleFutureOneToThree":273,"./tense/simpleFuture/simpleFutureOneToThreePartFour":274,"./tense/simpleFuture/simpleFutureOneToThreePartThree":275,"./tense/simpleFuture/simpleFutureOneToThreePartTwo":276,"./tense/simpleFuture/simpleFutureRadio":277,"./verb/endings/verbEndings":279,"./verb/have/verbHave":281,"./verb/toBeInPresentAndPast/toBeInPresentAndPast":283,"./words/an_a/an_a_shortFour":284,"./words/an_a/an_a_shortOne":285,"./words/an_a/an_a_shortThree":286,"./words/an_a/an_a_shortTwo":287,"./words/eitherNeither/eitherNeither":289,"./words/ing/spellingVerbsIngOne":292,"./words/ing/spellingVerbsIngThree":293,"./words/ing/spellingVerbsIngTwo":294,"./words/prefixes/prefixes_one":296,"./words/prefixes/prefixes_two":297,"./words/speach/speech_one":299,"bluebird":1}],233:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exports.exp = exp;
exp.push(renderer_1.tList({
    t: "",
    list: [
        { l: "Actor" },
        { l: "Architect" },
        { l: "Babysitter" },
        { l: "Baker" },
        { l: "Bartender" },
        { l: "Beekeeper" },
        { l: "Bodybuilder" },
        { l: "Bodyguard" },
        { l: "Bricklayer" },
        { l: "Bus_driver" },
        { l: "Businessman" },
        { l: "Butcher" },
        { l: "Cameraman" },
        { l: "Chef" },
        { l: "Cleaner" },
        { l: "Conductor" },
        { l: "Construction worker" },
        { l: "Cowboy" },
        { l: "Dancer" },
        { l: "Engineer" },
        { l: "Farmer" },
        { l: "Firefighter" },
        { l: "Fisherman" },
        { l: "Footballer" },
        { l: "Gardener" },
        { l: "Guard" },
        { l: "Hunter" },
        { l: "Journalist" },
        { l: "Lifeguard" },
        { l: "Lumberman" },
        { l: "Massagist" },
        { l: "Nurse" },
        { l: "Photographer" },
        { l: "Plumber" },
        { l: "Politician" },
        { l: "Priest" },
        { l: "Programmer" },
        { l: "Scientist" },
        { l: "Shop assistant" },
        { l: "Singer" },
        { l: "Sportsman" },
        { l: "Student" },
        { l: "Thief" },
        { l: "Stunt performer" },
        { l: "Waiter" },
        { l: "Welder" },
        { l: "Writer" }
    ]
}));
},{"../../helper/renderer":227}],234:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.fourPictures];
var s = 'img/occupations/';
var a = {
    actor: s + 'actor.png',
    architect: s + 'architect.png',
    babysitter: s + 'babysitter.png',
    baker: s + 'baker.png',
    bartender: s + 'bartender.png',
    beekeeper: s + 'beekeeper.png',
    bodybuilder: s + 'bodybuilder.png',
    bricklayer: s + 'bricklayer.png',
    bus_driver: s + 'bus_driver.png',
    businessman: s + 'businessman.png',
    butcher: s + 'butcher.png',
    cameraman: s + 'cameraman.png',
    chef: s + 'chef.png',
    cleaner: s + 'cleaner.png',
    conductor: s + 'conductor.png',
    construction_worker: s + 'construction_worker.png',
    cowboy: s + 'cowboy.png',
    dancer: s + 'dancer.png',
    engineer: s + 'engineer.png',
    farmer: s + 'farmer.png',
    firefighter: s + 'firefighter.png',
    fisherman: s + 'fisherman.png',
    footballer: s + 'footballer.png',
    gardener: s + 'gardener.png',
    bodyguard: s + 'bodyguard.png',
    hunter: s + 'hunter.png',
    journalist: s + 'journalist.png',
    lifeguard: s + 'lifeguard.png',
    lumberman: s + 'lumberman.png',
    massagist: s + 'massagist.png',
    nurse: s + 'nurse.png',
    photographer: s + 'photographer.png',
    plumber: s + 'plumber.png',
    politician: s + 'politician.png',
    priest: s + 'priest.png',
    programmer: s + 'programmer.png',
    scientist: s + 'scientist.png',
    shop_assistant: s + 'shop_assistant.png',
    singer: s + 'singer.png',
    sportsman: s + 'sportsman.png',
    student: s + 'student.png',
    thief: s + 'thief.png',
    stunt_performer: s + 'stunt_performer.png',
    waiter: s + 'waiter.png',
    welder: s + 'welder.png',
    writer: s + 'writer.png',
};
var title = 'Occupations';
exports.title = title;
var info = 'Choose the correct occupation.';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Architect',
        correct: [a.architect],
        incorrect: constants_1.getRest(a, a.architect),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Waiter',
        correct: [a.waiter],
        incorrect: constants_1.getRest(a, a.waiter),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Babysitter',
        correct: [a.babysitter],
        incorrect: constants_1.getRest(a, a.babysitter),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Bartender',
        correct: [a.bartender],
        incorrect: constants_1.getRest(a, a.bartender),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Bus driver',
        correct: [a.bus_driver],
        incorrect: constants_1.getRest(a, a.bus_driver),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Cameraman',
        correct: [a.cameraman],
        incorrect: constants_1.getRest(a, [a.cameraman, a.photographer]),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Scientist',
        correct: [a.scientist],
        incorrect: constants_1.getRest(a, a.scientist),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Cleaner',
        correct: [a.cleaner],
        incorrect: constants_1.getRest(a, a.cleaner),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Conductor',
        correct: [a.conductor],
        incorrect: constants_1.getRest(a, a.conductor),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Construction worker',
        correct: [a.construction_worker],
        incorrect: constants_1.getRest(a, [a.construction_worker, a.bricklayer, a.architect, a.engineer]),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Actor',
        correct: [a.actor],
        incorrect: constants_1.getRest(a, a.actor),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Cowboy',
        correct: [a.cowboy],
        incorrect: constants_1.getRest(a, a.cowboy),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Bodybuilder',
        correct: [a.bodybuilder],
        incorrect: constants_1.getRest(a, a.bodybuilder),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Dancer',
        correct: [a.dancer],
        incorrect: constants_1.getRest(a, a.dancer),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Firefighter',
        correct: [a.firefighter],
        incorrect: constants_1.getRest(a, a.firefighter),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Baker',
        correct: [a.baker],
        incorrect: constants_1.getRest(a, [a.baker, a.chef]),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Bricklayer',
        correct: [a.bricklayer],
        incorrect: constants_1.getRest(a, [a.bricklayer, a.construction_worker, a.architect, a.engineer]),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Farmer',
        correct: [a.farmer],
        incorrect: constants_1.getRest(a, a.farmer),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Engineer',
        correct: [a.engineer],
        incorrect: constants_1.getRest(a, [a.engineer, a.conductor, a.bricklayer, a.engineer, a.architect]),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Singer',
        correct: [a.singer],
        incorrect: constants_1.getRest(a, a.singer),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Chef',
        correct: [a.chef],
        incorrect: constants_1.getRest(a, [a.chef, a.baker]),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Footballer',
        correct: [a.footballer],
        incorrect: constants_1.getRest(a, a.footballer),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Massagist',
        correct: [a.massagist],
        incorrect: constants_1.getRest(a, a.massagist),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Writer',
        correct: [a.writer],
        incorrect: constants_1.getRest(a, a.writer),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Bodyguard',
        correct: [a.bodyguard],
        incorrect: constants_1.getRest(a, a.bodyguard),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Nurse',
        correct: [a.nurse],
        incorrect: constants_1.getRest(a, a.nurse),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Gardener',
        correct: [a.gardener],
        incorrect: constants_1.getRest(a, a.gardener),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Fisherman',
        correct: [a.fisherman],
        incorrect: constants_1.getRest(a, a.fisherman),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Journalist',
        correct: [a.journalist],
        incorrect: constants_1.getRest(a, a.journalist),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Hunter',
        correct: [a.hunter],
        incorrect: constants_1.getRest(a, a.hunter),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Programmer',
        correct: [a.programmer],
        incorrect: constants_1.getRest(a, a.programmer),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Lifeguard',
        correct: [a.lifeguard],
        incorrect: constants_1.getRest(a, a.lifeguard),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Welder',
        correct: [a.welder],
        incorrect: constants_1.getRest(a, a.welder),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Lumberman',
        correct: [a.lumberman],
        incorrect: constants_1.getRest(a, a.lumberman),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Photographer',
        correct: [a.photographer],
        incorrect: constants_1.getRest(a, [a.photographer, a.cameraman]),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Thief',
        correct: [a.thief],
        incorrect: constants_1.getRest(a, a.thief),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Shop assistant',
        correct: [a.shop_assistant],
        incorrect: constants_1.getRest(a, a.shop_assistant),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Plumber',
        correct: [a.plumber],
        incorrect: constants_1.getRest(a, a.plumber),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Priest',
        correct: [a.priest],
        incorrect: constants_1.getRest(a, a.priest),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Stunt performer',
        correct: [a.stunt_performer],
        incorrect: constants_1.getRest(a, a.stunt_performer),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Student',
        correct: [a.student],
        incorrect: constants_1.getRest(a, a.student),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Businessman',
        correct: [a.businessman],
        incorrect: constants_1.getRest(a, a.businessman),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Politician',
        correct: [a.politician],
        incorrect: constants_1.getRest(a, a.politician),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Sportsman',
        correct: [a.sportsman],
        incorrect: constants_1.getRest(a, [a.sportsman, a.footballer, a.dancer]),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Beekeeper',
        correct: [a.beekeeper],
        incorrect: constants_1.getRest(a, a.beekeeper),
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: 'Butcher',
        correct: [a.butcher],
        incorrect: constants_1.getRest(a, a.butcher),
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":233}],235:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "We use pronouns to refer to possession and 'belonging'.",
    list: [
        { to: ["This is <p>my</p> pen.", "This pen is <p>mine</p>."] },
        { to: ["This is <p>your</p> pen.", "This pen is <p>yours</p>."] },
        { to: ["This is <p>his</p> pen.", "This pen is <p>his</p>."] },
        { to: ["This is <p>her</p> pen.", "This pen is <p>hers</p>."] },
        { to: ["This is <p>our</p> pen.", "This pen is <p>ours</p>."] },
        { to: ["This is <p>their</p> pen.", "This pen is <p>theirs</p>."] }
    ]
}));
exp.push(renderer_1.tList({
    t: "Possessive pronouns are used in English to avoid repeating information that is already clear.",
    list: [
        { to: ["This is <p>my</p> pen.", "This pen is <p>mine</p>."] },
        { to: ["<p>My</p> bag is old.", "<p>Hers</p> is new."] },
        { to: ["Is this <p>your</p> bag?", "No, it's <p>hers</p>."] },
        { to: ["<p>His</p> name is Bob", "<p>Hers</p> is Joanna."] },
        { to: ["<p>My</p> name is Sue", "<p>His</p> is Bob."] },
        { to: ["<p>Our</p> dog is friendly", "<p>Theirs</p> is aggressive."] }
    ]
}));
exp.push(renderer_1.tList({
    t: "We use possessive pronouns in place of a noun:",
    list: [
        { l: "I know this drink is <p>yours</p> but I need to drink something." },
        { l: "I know this drink is <p>your drink</p> but I need to drink something." },
        { i: "<p>Yours</p> is a possessive pronoun that replaces <p>your drink</p>." },
        { s: ' ' },
        { l: "Her car is faster than <p>mine</p>." },
        { l: "Her car is faster than <p>my car</p>." },
        { i: "<p>Mine</p> is a possessive pronoun that replaces <p>my car</p>." },
        { s: ' ' },
    ]
}));
exp.push(renderer_1.tList({
    t: "Yours faithfully - Yours sincerely",
    i: "Yours is also used in English with faithfully or sincerely at the end of a formal letter or e-mail.",
    list: [
        { s: ' ' },
        { l: "Yours faithfully" },
        { i: "If it someone that you don't know" },
        { s: ' ' },
        { l: "Yours sincerely" },
        { i: "If it is someone that you know" },
        { s: ' ' },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],236:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = 'Possessive Pronouns: mine, yours, hers...';
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "This blunt knife is not mine. " + constants_1.space,
        correct: ["My knife is sharp."],
        incorrect: ["Mine knife is sharp."],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "I'm a business associate of " + constants_1.space + " father",
        correct: ["your"],
        incorrect: ["yours"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "My girlfriend is optimistic and outgoing, how about" + constants_1.space + "?",
        correct: ["yours"],
        incorrect: ["your"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "What I said is none of " + constants_1.space + " business",
        correct: ["your"],
        incorrect: ["yours"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Some of " + constants_1.space + " distant relatives are coming next week.",
        correct: ["my"],
        incorrect: ["mine"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "This pen is not " + constants_1.space + ", it's " + constants_1.getPossessiveNameMale(),
        correct: ["mine"],
        incorrect: ["my"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: constants_1.getPossessiveNameFemale() + " father is very rich. Some day all this will be " + constants_1.space,
        correct: ["hers"],
        incorrect: ["her"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: constants_1.space + " room is not for rent; you must ask someone else.",
        correct: ["Her"],
        incorrect: ["Hers"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: constants_1.space + " house is much smaller than yours.",
        correct: ["My"],
        incorrect: ["Mine"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The large briefcase is his, the smaller one is " + constants_1.space + ".",
        correct: ["hers"],
        incorrect: ["her"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Their house is really big while " + constants_1.space + " is tiny",
        correct: ["mine"],
        incorrect: ["my"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Let's meet on " + constants_1.space + " patio at five.",
        correct: ["our"],
        incorrect: ["ours"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Mr " + constants_1.getSurname() + " is a friend of " + constants_1.space + " .",
        correct: ["ours"],
        incorrect: ["our"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "My rules are strict, but " + constants_1.space + " are even stricter.",
        correct: ["theirs"],
        incorrect: ["their"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "The park is mine as much as it's " + constants_1.space + " .",
        correct: ["theirs"],
        incorrect: ["their"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "I have collected my ticket, but where is " + constants_1.space + "?",
        correct: ["theirs"],
        incorrect: ["their"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: constants_1.space + " childhood was tough, but my mum's was tougher.",
        correct: ["Her"],
        incorrect: ["Hers"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "That food is ours and not " + constants_1.space + ".",
        correct: ["theirs"],
        incorrect: ["their"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Their mother gets along well with " + constants_1.space + ".",
        correct: ["yours"],
        incorrect: ["your"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "I appreciate " + constants_1.space + " understanding of the matter.",
        correct: ["your"],
        incorrect: ["yours"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":235}],237:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "Singular",
    list: [
        { l: "myself" },
        { l: "yourself" },
        { l: "himself" },
        { l: "herself" },
        { l: "itself" }
    ]
}));
exp.push(renderer_1.tList({
    t: "Plural",
    list: [
        { l: "ourselves" },
        { l: "yourselves" },
        { l: "themselves" },
    ]
}));
exp.push(renderer_1.tList({
    t: "We use a reflexive pronoun as a direct object when the object is the same as the subject of the verb",
    list: [
        { l: "<p>I</p> am teaching <p>myself</p> to play the guitar." },
        { s: " " },
        { l: "<p>You</p> should enjoy <p>yourself</p> more!" },
    ]
}));
exp.push(renderer_1.tList({
    t: "We can use a reflexive pronoun as direct object with most transitive verbs",
    list: [
        { l: "Teach yourself to learn a foreign language." },
        { l: "Enjoy yourself! Enjoy yourselves!" },
        { l: "Treat yourself to some cake." },
        { l: "Make yourself at home." },
        { l: "Do it yourself. I did it myself." },
        { l: "Treat yourself to some cake." },
        { l: "Amuse yourself." },
        { l: "Blame yourself." },
        { l: "Cut yourself." },
        { l: "Dry yourself." },
        { l: "Introduce yourself." },
        { l: "Kill yourself." },
        { l: "Satisfy yourself." },
        { l: "Prepare yourself." },
        { l: "Hurt yourself." },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],238:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = "Reflexive Pronouns: myself, yourself, herself...";
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameMale() + ", you should not blame " + constants_1.space + " for the accident.",
        correct: ["yourself"],
        incorrect: ["herself", "yourselves"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Don't worry about her, she can amuse " + constants_1.space + ".",
        correct: ["herself"],
        incorrect: ["himself", "itself"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I just taught to " + constants_1.space + ".",
        correct: ["myself"],
        incorrect: ["ourselves", "itself"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "They don't know us. We never introduced" + constants_1.space + ".",
        correct: ["ourselves"],
        incorrect: ["ourself", "yourselves"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How do you turn this off? It turns " + constants_1.space + " off.",
        correct: ["itself"],
        incorrect: ["herself", "himself"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I cut " + constants_1.space + " while shaving.",
        correct: ["myself"],
        incorrect: ["itself", "himself"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "The members argued amongst " + constants_1.space + " for an hour.",
        correct: ["themselves"],
        incorrect: ["ourselves", "itself"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "We often ask " + constants_1.space + " why we left " + constants_1.capital.places.Manchester + ".",
        correct: ["ourselves"],
        incorrect: ["myself", "itself"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "He treated " + constants_1.space + " to the cake.",
        correct: ["himself"],
        incorrect: ["herself", "itself"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "He " + constants_1.space + " treated me to the cake.",
        correct: ["himself"],
        incorrect: ["myself", "itself"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I thought " + constants_1.space + " " + constants_1.capital.nationalityNoun.English + ".",
        correct: ["myself"],
        incorrect: ["ourselves", "itself"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":237}],239:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: 'A few (for countable nouns) and a little (for uncountable nouns)',
    i: "Describe the quantity in a positive way, implying that although the speaker may not have much, he has enough.",
    list: [
        { l: '' },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],240:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = 'Quantifiers: few, little';
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not many cars",
        correct: ["a few cars"],
        incorrect: ["a little cars"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not much water",
        correct: ["a little water"],
        incorrect: ["a few water"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not much time",
        correct: ["a little time"],
        incorrect: ["a few time"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not much tea",
        correct: ["a little tea"],
        incorrect: ["a few tea"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not much milk",
        correct: ["a little milk"],
        incorrect: ["a few milk"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not many men",
        correct: ["a few men"],
        incorrect: ["a little men"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not many people",
        correct: ["a few people"],
        incorrect: ["a little people"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not many women",
        correct: ["a few women"],
        incorrect: ["a little women"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not much coffee",
        correct: ["a little coffee"],
        incorrect: ["a few coffee"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not many children",
        correct: ["a few children"],
        incorrect: ["a little children"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not much salt",
        correct: ["a little salt"],
        incorrect: ["a few salt"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not much money",
        correct: ["a little money"],
        incorrect: ["a few money"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "He has " + constants_1.space + " plans",
        correct: ["a few"],
        incorrect: ["a little"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I bought " + constants_1.space + " newspapers",
        correct: ["a few"],
        incorrect: ["a little"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "There is only " + constants_1.space + " food in the refrigerator",
        correct: ["a little"],
        incorrect: ["a few"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I have got " + constants_1.space + " friends",
        correct: ["a few"],
        incorrect: ["a little"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I have " + constants_1.space + " flowers in my garden",
        correct: ["a few"],
        incorrect: ["a little"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":239}],241:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: '<p>Much</p> - is use for singular nouns',
    list: [
        { l: 'much milk' },
        { l: 'much water' },
        { l: 'much noise' },
        { l: 'much money' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Many</p> - is use for plural nouns',
    list: [
        { l: 'many problems' },
        { l: 'many friends' },
        { l: 'many people' },
        { l: 'many women' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>A lot of</p> - is use for singular and plural nouns',
    list: [
        { l: 'a lot of time' },
        { l: 'a lot of times' },
        { l: 'a lot of coffee' },
        { l: 'a lot of coffees' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Much</p> cannot replace <p>many</p>, but both of them can be replaced by <p>a lot of</p>',
    list: [
        { eq: ['a lot of people', 'many people'] },
        { eq: ['a lot of women', 'many women'] },
        { eq: ['a lot of traffic', 'much traffic'] },
        { eq: ['a lot of time', 'much time'] },
        { eq: ['a lot of milk', 'much milk'] },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],242:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = 'Quantifiers: much, many, a lot';
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " doctors",
        correct: ["many"],
        incorrect: ["much",],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " houses",
        correct: ["many"],
        incorrect: ["much"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " coffee",
        correct: ["much"],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " sugar",
        correct: ["much"],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " women",
        correct: ["many"],
        incorrect: ["much"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " time",
        correct: ["much"],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " money",
        correct: ["much"],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " cities",
        correct: ["many"],
        incorrect: ["much"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " times",
        correct: ["many"],
        incorrect: ["much"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Not " + constants_1.space + " milk",
        correct: ["much"],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How " + constants_1.space + " money?",
        correct: ["much"],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How " + constants_1.space + " people?",
        correct: ["many"],
        incorrect: ["much"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How " + constants_1.space + " milk?",
        correct: ["much"],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How " + constants_1.space + " work?",
        correct: ["much"],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How " + constants_1.space + " time?",
        correct: ["much",],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How " + constants_1.space + " children?",
        correct: ["many"],
        incorrect: ["much"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How " + constants_1.space + " emails?",
        correct: ["many"],
        incorrect: ["much"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How " + constants_1.space + " beer?",
        correct: ["much"],
        incorrect: ["many"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How " + constants_1.space + " countries?",
        correct: ["many"],
        incorrect: ["much"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Such a lot of children",
        correct: ["so many children"],
        incorrect: ["so much children"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Such a lot of times",
        correct: ["so many times"],
        incorrect: ["so much times"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Such a lot of work",
        correct: ["so much work"],
        incorrect: ["so many work"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Such a lot of houses",
        correct: ["so many houses"],
        incorrect: ["so much houses"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":241}],243:[function(require,module,exports){
var renderer_1 = require('../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: 'To make a plural we add <p>-s</p>, <p>-es</p>, <p>-ies</p>',
    list: [
        { to: ['film', 'films'] },
        { to: ['book', 'books'] },
        { to: ['bank', 'banks'] },
        { to: ['bed', 'beds'] },
        { to: ['city', 'cities'] },
        { to: ['address', 'addresses'] },
        { to: ['university', 'universities'] },
        { to: ['boy', 'boys'] },
        { to: ['day', 'days'] },
    ]
}));
exp.push(renderer_1.tList({
    t: 'Words without <p>-(ie)s</p>',
    list: [
        { to: ['a man', 'men'] },
        { to: ['a woman', 'women'] },
        { to: ['a child', 'children'] },
        { to: ['a person', 'people'] }
    ]
}));
module.exports = {
    exp: exp
};
},{"../helper/renderer":227}],244:[function(require,module,exports){
var constants_1 = require('../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = 'Singular and Plural';
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " email address",
        correct: ["an"],
        incorrect: [constants_1.empty, "a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " artists",
        correct: [constants_1.empty],
        incorrect: ["a", "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " intelligent actor",
        correct: ["an"],
        incorrect: [constants_1.empty, "a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " book",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " private email",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " cake",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " coffee shop",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " cities",
        correct: [constants_1.empty],
        incorrect: ["a", "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " house",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " hospital",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " old book",
        correct: ["an"],
        incorrect: [constants_1.empty, "a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " interesting city",
        correct: ["an"],
        incorrect: [constants_1.empty, "a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " actor",
        correct: ["an"],
        incorrect: [constants_1.empty, "a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " tiger",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " egg",
        correct: ["an"],
        incorrect: [constants_1.empty, "a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " lemon",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " club",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " engineer",
        correct: ["an"],
        incorrect: [constants_1.empty, "a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " emails",
        correct: [constants_1.empty],
        incorrect: ["a", "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " lemons",
        correct: [constants_1.empty],
        incorrect: ["a", "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " houses",
        correct: [constants_1.empty],
        incorrect: ["a", "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " flower",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " cash points",
        correct: [constants_1.empty],
        incorrect: ["a", "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " flowers",
        correct: [constants_1.empty],
        incorrect: ["a", "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " airport",
        correct: ["an"],
        incorrect: [constants_1.empty, "a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " station",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " president",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " prime minister",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " friend",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " friends",
        correct: [constants_1.empty],
        incorrect: ["a", "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " letter",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " postcard",
        correct: ["a"],
        incorrect: [constants_1.empty, "an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " coffees",
        correct: [constants_1.empty],
        incorrect: ["a", "an"],
    }
];
exports.lessons = lessons;
},{"../helper/constants":226,"./explenation":243}],245:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exports.exp = exp;
exp.push(renderer_1.tList({
    t: '<p>Amazing</p>',
    list: [
        { i: 'incredible' },
        { i: 'unbelievable' },
        { i: 'fabulous' },
        { i: 'fantastic' },
        { i: 'astounding' },
        { i: 'extraordinary' },
        { i: 'wonderful' },
        { i: 'improbable' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Angry</p>',
    list: [
        { i: 'furious' },
        { i: 'enraged' },
        { i: 'mad' },
        { i: 'inflamed' },
        { i: 'aroused' },
        { i: 'indignant' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Answer</p>',
    list: [
        { i: 'reply' },
        { i: 'respond' },
        { i: 'retort' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Ask</p>',
    list: [
        { i: 'question' },
        { i: 'request' },
        { i: 'seek information from' },
        { i: 'demand' },
        { i: 'put a question to' },
        { i: 'inquire of' },
        { i: 'put a question to' },
        { i: 'query' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Awful</p>',
    list: [
        { i: 'dreadful' },
        { i: 'terrible' },
        { i: 'bad' },
        { i: 'unpleasant' },
        { i: 'poor' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Bad</p>',
    list: [
        { i: 'spoiled' },
        { i: 'rotten' },
        { i: 'evil' },
        { i: 'immoral' },
        { i: 'corrupt' },
        { i: 'depraved' },
        { i: 'harmful' },
        { i: 'unfavorable' },
        { i: 'wicked' },
        { i: 'defective' },
        { i: 'faulty' },
        { i: 'unsuitable' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Beautiful</p>',
    list: [
        { i: 'pretty' },
        { i: 'lovely' },
        { i: 'handsome' },
        { i: 'attractive' },
        { i: 'gorgeous' },
        { i: 'dazzling' },
        { i: 'elegant' },
        { i: 'splendid' },
        { i: 'magnificent' },
        { i: 'aesthetic' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Begin</p>',
    list: [
        { i: 'start' },
        { i: 'open' },
        { i: 'launch' },
        { i: 'initiate' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Big</p>',
    list: [
        { i: 'enormous' },
        { i: 'huge' },
        { i: 'immense' },
        { i: 'gigantic' },
        { i: 'vast' },
        { i: 'colossal' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Brave</p>',
    list: [
        { i: 'courageous' },
        { i: 'fearless' },
        { i: 'heroic' },
        { i: 'daring' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Break</p>',
    list: [
        { i: 'fracture' },
        { i: 'crash' },
        { i: 'wreck' },
        { i: 'shatter' },
        { i: 'smash' },
        { i: 'rupture' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Bright</p>',
    list: [
        { i: 'brilliant' },
        { i: 'shiny' },
        { i: 'sparkling' },
        { i: 'vivid' },
        { i: 'colorful' },
        { i: 'intelligent' },
        { i: 'knowing' },
        { i: 'smart' },
        { i: 'shining' },
        { i: 'gleaming' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Calm</p>',
    list: [
        { i: 'quiet' },
        { i: 'peaceful' },
        { i: 'still' },
        { i: 'level-headed' },
        { i: 'unexcited' },
        { i: 'mild' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Come</p>',
    list: [
        { i: 'approach' },
        { i: 'arrive' },
        { i: 'reach' },
        { i: 'near' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Cool</p>',
    list: [
        { i: 'chilly' },
        { i: 'cold' },
        { i: 'icy' },
        { i: 'frosty' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Crooked</p>',
    list: [
        { i: 'bent' },
        { i: 'twisted' },
        { i: 'curved' },
        { i: 'hooked' },
        { i: 'zigzag' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Cry</p>',
    list: [
        { i: 'shout' },
        { i: 'yell' },
        { i: 'scream' },
        { i: 'weep' },
        { i: 'sob' },
        { i: 'roar' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Cut</p>',
    list: [
        { i: 'slash' },
        { i: 'nick' },
        { i: 'chop' },
        { i: 'slice' },
        { i: 'carve' },
        { i: 'reduce' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Dangerous</p>',
    list: [
        { i: 'hazardous' },
        { i: 'unsafe' },
        { i: 'uncertain' },
        { i: 'risky' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Dark</p>',
    list: [
        { i: 'gloomy' },
        { i: 'sad' },
        { i: 'shaded' },
        { i: 'dim' },
        { i: 'murky' },
        { i: 'shadowy' },
    ]
}));
},{"../../helper/renderer":227}],246:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.multiRadio];
var title = 'Synonyms A-D';
exports.title = title;
var info = 'Find 3 synonymms for a word:';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Amazing",
        correct: ["Incredible", "Unbelievable", "Fabulous"],
        incorrect: ["Mad", "Reply", "Frosty", "Twisted", "Yell", "Reduce", "Indignant", "Rotten", "Corrupt"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Angry",
        correct: ["Furious", "Enraged", "Mad"],
        incorrect: ["Improbable", "Wonderful", "Rupture", "Smart", "Cry"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Answer",
        correct: ["Reply", "Respond", "Retort"],
        incorrect: ["Bent", "Cold", "Unexcited", "Reduce", "Carve"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Ask",
        correct: ["Question", "Seek information from", "Request"],
        incorrect: ["Shatter", "Scream", "Unsafe", "Shaded", "Risky"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Awful",
        correct: ["Dreadful", "Terrible", "Unpleasant"],
        incorrect: ["Colossal", "Start", "Arrive", "Colorful", "Intelligent"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Bad",
        correct: ["Unsuitable", "Defective", "Faulty"],
        incorrect: ["Immense", "Elegant", "Initiate", "Aesthetic", "Launch"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Beautiful",
        correct: ["Pretty", "Lovely", "Attractive"],
        incorrect: ["Vast", "Faulty", "Harmful", "Unexcited", "Level-headed"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Begin",
        correct: ["Launch", "Start", "Open"],
        incorrect: ["Gigantic", "Shatter", "Shining", "Brilliant", "Shiny"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Big",
        correct: ["Enormous", "Huge", "Immense"],
        incorrect: ["Bright", "Reduce", "Uncertain", "Dim", "Dark"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Brave",
        correct: ["Courageous", "Fearless", "Heroic"],
        incorrect: ["Quiet", "Mild", "Roar", "Dangerous", "Cut"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Break",
        correct: ["Fracture", "Crash", "Shatter"],
        incorrect: ["Hooked", "Sob", "Frosty", "Arrive", "Shining"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Bright",
        correct: ["Brilliant", "Shiny", "Smart"],
        incorrect: ["Yell", "Chop", "Reduce", "Chilly", "Zigzag"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Calm",
        correct: ["Quiet", "Peaceful", "Still"],
        incorrect: ["Reduce", "Scream", "Slash", "Unsafe", "Sad"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Come",
        correct: ["Approach", "Arrive", "Reach"],
        incorrect: ["Reply", "Inflamed", "Elegant", "Smash", "Rupture"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Cool",
        correct: ["Cold", "Icy", "Chilly"],
        incorrect: ["Faulty", "Dazzling", "Colossal", "Poor", "Aroused"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Crooked",
        correct: ["Bent", "Twisted", "Curved"],
        incorrect: ["Daring", "Fearless", "Gigantic", "Aesthetic", "Unsuitable"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Cry",
        correct: ["Shout", "Yell", "Scream"],
        incorrect: ["Wreck", "Brilliant", "Vivid", "Peaceful", "Still"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Cut",
        correct: ["Slash", "Chop", "Slice"],
        incorrect: ["Murky", "Hazardous", "Uncertain", "Crash", "Rupture"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Dangerous",
        correct: ["Hazardous", "Unsafe", "Risky"],
        incorrect: ["Sad", "Twisted", "Chilly", "Roar", "Chop"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Dark",
        correct: ["Gloomy", "Sad", "Murky"],
        incorrect: ["Nick", "Quiet", "Near", "Crash", "Heroic"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":245}],247:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exports.exp = exp;
exp.push(renderer_1.tList({
    t: '<p>Decide</p>',
    list: [
        { l: 'determine' },
        { l: 'choose' },
        { l: 'resolve' },
        { l: 'settle' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Definite</p>',
    list: [
        { l: 'certain' },
        { l: 'sure' },
        { l: 'positive' },
        { l: 'determined' },
        { l: 'clear' },
        { l: 'distinct' },
        { l: 'obvious' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Delicious</p>',
    list: [
        { l: 'delectable' },
        { l: 'appetizing' },
        { l: 'enjoyable' },
        { l: 'delightful' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Describe</p>',
    list: [
        { l: 'portray' },
        { l: 'picture' },
        { l: 'characterize' },
        { l: 'relate' },
        { l: 'narrate' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Destroy</p>',
    list: [
        { l: 'ruin' },
        { l: 'demolish' },
        { l: 'kill' },
        { l: 'end' },
        { l: 'extinguish' },
        { l: 'waste' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Difference</p>',
    list: [
        { l: 'disagreement' },
        { l: 'contrast' },
        { l: 'incompatibility' },
        { l: 'dissimilarity' },
        { l: 'inequity' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Do</p>',
    list: [
        { l: 'execute' },
        { l: 'carry out' },
        { l: 'finish' },
        { l: 'accomplish' },
        { l: 'achieve' },
        { l: 'enact' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Dull</p>',
    list: [
        { l: 'boring' },
        { l: 'uninteresting' },
        { l: 'tiresome' },
        { l: 'tiring' },
        { l: 'slow' },
        { l: 'tedious' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Eager</p>',
    list: [
        { l: 'keen' },
        { l: 'enthusiastic' },
        { l: 'interested' },
        { l: 'involved' },
        { l: 'alive to' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>End</p>',
    list: [
        { l: 'stop' },
        { l: 'finish' },
        { l: 'close' },
        { l: 'terminate' },
        { l: 'halt' },
        { l: 'discontinuance' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Enjoy</p>',
    list: [
        { l: 'appreciate' },
        { l: 'delight in' },
        { l: 'be pleased' },
        { l: 'indulge in' },
        { l: 'like' },
        { l: 'relish' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Explain</p>',
    list: [
        { l: 'elaborate' },
        { l: 'clarify' },
        { l: 'define' },
        { l: 'interpret' },
        { l: 'justify' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Fair</p>',
    list: [
        { l: 'just' },
        { l: 'impartial' },
        { l: 'objective' },
        { l: 'honest' },
        { l: 'unprejudiced' },
        { l: 'unbiased' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Fall</p>',
    list: [
        { l: 'drop' },
        { l: 'plunge' },
        { l: 'descend' },
        { l: 'tumble' },
        { l: 'topple' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>False</p>',
    list: [
        { l: 'fake' },
        { l: 'fraudulent' },
        { l: 'untrue' },
        { l: 'deceptive' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Famous</p>',
    list: [
        { l: 'well-known' },
        { l: 'renowned' },
        { l: 'famed' },
        { l: 'noted' },
        { l: 'distinguished' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Fast</p>',
    list: [
        { l: 'quick' },
        { l: 'rapid' },
        { l: 'speedy' },
        { l: 'hasty' },
        { l: 'quickly' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Fat</p>',
    list: [
        { l: 'chubby' },
        { l: 'plump' },
        { l: 'chunky' },
        { l: 'bulky' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Fear</p>',
    list: [
        { l: 'fright' },
        { l: 'horror' },
        { l: 'panic' },
        { l: 'scare' },
        { l: 'anxiety' },
        { l: 'apprehension' },
        { l: 'terror' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Funny</p>',
    list: [
        { l: 'amusing' },
        { l: 'humorous' },
        { l: 'laughable' },
        { l: 'silly' },
        { l: 'comical' },
    ]
}));
},{"../../helper/renderer":227}],248:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.multiRadio];
var title = 'Synonyms D-F';
exports.title = title;
var info = 'Find 3 synonymms for a word:';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Decide",
        correct: ["Determine", "Choose", "Resolve"],
        incorrect: ["Portray", "Enjoyable", "Demolish", "Uninteresting"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Definite",
        correct: ["Certain", "Sure", "Positive"],
        incorrect: ["Tedious", "Fake", "Deceptive", "Appetizing", "Picture"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Delicious",
        correct: ["Delectable", "Enjoyable", "Delightful"],
        incorrect: ["Keen", "Alive to", "Settle", "Clear", "Waste"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Describe",
        correct: ["Portray", "Picture", "Characterize"],
        incorrect: ["Enthusiastic", "Like", "Deceptive", "Certain", "Clear"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Destroy",
        correct: ["Ruin", "Demolish", "Extinguish"],
        incorrect: ["Eager", "Interested", "Elaborate", "Clarify", "Renowned"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Difference",
        correct: ["Disagreement", "Contrast", "Incompatibility"],
        incorrect: ["Boring", "Justify", "Impartial", "Resolve", "Anxiety"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Do",
        correct: ["Execute", "Carry out", "Accomplish"],
        incorrect: ["Discontinuance", "Delightful", "Relate", "Certain", "Ruin"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Dull",
        correct: ["Boring", "Uninteresting", "Tedious"],
        incorrect: ["Involved", "Untrue", "Resolve", "Waste", "Plump"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Eager",
        correct: ["Keen", "Enthusiastic", "Interested"],
        incorrect: ["Halt", "Fake", "Delightful", "Appetizing", "Choose"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "End",
        correct: ["Stop", "Finish", "Terminate"],
        incorrect: ["Fraudulent", "Untrue", "Picture", "Chubby", "Anxiety"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Enjoy",
        correct: ["Appreciate", "Delight in", "Like"],
        incorrect: ["Close", "Relate", "Settle", "Ruin", "Apprehension"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Explain",
        correct: ["Elaborate", "Clarify", "Define"],
        incorrect: ["Terminate", "Choose", "Waste", "Contrast", "Chubby"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Fair",
        correct: ["Just", "Impartial", "Honest"],
        incorrect: ["Keen", "End", "Clarify", "Interpret", "Certain"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Fall",
        correct: ["Drop", "Plunge", "Descend"],
        incorrect: ["Impartial", "Objective", "Unbiased", "Relish", "Renowned"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "False",
        correct: ["Fake", "Fraudulent", "Deceptive"],
        incorrect: ["Involved", "Elaborate", "Appetizing", "Settle", "Clear"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Famous",
        correct: ["Well-known", "Renowned", "Noted"],
        incorrect: ["Unprejudiced", "Fraudulent", "Enjoyable", "Relate", "Interpret"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Fast",
        correct: ["Quick", "Rapid", "Speedy"],
        incorrect: ["Alive to", "Enthusiastic", "Unprejudiced", "Renowned", "Noted"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Fat",
        correct: ["Chubby", "Chunky", "Bulky"],
        incorrect: ["Unprejudiced", "Justify", "Plunge", "Justify", "Involved"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Fear",
        correct: ["Fright", "Panic", "Horror"],
        incorrect: ["Deceptive", "Tumble", "Quickly", "Plump", "Deceptive"],
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Funny",
        correct: ["Amusing", "Humorous", "Laughable"],
        incorrect: ["Terror", "Chunky", "Speedy", "Famed", "Fake"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":247}],249:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exports.exp = exp;
exp.push(renderer_1.tList({
    t: '<p>Get</p>',
    list: [
        { l: 'acquire' },
        { l: 'obtain' },
        { l: 'gain' },
        { l: 'collect' },
        { l: 'secure' },
        { l: 'earn' },
        { l: 'gather' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Go</p>',
    list: [
        { l: 'depart' },
        { l: 'disappear' },
        { l: 'travel' },
        { l: 'move' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Good</p>',
    list: [
        { l: 'excellent' },
        { l: 'wonderful' },
        { l: 'marvelous' },
        { l: 'fine' },
        { l: 'qualified' },
        { l: 'kindly' },
        { l: 'pleasant' },
        { l: 'generous' },
        { l: 'suitable' },
        { l: 'pleasurable' },
        { l: 'well-behaved' },
        { l: 'obedient' },
        { l: 'agreeable' },
        { l: 'friendly' },
        { l: 'proper' },
        { l: 'reliable' },
        { l: 'satisfactory' },
        { l: 'trustworthy' },
        { l: 'profitable' },
        { l: 'safe' },
        { l: 'favorable' },
        { l: 'great' },
        { l: 'splendid' },
        { l: 'helpful' },
        { l: 'beneficial' },
        { l: 'grand' },
        { l: 'valid' },
        { l: 'righteous' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Great</p>',
    list: [
        { l: 'worthy' },
        { l: 'remarkable' },
        { l: 'mighty' },
        { l: 'powerful' },
        { l: 'considerable' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Gross</p>',
    list: [
        { l: 'rude' },
        { l: 'improper' },
        { l: 'vulgar' },
        { l: 'indecent' },
        { l: 'shameful' },
        { l: 'outrageous' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Happy</p>',
    list: [
        { l: 'pleased' },
        { l: 'contented' },
        { l: 'satisfied' },
        { l: 'delighted' },
        { l: 'cheerful' },
        { l: 'joyful' },
        { l: 'elated' },
        { l: 'glad' },
        { l: 'overjoyed' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Hate</p>',
    list: [
        { l: 'dislike' },
        { l: 'disapprove' },
        { l: 'disfavor' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Have</p>',
    list: [
        { l: 'hold' },
        { l: 'own' },
        { l: 'maintain' },
        { l: 'occupy' },
        { l: 'bear' },
        { l: 'contain' },
        { l: 'possess' },
        { l: 'acquire' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Help</p>',
    list: [
        { l: 'aid' },
        { l: 'assist' },
        { l: 'serve' },
        { l: 'support' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Hide</p>',
    list: [
        { l: 'conceal' },
        { l: 'cover' },
        { l: 'mask' },
        { l: 'camouflage' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Hurry</p>',
    list: [
        { l: 'rush' },
        { l: 'run' },
        { l: 'speed' },
        { l: 'hasten' },
        { l: 'urge' },
        { l: 'race' },
        { l: 'accelerate' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Hurt</p>',
    list: [
        { l: 'harm' },
        { l: 'damage' },
        { l: 'injure' },
        { l: 'wound' },
        { l: 'distress' },
        { l: 'afflict' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Idea</p>',
    list: [
        { l: 'concept' },
        { l: 'thought' },
        { l: 'notion' },
        { l: 'conception' },
        { l: 'plan' },
        { l: 'understanding' },
        { l: 'opinion' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Important</p>',
    list: [
        { l: 'vital' },
        { l: 'necessary' },
        { l: 'critical' },
        { l: 'indispensable' },
        { l: 'valuable' },
        { l: 'essential' },
        { l: 'significant' },
        { l: 'primary' },
        { l: 'principal' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Interesting</p>',
    list: [
        { l: 'fascinating' },
        { l: 'engaging' },
        { l: 'intriguing' },
        { l: 'attractive' },
        { l: 'absorbing' },
        { l: 'inspiring' },
        { l: 'moving' },
        { l: 'tantalizing' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Keep</p>',
    list: [
        { l: 'hold' },
        { l: 'retain' },
        { l: 'withhold' },
        { l: 'preserve' },
        { l: 'sustain' },
        { l: 'maintain' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Kill</p>',
    list: [
        { l: 'execute' },
        { l: 'murder' },
        { l: 'destroy' },
        { l: 'assassinate' },
        { l: 'cancel' },
        { l: 'abolish' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Lazy</p>',
    list: [
        { l: 'indolent' },
        { l: 'sluggish' },
        { l: 'inactive' },
        { l: 'idle' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Little</p>',
    list: [
        { l: 'tiny' },
        { l: 'small' },
        { l: 'microscopic' },
        { l: 'petite' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Look</p>',
    list: [
        { l: 'gaze' },
        { l: 'see' },
        { l: 'glance' },
        { l: 'watch' },
        { l: 'glimpse' },
        { l: 'peek' },
    ]
}));
},{"../../helper/renderer":227}],250:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.multiRadio];
var title = 'Synonyms G-L';
exports.title = title;
var info = 'Find two synonymms for a word:';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Get",
        correct: ["Acquire", "Obtain", "Gain"],
        incorrect: ["Concept", "Inactive", "Gaze", "Peek", "Murder"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Go",
        correct: ["Depart", "Disappear", "Travel"],
        incorrect: ["Grand", "Considerable", "Indispensable", "Primary", "Wound"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Good",
        correct: ["Excellent", "Wonderful", "Fine"],
        incorrect: ["Depart", "Understanding", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Great",
        correct: ["Worthy", "Remarkable", "Mighty"],
        incorrect: ["Critical", "Plan", "Helpful", "Grand", "Indecent"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Gross",
        correct: ["Rude", "Improper", "Vulgar"],
        incorrect: ["Travel", "Occupy", "Assist", "Speed", "Preserve"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Happy",
        correct: ["Pleased", "Contented", "Cheerful"],
        incorrect: ["Depart", "Obedient", "Shameful", "Mask", "Essential"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Hate",
        correct: ["Dislike", "Disapprove", "Disfavor"],
        incorrect: ["Travel", "Joyful", "Righteous", "Valid", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Have",
        correct: ["Hold", "Own", "Maintain"],
        incorrect: ["Fine", "Conception", "Plan", "Accelerate", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Help",
        correct: ["Aid", "Assist", "support"],
        incorrect: ["Depart", "Travel", "Elated", "Valid", "Moving"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Hide",
        correct: ["Conceal", "Cover", "Mask"],
        incorrect: ["Move", "Kindly", "Principal", "Important", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Hurry",
        correct: ["Rush", "Run", "Urge"],
        incorrect: ["Withhold", "Absorbing", "Valuable", "Harm", "Vital"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Hurt",
        correct: ["Harm", "Damage", "Injure"],
        incorrect: ["Depart", "Intriguing", "Inspiring", "Critical", "Disfavor"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Idea",
        correct: ["Concept", "Thought", "Conception"],
        incorrect: ["Travel", "Valuable", "Moving", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Important",
        correct: ["Vital", "Necessary", ""],
        incorrect: ["Depart", "Marvelous", "Intriguing", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Interesting",
        correct: ["Fascinating", "Engaging", "Absorbing"],
        incorrect: ["Microscopic", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Keep",
        correct: ["Hold", "Retain", "Withhold"],
        incorrect: ["Mighty", "Rude", "Small", "Necessary", "Valuable"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Kill",
        correct: ["Execute", "Murder", "Abolish"],
        incorrect: ["Kindly", "Safe", "Maintain", "Preserve", "Sustain"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Lazy",
        correct: ["Indolent", "Sluggish", "Idle"],
        incorrect: ["Travel", "Mask", "Camouflage", "Accelerate", "Significant"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Little",
        correct: ["Tiny", "Small", "Petite"],
        incorrect: ["Depart", "Thought", "Glimpse", "Race", "Afflict"]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Look",
        correct: ["Gaze", "See", "Glance"],
        incorrect: ["Move", "Rude", "Opinion", "Retain", "Conception"]
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":249}],251:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exports.exp = exp;
exp.push(renderer_1.tList({
    t: '<p>Love</p>',
    list: [
        { l: 'like' },
        { l: 'admire' },
        { l: 'fancy' },
        { l: 'care for' },
        { l: 'cherish' },
        { l: 'adore' },
        { l: 'treasure' },
        { l: 'worship' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Make</p>',
    list: [
        { l: 'create' },
        { l: 'design' },
        { l: 'manufacture' },
        { l: 'construct' },
        { l: 'produce' },
        { l: 'build' },
        { l: 'develop' },
        { l: 'do' },
        { l: 'form' },
        { l: 'fabricate' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Mark</p>',
    list: [
        { l: 'label' },
        { l: 'tag' },
        { l: 'price' },
        { l: 'stamp' },
        { l: 'brand' },
        { l: 'sign' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Mischievous</p>',
    list: [
        { l: 'naughty' },
        { l: 'roguish' },
        { l: 'prankish' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Move</p>',
    list: [
        { l: 'go' },
        { l: 'crawl' },
        { l: 'hurry' },
        { l: 'travel' },
        { l: 'wander' },
        { l: 'trek' },
        { l: 'walk' },
        { l: 'run' },
        { l: 'ride' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Moody</p>',
    list: [
        { l: 'touchy' },
        { l: 'changeable' },
        { l: 'short-tempered' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Neat</p>',
    list: [
        { l: 'clean' },
        { l: 'tidy' },
        { l: 'well-organized' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>New</p>',
    list: [
        { l: 'fresh' },
        { l: 'recent' },
        { l: 'modern' },
        { l: 'current' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Old</p>',
    list: [
        { l: 'aged' },
        { l: 'ancient' },
        { l: 'obsolete' },
        { l: 'extinct' },
        { l: 'old-fashioned' },
        { l: 'archaic' },
        { l: 'mature' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Part</p>',
    list: [
        { l: 'portion' },
        { l: 'piece' },
        { l: 'share' },
        { l: 'section' },
        { l: 'fraction' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Place</p>',
    list: [
        { l: 'area' },
        { l: 'location' },
        { l: 'space' },
        { l: 'position' },
        { l: 'region' },
        { l: 'site' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Plan</p>',
    list: [
        { l: 'procedure' },
        { l: 'map' },
        { l: 'scheme' },
        { l: 'draw' },
        { l: 'method' },
        { l: 'arrangement' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Popular</p>',
    list: [
        { l: 'well-liked' },
        { l: 'approved' },
        { l: 'accepted' },
        { l: 'favorite' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Put</p>',
    list: [
        { l: 'place' },
        { l: 'set' },
        { l: 'attach' },
        { l: 'assign' },
        { l: 'establish' },
        { l: '' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Quiet</p>',
    list: [
        { l: 'silent' },
        { l: 'mute' },
        { l: 'soundless' },
        { l: 'still' },
        { l: 'peaceful' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Right</p>',
    list: [
        { l: 'proper' },
        { l: 'suitable' },
        { l: 'good' },
        { l: 'honest' },
        { l: 'correct' },
        { l: 'accurate' },
        { l: 'fair' },
        { l: 'lawful' },
        { l: 'upright' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Run</p>',
    list: [
        { l: 'race' },
        { l: 'hurry' },
        { l: 'rush' },
        { l: 'hasten' },
        { l: 'speed' },
        { l: 'dash' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Say/Tell</p>',
    list: [
        { l: 'inform' },
        { l: 'notify' },
        { l: 'advise' },
        { l: 'explain' },
        { l: 'declare' },
        { l: 'reveal' },
        { l: 'speak' },
        { l: 'remark' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Scared</p>',
    list: [
        { l: 'afraid' },
        { l: 'terrified' },
        { l: 'skittish' },
        { l: 'jumpy' },
        { l: 'frightened' },
        { l: 'fearful' },
        { l: 'panicked' },
        { l: 'alarmed' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Show</p>',
    list: [
        { l: 'display' },
        { l: 'exhibit' },
        { l: 'present' },
        { l: 'explain' },
        { l: 'indicate' },
        { l: 'reveal' },
    ]
}));
},{"../../helper/renderer":227}],252:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.multiRadio];
var title = 'Synonyms L-S';
exports.title = title;
var info = 'Find two synonymms for a word:';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Love",
        correct: ["Like", "Admire", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Make",
        correct: ["Create", "Design", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Mark",
        correct: ["Label", "Tag", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Mischievous",
        correct: ["Naughty", "Roguish", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Move",
        correct: ["Go", "Crawl", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Moody",
        correct: ["Changeable", "Touchy", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Neat",
        correct: ["Clean", "Tidy", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "New",
        correct: ["Fresh", "Recent", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Old",
        correct: ["Ancient", "Aged", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Part",
        correct: ["Portion", "Piece", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Place",
        correct: ["Area", "Location", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Plan",
        correct: ["Procedure", "Map", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Popular",
        correct: ["Well-liked", "Approved", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Put",
        correct: ["Place", "Set", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Quiet",
        correct: ["Silent", "Mute", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Right",
        correct: ["Suitable", "Proper", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Run",
        correct: ["Race", "Hurry", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Say/Tell",
        correct: ["Inform", "Notify", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Scared",
        correct: ["Afraid", "Terrified", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Show",
        correct: ["Display", "Exhibit", ""],
        incorrect: ["", "", "", "", ""]
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":251}],253:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exports.exp = exp;
exp.push(renderer_1.tList({
    t: '<p>Slow</p>',
    list: [
        { l: 'behind' },
        { l: 'unhurried' },
        { l: 'late' },
        { l: 'tedious' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Stop</p>',
    list: [
        { l: 'pause' },
        { l: 'finish' },
        { l: 'halt' },
        { l: 'discontinue' },
        { l: 'end' },
        { l: 'quit' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Story</p>',
    list: [
        { l: 'legend' },
        { l: 'tale' },
        { l: 'myth' },
        { l: 'chronicle' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Strange</p>',
    list: [
        { l: 'odd' },
        { l: 'unusual' },
        { l: 'peculiar' },
        { l: 'unfamiliar' },
        { l: 'weird' },
        { l: 'uncommon' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Strong</p>',
    list: [
        { l: 'powerful' },
        { l: 'intense' },
        { l: 'solid' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Summit</p>',
    list: [
        { l: 'peak' },
        { l: 'top' },
        { l: 'zenith' },
        { l: 'tip' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Steady</p>',
    list: [
        { l: 'constant' },
        { l: 'stable' },
        { l: 'regular' },
        { l: 'fixed' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Sure</p>',
    list: [
        { l: 'certain' },
        { l: 'positive' },
        { l: 'secure' },
        { l: 'reliable' },
        { l: 'definite' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Take</p>',
    list: [
        { l: 'hold' },
        { l: 'capture' },
        { l: 'choose' },
        { l: 'select' },
        { l: 'pick' },
        { l: 'catch' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Tell</p>',
    list: [
        { l: 'disclose' },
        { l: 'reveal' },
        { l: 'uncover' },
        { l: 'explain' },
        { l: 'declare' },
        { l: 'show' },
        { l: 'inform' },
        { l: 'expose' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Terrible</p>',
    list: [
        { l: 'awful' },
        { l: 'dreadful' },
        { l: 'horrible' },
        { l: 'bad' },
        { l: 'horrid' },
        { l: 'frightful' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Think</p>',
    list: [
        { l: 'consider' },
        { l: 'assume' },
        { l: 'reflect' },
        { l: 'contemplate' },
        { l: 'believe' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Trouble</p>',
    list: [
        { l: 'worry' },
        { l: 'distress' },
        { l: 'concern' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>True</p>',
    list: [
        { l: 'right' },
        { l: 'accurate' },
        { l: 'proper' },
        { l: 'actual' },
        { l: 'genuine' },
        { l: 'valid' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Ugly</p>',
    list: [
        { l: 'hideous' },
        { l: 'unpleasant' },
        { l: 'horrible' },
        { l: 'gross' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Unhappy</p>',
    list: [
        { l: 'miserable' },
        { l: 'unfortunate' },
        { l: 'sad' },
        { l: 'depressed' },
        { l: 'melancholy' },
        { l: 'gloomy' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Uncertain</p>',
    list: [
        { l: 'doubtful' },
        { l: 'questionable' },
        { l: 'dubious' },
        { l: 'far-fetched' },
        { l: 'unproven' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Use</p>',
    list: [
        { l: 'spend' },
        { l: 'expend' },
        { l: 'consume' },
        { l: 'utilize' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Weak</p>',
    list: [
        { l: 'frail' },
        { l: 'feeble' },
        { l: 'fragile' },
        { l: 'shaky' },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Wrong</p>',
    list: [
        { l: 'incorrect' },
        { l: 'mistaken' },
        { l: 'improper' },
        { l: 'inaccurate' },
        { l: 'unsuitable' },
    ]
}));
},{"../../helper/renderer":227}],254:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.multiRadio];
var title = 'Synonyms S-W';
exports.title = title;
var info = 'Find two synonymms for a word:';
var lessons = [
    {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Slow",
        correct: ["Behind", "Unhurried", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Stop",
        correct: ["End", "Finish", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Story",
        correct: ["Legend", "Tale", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Strange",
        correct: ["Odd", "Unusual", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Strong",
        correct: ["Powerful", "Intense", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Summit",
        correct: ["Peak", "Top", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Steady",
        correct: ["Constant", "Regular", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Sure",
        correct: ["Certain", "Positive", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Take",
        correct: ["Hold", "Capture", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Tell",
        correct: ["Disclose", "Reveal", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Terrible",
        correct: ["Awful", "Horrible", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Think",
        correct: ["Consider", "Assume", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Trouble",
        correct: ["Worry", "Distress", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "True",
        correct: ["Right", "Accurate", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Ugly",
        correct: ["Hideous", "Unpleasant", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Unhappy",
        correct: ["Miserable", "Unfortunate", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Uncertain",
        correct: ["Doubtful", "Questionable", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Use",
        correct: ["Spend", "Expend", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Weak",
        correct: ["Frail", "Fragile", ""],
        incorrect: ["", "", "", "", ""]
    }, {
        id: constants_1.id(common), title: title, info: info, explenation: explenation,
        name: "Wrong",
        correct: ["Incorrect", "Mistaken", ""],
        incorrect: ["", "", "", "", ""]
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":253}],255:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "The Present Continuous Tense is used:",
    list: []
}));
exp.push(renderer_1.tList({
    t: "For an action going on at the time of speaking.",
    list: [
        { l: "She is writing a letter." },
        { l: "He is walking along the road." },
        { l: "We are playing tennis." },
        { l: "They are discussing the problem." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To describe an event planned in the future.",
    list: [
        { l: "I am meeting my boyfriend tonight." },
        { l: "We are going on holiday tomorrow." },
        { l: "Are they visiting you next winter?" },
        { l: "They are discussing the problem tonight." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To describe an action that is going on during this period of time or a trend.",
    list: [
        { l: "Are you still working for the same company?" },
        { l: "More and more people are becoming vegetarian." }
    ]
}));
exp.push(renderer_1.tList({
    t: "with <p>always</p>, <p>forever</p>, <p>constantly</p>, to describe a continuing series of repeated actions.",
    list: [
        { l: "They are always arguing!" },
        { l: "You are constantly complaining about your mother-in-law!" }
    ]
}));
exp.push(renderer_1.tList({
    t: "Singular",
    list: [
        { l: "I <p>am</p>" },
        { l: "You <p>are</p>" },
        { l: "He, she, it <p>is</p>" },
    ]
}));
exp.push(renderer_1.tList({
    t: "Plural",
    list: [
        { l: "We <p>are</p>" },
        { l: "You <p>are</p>" },
        { l: "They <p>are</p>" },
    ]
}));
exp.push(renderer_1.tList({
    t: "Contracted forms",
    list: [
        { eq: ["I am", "I'm"] },
        { eq: ["is not", "isn't"] },
        { eq: ["are not", "aren't"] },
        { eq: ["he is", "he's"] },
        { eq: ["she is", "she's"] },
        { eq: ["it is", "it's"] },
    ]
}));
exp.push(renderer_1.tList({
    t: "Positive sentence.",
    list: [
        { l: "I <p>am eating</p> a meal." },
        { l: "She <p>is learning</p> a lesson." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Negative sentence.",
    list: [
        { l: "I <p>am not eating</p> a meal." },
        { l: "She <p>is not learning</p> a lesson." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Interrogative sentence.",
    list: [
        { l: "<p>Am</p> I <p>eating</p> a meal?" },
        { l: "<p>Is</p> she <p>learning</p> a lesson?" }
    ]
}));
exp.push(renderer_1.tList({
    t: " ",
    list: [
        { l: "<p>I</p> am going." },
        { l: "I am not going." },
        { l: "Am I going?" },
        { s: " " },
        { l: "<p>You</p> are going." },
        { l: "You aren't going." },
        { l: "Are you going?" },
        { s: " " },
        { l: "<p>He, she, it</p> is going." },
        { l: "He, she, it isn't going." },
        { l: "Is he, she, it going?" },
        { s: " " },
        { l: "<p>We</p> are going." },
        { l: "We aren't going." },
        { l: "Are we going?" },
        { s: " " },
        { l: "<p>You</p> are going." },
        { l: "You aren't going." },
        { l: "Are you going?" },
        { s: " " },
        { l: "<p>They</p> are going." },
        { l: "They aren't going." },
        { l: "Are they going?" },
        { s: " " },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],256:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Present Continuous Tense";
exports.title = title;
var info = 'Build the correct sentence in Present Continuous Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "is", "writing", "a letter"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["You", "are", "studying", constants_1.capital.nationalityNoun.English, "grammar"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["You", "are", "not", "watching", constants_1.capital.things.TV],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["You", "are", "watching", constants_1.capital.things.TV],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Are", "you", "watching", constants_1.capital.things.TV, "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "am", "sitting"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "are", "reading", "their", "books"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "are", "not", "watching", "television"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["What", "are", "you", "doing", "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Why", "aren't", "you", "doing", "your homework?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I am", "not", "reading", "any", "books right now"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I am", "studying", "to become", "an engineer"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "am", "meeting", "some friends", "after work"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I am", "not", "going to", "the party", "tonight"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Are", "you", "still", "watching", constants_1.capital.things.TV + "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Isn't", "she", "coming", "with us", "tonight?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "is", "always", "coming to", "class late"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "is", "constantly", "talking"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She's", "studying", "with her", "friend", "for a week"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He's", "eating", "a lot", "these", "days"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":255}],257:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Present Continuous Tense";
exports.title = title;
var info = 'Build the correct sentence in Present Continuous Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["You", "are", "using", "the", constants_1.capital.things.Internet],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She's", "swimming", "every", "morning"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I'm", "getting", "better", "at playing", "the piano"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["You're", "smoking", "too", "much"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["You're", "always", "losing", "your", "keys!"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She's", "constantly", "missing", "the", "train"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I'm", "meeting", "my", "father", "tomorrow"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I'm", "leaving", "at", "five"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The", "weather", "is", "improving"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I'm", "visiting", "grandpa", "in the", "afternoon"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["You are", "always", "coming", "late", "for the meetings!"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I'm", "taking", "a shower", "now"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I'm riding a bike", "to get to work", "because", "my car is", "broken"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "are", "not talking", "with each", "other"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["My", "boss", "is", "constantly criticising", " me!"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Is", constants_1.getNameFemale(), "having", "breakfast", "now?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Are they", "having", "the party", "on " + constants_1.capital.days.Friday, "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He", "is not", "going to", "school", "tomorrow"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Are", "they", "waiting", "for", constants_1.getNameMale() + "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Is", "he", "waiting", constants_1.capital.things.TV, "?"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":255}],258:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = "Present Continuous Tense";
exports.title = title;
var info = 'Build the correct sentence in Present Continuous Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "This work is good! Your handwriting " + constants_1.space + " better and better.",
        correct: ["is getting"],
        incorrect: ["getting"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Sorry, she can not come to the phone right now. She " + constants_1.space + " a bath.",
        correct: ["is having"],
        incorrect: ["have", "has"],
    }, {
        id: constants_1.id(common, [constants_1.TypeId.multiAnswer]), title: title, explenation: explenation, info: info,
        name: constants_1.space + " you " + constants_1.space + " anything on " + constants_1.capital.days.Saturday + " morning?",
        correct: ["Are " + constants_1.multi + " doing"],
        incorrect: ["Do " + constants_1.multi + " doing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Where is " + constants_1.getNameMale() + "? He is " + constants_1.space + " soccer in the sports hall.",
        correct: ["playing"],
        incorrect: ["having"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I am " + constants_1.space + " tired of you always coming late to class.",
        correct: ["getting"],
        incorrect: ["get"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " you know if he is going next week?",
        correct: ["Do"],
        incorrect: ["Did", "Have"],
    }, {
        id: constants_1.id(common, [constants_1.TypeId.multiAnswer]), title: title, explenation: explenation, info: info,
        name: "You " + constants_1.space + " always " + constants_1.space + " me when I am talking.",
        correct: ["are " + constants_1.multi + " interrupting"],
        incorrect: [constants_1.empty + " " + constants_1.multi + " interrupting"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Why " + constants_1.space + " always raining in " + constants_1.capital.countries.England + "?",
        correct: ["is it"],
        incorrect: [constants_1.empty, "is"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "We can still play tennis. It is not " + constants_1.space + " very hard.",
        correct: ["raining"],
        incorrect: ["rain"],
    }, {
        id: constants_1.id(common, [constants_1.TypeId.multiAnswer]), title: title, explenation: explenation, info: info,
        name: "You " + constants_1.space + " not " + constants_1.space + " very hard today. Is anything wrong?",
        correct: ["are " + constants_1.multi + " working"],
        incorrect: [constants_1.empty + " " + constants_1.multi + " worked"],
    },
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":255}],259:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "The Present Perfect Continuous Tense is used:",
    list: []
}));
exp.push(renderer_1.tList({
    t: "For an action which began at some time in the past and is still continuing.",
    list: [
        { l: "They <p>have been building</p> this bridge for the last nine months." },
        { l: "They <p>have been playing</p> tennis since 4 p.m." },
        { l: "He <p>has been working</p> in this company for a long time." },
        { l: "I <p>have been writing</p> a book for the last one year." },
    ]
}));
exp.push(renderer_1.tList({
    t: "Positive sentence.",
    list: [
        { l: "You <p>have been waiting</p> here for two hours." },
        { l: "I <p>have been living</p>." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Negative sentence.",
    list: [
        { l: "You <p>have not been waiting</p> here for two hours." },
        { l: "I <p>have not been living</p>." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Interrogative sentence.",
    list: [
        { l: "<p>Have</p> you <p>been waiting</p> here for two hours?" },
        { l: "<p>Have I been living</p>?" }
    ]
}));
exp.push(renderer_1.tList({
    t: "Some verbs are not usually used with present perfect continuous because they are not action verbs:",
    i: "believe, belong, depend, hate, know, like, love, mean, need, prefer, realise, suppose, want, understand.",
    list: [
        { l: "I've known him for ten years. -correct." },
        { l: "I've been knowing him for ten years – incorrect." },
        { s: " " },
        { l: "I've belonged to the tennis club for 25 years – correct." },
        { l: "I've been belonging to the tennis club for 25 years – incorrect." },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],260:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Present Perfect Continuous Tense";
exports.title = title;
var info = 'Build the correct sentence in Present Perfect Continuous Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["They", "have", "been", "playing cricket", "since 5p.m."],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "have", "been", "talking", "for the last hour"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["We", "have", "been", "waiting here", "for over two hours!"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: [constants_1.getNameMale(), "has", "not ", "been practicing", "his " + constants_1.capital.nationalityNoun.English],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: [constants_1.getNameFemale(), "has", "been feeling", "a little", "depressed"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The teacher", "has", "been", "teaching", constants_1.capital.nationalityNoun.English],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["Recently,", "I have", "been", "feeling", "really tired"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Have", "you", "been", "exercising", "lately?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She has", "been waiting", "for", "you all", "day"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["Recently, " + constants_1.getNameMale(), "has", "been", "doing", "the work"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["Recently, the work", "has", "been", "done", "by " + constants_1.getNameMale()],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "have", "been", "listening", "to the radio"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "have", "been", "going", "to school"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "has", "been", "swimming"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["It", "has", "been", "living"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "has", "been", "living"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Have", "we", "been", "living", "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["What have", "you", "been", "doing", "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "has", "not", "been", "running"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Has", "she", "been", "reading", "?"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":259}],261:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Present Perfect Continuous Tense";
exports.title = title;
var info = 'Build the correct sentence in Present Perfect Continuous Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "has", "been watching", "too much television", "lately"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: [constants_1.getNameMale(), "has", "been", "teaching at the university", "since " + constants_1.capital.mounths.July],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They have", "been", "travelling", "since last", constants_1.capital.mounths.October],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Why has " + constants_1.getNameFemale(), "not", "been taking her medicine", "for the last", "three days?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["It", "has", "been", "raining"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I have", "been", "reading", "that book", "you lent me"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He", "has", "been", "writing emails", "for 2 hours"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Oh, the kitchen is a mess.", "Who", "has", "been", "cooking?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The university", "has been sending students here", "for over twenty years", "to do work experience"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I have got", "a stiff neck.", "I have been", "working too long", "on computer"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He has", "been", "phoning me", "all week", "for an answer"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["We", "have", "been", "working hard", "on it for ages"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He has", "been", "working here", "since", "2017"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I have", "been", "looking at", "other options", "recently"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["You look tired.", "Have you", "been", "sleeping", "properly?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He", "has", "not", "	been", "working hard"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["What", "has", "he", "been", "waiting for?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He has been", "reading", "in this school", "since 2010"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He has", "not been", "watering", "the plants", "for two hours"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I have", "not", "been studying", "since ", "3 o'clock"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":259}],262:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var common = [constants_1.TypeId.radio];
var title = "Present Perfect Continuous Tense";
exports.title = title;
var info = 'Build the correct sentence in Present Perfect Continuous Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "She's " + constants_1.space + " to her regularly for a couple of years.",
        correct: ["been writing"],
        incorrect: ["writing", "write"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I've " + constants_1.space + " " + constants_1.capital.nationalityAdj.Polish + " for 20 years and I still don't know very much.",
        correct: ["been learning"],
        incorrect: ["learning", "not been learning"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "You look tired. " + constants_1.space + " been sleeping properly?",
        correct: ["Have you"],
        incorrect: ["Did you", "Were you"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I've been waiting for him for 30 minutes and he still " + constants_1.space + ".",
        correct: ["hasn't arrived"],
        incorrect: ["didn't arrived", "had not arrived"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "You " + constants_1.space + " good results over the last few months.",
        correct: ["have not been getting"],
        incorrect: ["have not getting", "You not getting"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I've been " + constants_1.space + " for over an hour. I'm still waiting now.",
        correct: ["waiting"],
        incorrect: ["wait", "waited"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I have no money left because I've been " + constants_1.space + ".",
        correct: ["shopping"],
        incorrect: ["no shopping", "in shop"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "How long have you " + constants_1.space + " " + constants_1.capital.nationalityNoun.English + "?",
        correct: ["been learning"],
        incorrect: ["learning", "learn", "learned"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I've " + constants_1.space + " here for a month.",
        correct: ["been living"],
        incorrect: ["live", "living"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Look at her eyes! I'm sure she has " + constants_1.space + ".",
        correct: ["been crying"],
        incorrect: ["crying", "cry"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":259}],263:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "The Present Perfect Tense is used:",
    list: []
}));
exp.push(renderer_1.tList({
    t: "To indicate activities that completed in the near past.",
    list: [
        { l: "He <p>has</p> just <p>gone</p> out." },
        { l: "They <p>have earned</p> goodwill." },
        { l: "The child <p>has gone</p> to bed." },
        { l: "Sue <p>has broken</p> the glass." },
        { l: "How <p>has</p> she <p>done</p> it?." },
        { l: "They <p>have</p> already <p>won</p>." },
        { l: "He <p>hasn't finished</p> his homework yet." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To indicate actions that happened at an unspecified time before the present.",
    list: [
        { l: "I <p>have been</p> to London." },
        { l: "How many times <p>have</p> you <p>been</p> to London?" },
        { l: "He <p>has learned</p> to speak English." },
        { l: "You <p>have changed</p> so much!" },
        { l: "We <p>have seen</p> this movie ten times." },
        { l: "He <p>has</p> never <p>been</p> so surprised." },
    ]
}));
exp.push(renderer_1.tList({
    t: "States that started in the past, and are still going on.",
    list: [
        { l: "You <p>have been</p> sick since last week." },
        { l: "Since when <p>have</p> you <p>been</p> sick?" },
        { l: "I <p>have thought</p> about it for two hours." },
        { l: "Bob <p>has lived</p> here since 2005." },
        { l: "Sophie <p>has</p> always <p>loved</p> skiing." },
    ]
}));
exp.push(renderer_1.tList({
    t: "Positive sentence.",
    list: [
        { l: "I <p>have eaten</p> a meal." },
        { l: "She <p>has learnt</p> a lesson." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Negative sentence.",
    list: [
        { l: "I <p>have not eaten</p>a  meal." },
        { l: "She <p>has not learnt</p> a lesson." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Interrogative sentence.",
    list: [
        { l: "<p>Have</p> I <p>eaten</p> a meal?" },
        { l: "<p>Has</p> she <p>learnt</p> a lesson?" }
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],264:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Present Perfect Tense";
exports.title = title;
var info = 'Build the correct sentence in Present Perfect Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The", "child", "has", "gone", "to bed"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "have", "bought", "a new", "car"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["You", "have", "told", "a lie"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "have", "gone", "to", "school"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "have", "started", "a job"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["You", "have", "not", "told", "a lie"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "have", "not", "gone", "to school"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Have", "they", "gone", "to", "school?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Have", "they", "bought", "a new", "car?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["It", "has", "rained"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Have", "I", "started", "a job?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: [constants_1.getNameMale(), "has", "not", "left", "for home"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Have", "you", "told", "a lie", "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Has", "it", "rained", "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Has", constants_1.getNameMale(), "left", "for home", "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "have", "not", "bought", "a new car"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The", "guests", "have", "arrived"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The", "guests", "have", "not", "arrived"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["It", "has", "not", "rained"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "have", "not", "started", "a job"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Have", "the", "guests", "arrived", "?"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":263}],265:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var _ = require("underscore");
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Present Perfect Tense";
exports.title = title;
var info = 'Build the correct sentence in Present Perfect Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "have", "walked"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["How long", "has", "it been", "since", "the last time we met?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "has", "swum", "the " + constants_1.capital.places.EnglishChannel, "every summer"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["For six", "generations,", "members of my family", "have been", "doctors"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He", "has", "read", constants_1.capital.books.GameOfThrones],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "have", "just", "finished", "my work"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "has", "been to the cinema", "twice", "this week"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "have not", "lived", "here", "for years"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "have", "lived", "in " + constants_1.capital.places.London, "since 19" + _.sample([83, 78, 91, 82, 79, 81, 80])],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Have you", "played", "the piano", "since you were", "a child?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "have", "worked hard", "this", "week"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["We", "have not", "seen", "her", "today"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Has", "he", "just", "left", "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "has", "studied", constants_1.capital.nationalityAdj.Japanese + " and " + constants_1.capital.nationalityAdj.English],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["We", "have", "just", "seen", "her"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["We", "have", "had", "the same car", "for two years"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "have", "just", "eaten"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["It", "has", "rained", "a lot", "this year"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Have", "you", "seen", constants_1.capital.books.TrueBlood, "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Someone", "has", "eaten", "my sandwich", "!"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":263,"underscore":160}],266:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var _ = require("underscore");
var common = [constants_1.TypeId.radio];
var title = "Present Perfect Tense";
exports.title = title;
var info = 'Build the correct sentence in Present Perfect Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "He has " + constants_1.space + " a letter to " + constants_1.getNameFemale() + ".",
        correct: ["written"],
        incorrect: ["write"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I " + constants_1.space + " studied.",
        correct: ["have"],
        incorrect: ["has"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "He " + constants_1.space + " eaten.",
        correct: ["has"],
        incorrect: ["have"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameMale() + " and " + constants_1.getNameFemale() + " " + constants_1.space + " to " + constants_1.capital.countries.Spain + ".",
        correct: ["have traveled"],
        incorrect: ["had traveled", "traveled"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I " + constants_1.space + " in " + constants_1.capital.places.Madrid + " for one week.",
        correct: ["have been"],
        incorrect: ["been", "was"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameMale() + " " + constants_1.space + " my friend for " + _.sample[2, 4, 6, 8, 9, 12] + " years.",
        correct: ["has been"],
        incorrect: ["had been", "was"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Peter has " + constants_1.space + " a lot of money to his sister.",
        correct: ["not given"],
        incorrect: ["not give", "give"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I have " + constants_1.space + " my teeth.",
        correct: ["brushed"],
        incorrect: ["brush"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " the women left yet?",
        correct: ["Have"],
        incorrect: ["Had", "Does"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " you ever tried chocolate?",
        correct: ["Haven't"],
        incorrect: ["Hasn't"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":263,"underscore":160}],267:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "The Simple Present Tense is used:",
    list: []
}));
exp.push(renderer_1.tList({
    t: "To indicate a habitual action.",
    list: [
        { l: "He drinks coffee every morning." },
        { l: "I go to church regularly." },
        { l: "My mother gets up at 6 a.m. everyday." },
        { l: "I smoke." },
        { l: "I work in London." },
        { l: "We catch the bus every morning." }
    ]
}));
exp.push(renderer_1.tList({
    t: "For fixed arrangements or events.",
    list: [
        { l: "The next bus arrives at 7.45 a.m." },
        { l: "The match starts at 9 a.m." },
        { l: "When does this shop reopen?" },
        { l: "Your exam starts at 08.00." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To express the general truth.",
    list: [
        { l: "The Sun rises in the east." },
        { l: "Honey is sweet." },
        { l: "London is a large city. " },
        { l: "Water freezes at zero degrees." },
        { l: "Her mother is Polish." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To give instructions or directions.",
    list: [
        { l: "You walk for five hundred meters, then you turn left." },
        { l: "Open the packet and pour the contents into hot water." },
        { l: "You take the No.6 bus to Craven Drive and then the No.10 to Clark Avenue." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To introduce a quotation.",
    list: [
        { l: "Keats says, ‘A thing of beauty is joy for ever’." },
        { l: "Bible says, ‘To forgive is divine’." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To express future time, after some conjunctions:",
    i: "after, when, before, as soon as, until.",
    list: [
        { l: "He'll give it to you when you come next Monday." },
        { l: "She'll see you before she leaves." },
        { l: "We'll give it to her when she arrives." },
    ]
}));
exp.push(renderer_1.tList({
    t: "Positive sentence.",
    list: [
        { l: "I think." },
        { l: "He think<p>s</p>." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Negative sentence.",
    list: [
        { l: "I <p>do not</p> think" },
        { l: "He <p>does not</p> think" }
    ]
}));
exp.push(renderer_1.tList({
    t: "Interrogative sentence.",
    list: [
        { l: "<p>Do</p> I think?" },
        { l: "<p>Does</p> he think?" }
    ]
}));
exp.push(renderer_1.tList({
    t: "In the third person.",
    i: "The verb <p>always ends in -s</p>.",
    list: [
        { l: "She want<p>s</p>" },
        { l: "She give<p>s</p>" },
        { l: "He think<p>s</p>" },
        { l: "He need<p>s</p>" },
    ]
}));
exp.push(renderer_1.tList({
    t: "In the third person.",
    i: "Negative and question forms use <p>Does</p>.",
    list: [
        { l: "He <p>wants</p> ice cream. <p>Does</p> he want blueberry? " },
        { l: "He <p>does</p> not want vanilla.</p>" }
    ]
}));
exp.push(renderer_1.tList({
    t: "In the third person.",
    i: "Verbs ending in -y changes the </p>-y</p> to <p>-ies</p>.",
    list: [
        { to: ["fly", "flies"] },
        { to: ["cry", "cries"] }
    ]
}));
exp.push(renderer_1.tList({
    i: "<p>Exception:</p> if there is a vowel before the <p>-y</p>.",
    list: [
        { to: ["play", "plays"] },
        { to: ["pray", "prays"] }
    ]
}));
exp.push(renderer_1.tList({
    i: "Add <p>-es</p> to verbs ending in:<p>-ss, -x, -sh, -ch</p>.",
    list: [
        { l: "He pass<p>es</p>." },
        { l: "She catch<p>es</p>." },
        { l: "He fix<p>es</p>." },
        { l: "It push<p>es</p>." }
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],268:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio, constants_1.TypeId.multiAnswer];
var title = "Simple Present Tense";
exports.title = title;
var info = 'Build the correct sentence in Simple Present Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "The " + constants_1.capital.places.Earth + " " + constants_1.space + " 360º every day. The " + constants_1.capital.places.Moon + " " + constants_1.space + " the " + constants_1.capital.places.Earth + ".",
        correct: ["turns " + constants_1.multi + " orbits"],
        incorrect: ["orbits " + constants_1.multi + " turns"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "The oceans " + constants_1.space + " deep and cold. The oceans " + constants_1.space + " in circular currents.",
        correct: ["are " + constants_1.multi + " move"],
        incorrect: ["move " + constants_1.multi + " are"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.capital.places.Antarctica + " " + constants_1.space + " covered with ice. The " + constants_1.capital.places.SouthPole + " " + constants_1.space + " strong winds.",
        correct: ["is " + constants_1.multi + " has"],
        incorrect: ["has " + constants_1.multi + " is"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Plants " + constants_1.space + " in soil. Plants " + constants_1.space + " us oxygen.",
        correct: ["grow " + constants_1.multi + " give"],
        incorrect: ["give " + constants_1.multi + " grow"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Wind " + constants_1.space + " across the land. Wind " + constants_1.space + " from differences in air pressure.",
        correct: ["blows " + constants_1.multi + " comes"],
        incorrect: ["comes " + constants_1.multi + " blows"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "People " + constants_1.space + " on earth's resources. People " + constants_1.space + " for good health.",
        correct: ["depend " + constants_1.multi + " exercise"],
        incorrect: ["exercise " + constants_1.multi + " depend"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Time " + constants_1.space + " quickly. Daylight savings time " + constants_1.space + " in spring.",
        correct: ["passes " + constants_1.multi + " begins"],
        incorrect: ["begins " + constants_1.multi + " passes"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Rain " + constants_1.space + " water to life. Rain " + constants_1.space + " in the winter.",
        correct: ["gives " + constants_1.multi + " falls"],
        incorrect: ["falls " + constants_1.multi + " gives"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "The land " + constants_1.space + " on plates. Earthquakes " + constants_1.space + " often.",
        correct: ["moves " + constants_1.multi + " occur"],
        incorrect: ["occur " + constants_1.multi + " moves"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Water " + constants_1.space + " at zero degrees. Water " + constants_1.space + " at 100 degrees.",
        correct: ["freezes " + constants_1.multi + " boils"],
        incorrect: ["boils " + constants_1.multi + " freezes"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":267}],269:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Simple Present Tense";
exports.title = title;
var info = 'Build the correct sentence in Simple Present Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "have", "a big", "house"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: [constants_1.getNameMale(), "gives me", "a call", "every", "morning"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "enjoys", "playing", "the", "guitar"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He", "tries", "very", "hard"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The", "party", "starts", "at 8", "o'clock"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "needs", "help", "right", "now"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["Twice", "a week,", constants_1.getNameMale(), "cleans", "the car"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Do", "you", "have", "your passport", "with you?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "is", "not", "here", "now"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["Every", "twelve months", "the " + constants_1.capital.places.Earth, "circles", "the " + constants_1.capital.places.Sun],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He", "works", "at", constants_1.capital.places.McDonalds],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["The", "next train", "leaves", "this evening", "at 6p.m."],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["He", "gets up", "early", "in", "the morning"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "do", "not", "write", "a letter"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The", constants_1.capital.places.Sun, "rises", "in", "the east"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Does", "he", "get up", "early", "in the morning?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "sing", "a song"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "read", "lessons"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Does", "the " + constants_1.capital.places.Sun, "rise", "in", "the east?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: [constants_1.getNameMale(), "reaches", "home", "in", "time"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":267}],270:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Simple Present Tense";
exports.title = title;
var info = 'Build the correct sentence in Simple Present Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Where", "does", "he", "work", "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "do not", "go", "fishing", "at weekends"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Do", "I", "go", "fishing", "at weekends?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Does", "he ever", "put milk", "in his tea", "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["My", "father", "plays", "the", "violin"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Do", "we go", "to", "the cinema", "on " + constants_1.capital.daysPlural.Fridays + "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["A rabbit", "does", "not have", "two", "legs"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["How", "many legs", "does", "a spider", "have?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The", constants_1.capital.places.Earth, "goes", "round", "the " + constants_1.capital.places.Sun],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The " + constants_1.capital.places.Sun, "does", "not", "go round", "the " + constants_1.capital.places.Earth],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["Does", "the " + constants_1.capital.places.Moon, "go", "round", "the " + constants_1.capital.places.Earth + "?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The", "course", "does", "not start", "in " + constants_1.capital.mounths.June],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The train", "leaves", "at half", "past", "six"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "like", "chocolate"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["Water", "is", "liquid", "at room", "temperature"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: [constants_1.getNameMale() + " takes", "the ball,", "then he", "throws", "and scores two points"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: separator, postfix: "",
        correct: ["What", "time", "does", "the train", "leave?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The train", "gets", "in", "at 4 o'clock"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["The oceans", "are", "deep", "and cold"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: [constants_1.capital.places.Antarctica, "is", "covered", "with", "ice"],
    },
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":267}],271:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = "Simple Present Tense";
exports.title = title;
var info = 'Build the correct sentence in Simple Present Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "You " + constants_1.space + " " + constants_1.capital.nationalityAdj.English + ".",
        correct: ["speak"],
        incorrect: ["speaks", "speaking"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.capital.places.NewYork + " " + constants_1.space + " a small city.",
        correct: ["is", "is not"],
        incorrect: ["are", "are not"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "You " + constants_1.space + " " + constants_1.capital.nationalityAdj.English + ".",
        correct: ["do not speak"],
        incorrect: ["do not speaking", "does not speak"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Windows " + constants_1.space + " of glass.",
        correct: ["are made"],
        incorrect: ["is made", "not made"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Chickens " + constants_1.space + " milk.",
        correct: ["do not drink"],
        incorrect: ["do not drinks", "does not drink"],
    }, {
        id: constants_1.id(common, [constants_1.TypeId.multiAnswer]), title: title, explenation: explenation, info: info,
        name: "The bus does " + constants_1.space + " at 10 " + constants_1.capital.clock.am + ", it " + constants_1.space + " at 10 " + constants_1.capital.clock.pm,
        correct: ["not arrive " + constants_1.multi + " arrives"],
        incorrect: ["not arrive " + constants_1.multi + " arrive", "not arrives " + constants_1.multi + " arrives", "not arrive " + constants_1.multi + " does arrive"],
    }, {
        id: constants_1.id(common, [constants_1.TypeId.multiAnswer]), title: title, explenation: explenation, info: info,
        name: "When " + constants_1.space + " class " + constants_1.space + " tomorrow?",
        correct: ["does " + constants_1.multi + " begin"],
        incorrect: ["do " + constants_1.multi + " begin", "does " + constants_1.multi + " begining"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "He " + constants_1.space + " not need help now.",
        correct: ["does"],
        incorrect: ["do", "is", "will"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I " + constants_1.space + " here now.",
        correct: ["am"],
        incorrect: ["was", "are", "did"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.capital.places.Barcelona + " " + constants_1.space + " in the " + constants_1.capital.countries.UnitedKingdom + ".",
        correct: ["is not"],
        incorrect: ["does not", "do not", "are not"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":267}],272:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "The Simple Future Tense is used:",
    list: []
}));
exp.push(renderer_1.tList({
    t: "To predict a future situation.",
    list: [
        { l: "It <p>will</p> rain tomorrow.." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To express willingness.",
    list: [
        { l: "I <p>will</p> do the cleaning." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To express unwillingness.",
    list: [
        { l: "I <p>will not</p> shower tonight." },
        { l: "The baby <p>won't</p> sleep." },
    ]
}));
exp.push(renderer_1.tList({
    t: "To express instant decisions.",
    list: [
        { l: "Let me help you, I <p>will</p> open the door." },
        { l: "The window is open, I <p>will</p> close it." },
    ]
}));
exp.push(renderer_1.tList({
    t: "Positive sentence.",
    list: [
        { l: "I <p>will</p> do it tomorrow." },
        { l: "Mary <p>will</p> help with the cooking." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Negative sentence.",
    list: [
        { l: "I <p>will not</p> do it tomorrow." },
        { l: "Mary <p>will not</p> help with the cooking." },
        { l: "Mary <p>won't</p> help with the cooking." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Interrogative sentence.",
    list: [
        { l: "<p>Will</p> I do it tomorrow?" },
        { l: "<p>Will</p> Mary help with the cooking." }
    ]
}));
exp.push(renderer_1.tList({
    t: "Interrogative negative sentence.",
    list: [
        { l: "<p>Won't</p> I do it tomorrow?" },
        { l: "<p>Won't</p> Mary help with the cooking?" }
    ]
}));
exp.push(renderer_1.tList({
    t: 'Contractions',
    list: [
        { eq: ["I will", "I'll"] },
        { eq: ["You will", "You'll"] },
        { eq: ["He will", "He'll"] },
        { eq: ["She will", "She'll"] },
        { eq: ["We will", "We'll"] },
        { eq: ["They will", "They'll"] },
        { eq: ["Will not", "Won't"] },
        { i: 'The form "it will" is not normally shortened.' }
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],273:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Simple Future Tense";
exports.title = title;
var info = 'Build the correct sentence in Simple Future Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "will", "go", "to", "the shops"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "will", "not", "be attending", "school today"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I will", "return", "in two", "hours"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: '',
        name: separator,
        correct: ["Will", "you", "go", "to the", "party?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: '',
        name: separator,
        correct: ["What time", "will", "they", "arrive?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I will", "not", "go to", "the market", "tomorrow"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["It", "will", "be", "finished"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: '',
        name: separator,
        correct: ["Will", "it", "be", "finished?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "will", "paint", "the fence", "white"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: '',
        name: separator,
        correct: ["When", "will", "it", "be", "cold?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["It will be", "very cold", "in the winter"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I will speak", "to my", "boss", "tomorrow"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["She", "will finish", "her homework", "in five", "minutes"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: '',
        name: separator,
        correct: ["Will", "you", "marry", "me?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["It", "will", "rain", "tomorrow"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: '',
        name: separator,
        correct: ["Who", "will she", "dance", "with?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: '',
        name: separator,
        correct: ["What", "shall I", "tell the boss", "about", "this money?"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["I", "will be", "at the station", "when you arrive"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["Our friend", "will", "not", "come with us"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info, postfix: postfix,
        name: separator,
        correct: ["They", "will", "not", "stop"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":272}],274:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Simple Future Tense";
exports.title = title;
var info = 'Build the correct sentence in Simple Future Tense.';
var lessons = [
    {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameMale() + " will", "get married", "in", constants_1.getMounth()],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["It", "will", "probably", "rain tonight"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameMale(), "will be", "driving", "to work", "tomorrow"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameFemale(), "will", "be", "late"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameFemale() + "will", "pass the exam.", "She is", "hardworking"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["My", "homework", "will be", "due tomorrow"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["The", "sun", "will rise", "at 7a.m."],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameMale(), "will", "finish", "his report", "later today"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I hope", constants_1.getNameMale(), "will have", "a successful", "trip"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["It", "will be", "a nice", "day", "tomorrow"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameMale(), "will", "not", "be", "late"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameFemale(), "will", "be back", "on " + constants_1.getDay(), "afternoon"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I", "will", "close", "the", "window"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["We", "shall", "play", "football"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameFemale(), "will", "not", "come"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["If I have", "enough time,", "I will watch", "the film"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["If it begins to rain,", "I will", "certainly", "need an umbrella"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will they", "be coming", "to", "see us", "next week?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["They", "will be coming", "to", "see us", "next week"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["They", "will", "cook", "dinner"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":272}],275:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Simple Future Tense";
exports.title = title;
var info = 'Build the correct sentence in Simple Future Tense.';
var lessons = [
    {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I", "will", "always", "help", "you"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["When", "will", "they", "leave", "?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I think", "you", "are going to", "marry", "a wrong person"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I", "will", "find", "a", "job"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["We", "will", "eat", "in five", "minutes"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["He", "will", "stay", "for", "dinner"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will", "you", "give", "me", "a hand?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will", "you", "please,", "help", "me?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I hope", "he", "will not", "be disappointed"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will", "you", "come", "with us", "?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["What", "will", "she", "cook?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I will", "fix", "the computer", "as soon", "as I can"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will", "I", "go?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Where", "will", "I", "go?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameFemale(), "will", "turn", "18", "this year"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameMale(), "says", "he", "will", "help us"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I am", "sure", "he will", "like it"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: [constants_1.getNameMale(), "will", "be", "at", "the meeting"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I", "will", "not", "give", "up"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will", "you", "come", "early", "?"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":272}],276:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.oneTwoThree];
var title = "Simple Future Tense";
exports.title = title;
var info = 'Build the correct sentence in Simple Future Tense.';
var lessons = [
    {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["She", "will", "leave", "soon"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will he", "be", "coming home", "today?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["Will our friend", "come with", "us?", "Yes, he will"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["I", "will", "give up", "smoking", "!"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Shall", "I", "open", "the window", "?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will", "you", "buy", "a car?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["He", "will", "be very happy", "when he", "finds out"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will", "you", "go", "shopping", "?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["I", "wonder", "what", "will", "happen?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["We won't", "tell", "anyone", "about", "it"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I", "will not", "stay at home", "if I", "finish", "the homework"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["I", "will", "be", "there", "at 9 p.m."],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["There", "will", "be", "another conference", "next month"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["Will", "they", "leave", "?"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["We will be", "very happy", "if you", "will come", "to my party"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["We", "should finish", "the job", "early if " + constants_1.getNameMale(), "will help us"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: '',
        correct: ["You", "will", "drink", "your milk!"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I think", "I will", "buy", "a", "new car"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I will", "do it", "tomorrow"],
    }, {
        id: constants_1.id(common), name: separator, title: title, explenation: explenation, info: info, postfix: postfix,
        correct: ["I", "will", "not", "go"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":272}],277:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var separator = " ";
var postfix = ".";
var common = [constants_1.TypeId.radio];
var title = "Simple Future Tense";
exports.title = title;
var info = 'Build the correct sentence in Simple Future Tense.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Everything " + constants_1.space + " be fine.",
        correct: ["will"],
        incorrect: ["shall", "won't"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I " + constants_1.space + " open the door. Someone is ringing the bell.",
        correct: ["will"],
        incorrect: [constants_1.empty],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "He " + constants_1.space + " be late again.",
        correct: ["will not"],
        incorrect: ["shall"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " you come to the dance with me?",
        correct: ["Will"],
        incorrect: ["Shall"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Why " + constants_1.space + " you come early?",
        correct: ["will"],
        incorrect: ["do"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameFemale() + " " + constants_1.space + " help with the cooking.",
        correct: ["will"],
        incorrect: ["shall"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I expect " + constants_1.getNameMale() + " " + constants_1.space + " pass his exam.",
        correct: ["will"],
        incorrect: [constants_1.empty],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I " + constants_1.space + " help you.",
        correct: ["will"],
        incorrect: [constants_1.empty],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I " + constants_1.space + " be at a conference next month.",
        correct: ["shall"],
        incorrect: [constants_1.empty],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameFemale() + " " + constants_1.space + " not pass the exam.",
        correct: ["will"],
        incorrect: [constants_1.empty, "shall"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " we cook?",
        correct: ["Will"],
        incorrect: ["Shall"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "The weather tomorrow " + constants_1.space + " sunny and warm.",
        correct: ["will be"],
        incorrect: ["shall be"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I " + constants_1.space + " play football.",
        correct: ["shall"],
        incorrect: ["not"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":272}],278:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: 'Verbs tell us what a person or thing is doing.',
    i: ' The ending of the verb changes depending no who is doing the activity and:',
    list: [
        { l: 'whether it has already happened (past),' },
        { l: 'is happening now (present),' },
        { l: 'or will happen (future).' },
    ]
}));
exp.push(renderer_1.tList({
    list: [
        { eq: ['PAST', 'he walk<p>ed</p>'] },
        { eq: ['PRESENT', 'he walk<p>s</p>'] },
        { eq: ['FUTURE', 'he will be walk<p>ing</p>'] }
    ]
}));
exp.push(renderer_1.tList({
    i: 'Sometimes the spelling of the verb changes when the ending is added.',
    list: [
        { l: '' }
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],279:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = "Verb endings: -s, -ed, -ing";
exports.title = title;
var info = 'Choose the correct tense.';
var PRESENT = 'PRESENT';
var PAST = 'PAST';
var FUTURE = 'FUTURE';
var lessons = [
    {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He jumps",
        correct: [PRESENT],
        incorrect: [PAST, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He kicked",
        correct: [PAST],
        incorrect: [PRESENT, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He saves",
        correct: [PRESENT],
        incorrect: [PAST, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He will be saving",
        correct: [FUTURE],
        incorrect: [PRESENT, PAST],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "She lifted",
        correct: [PAST],
        incorrect: [PRESENT, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "She will be grabbing",
        correct: [FUTURE],
        incorrect: [PRESENT, PAST],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "She jumped",
        correct: [PAST],
        incorrect: [PRESENT, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "She kicked",
        correct: [PAST],
        incorrect: [PRESENT, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He prefers",
        correct: [PRESENT],
        incorrect: [PAST, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "She will be jumping",
        correct: [FUTURE],
        incorrect: [PRESENT, PAST],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He preferred",
        correct: [PAST],
        incorrect: [PRESENT, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "She saved",
        correct: [PAST],
        incorrect: [PRESENT, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He gardened",
        correct: [PAST],
        incorrect: [PRESENT, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He will be gardening",
        correct: [FUTURE],
        incorrect: [PRESENT, PAST],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He gardens",
        correct: [PRESENT],
        incorrect: [PAST, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "She grabbed",
        correct: [PAST],
        incorrect: [PRESENT, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "She will be kicking",
        correct: [FUTURE],
        incorrect: [PRESENT, PAST],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He lifts",
        correct: [PRESENT],
        incorrect: [PAST, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He lifted",
        correct: [PAST],
        incorrect: [PRESENT, FUTURE],
    }, {
        id: constants_1.id(common),
        title: title, explenation: explenation, info: info,
        name: "He will be lifting",
        correct: [FUTURE],
        incorrect: [PRESENT, PAST],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":278}],280:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: 'Two forms: <p>have</p> and <p>has</p>',
    list: [
        { l: 'I have' },
        { l: 'you have' },
        { l: 'he, she, it has' },
        { l: 'we have' },
        { l: 'you have' },
        { l: 'they have' }
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Have</p> and <p>has</p> often come with <p>got</p>',
    i: 'The meaning remains the same',
    list: [
        { eq: ['I have', 'I have <p>got</p>'] },
        { eq: ['he has', 'he has <p>got</p>'] },
    ]
}));
exp.push(renderer_1.tList({
    t: '<p>Have</p> often come with <p>some, any, no</p> and <p>one</p>',
    list: [
        { l: 'Have you got <p>any</p> money?' },
        { l: 'Yes, I have (got) <p>some</p>.' },
        { l: 'No, I have not got <p>any</p>.' },
        { s: ' ' },
        { l: 'Have you got <p>any</p> books?' },
        { l: 'Yes, I have (got) <p>some</p>.' },
        { l: 'No, I have not got <p>any</p>.' },
        { s: ' ' },
        { l: 'Have you got <p>a</p> car?' },
        { l: 'Yes, I have (got) <p>one</p>.' },
        { l: 'No, I have not got <p>one</p>.' }
    ]
}));
exp.push(renderer_1.tList({
    t: 'Negation of Noun Phrases with <p>not</p>',
    list: [
        { l: 'I have <p>not</p> got any money.' }
    ]
}));
exp.push(renderer_1.tList({
    t: 'Negation of Verb Phrases with <b>no</b>',
    list: [
        { l: 'I have <p>no</p> money.' }
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],281:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = "Verb: have, has";
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Have you got a book? Yes, " + constants_1.space + ".",
        correct: ["I have"],
        incorrect: ["I have not", "he has"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Have you got any cash? No, " + constants_1.space + ".",
        correct: ["I have not"],
        incorrect: ["I have", "she has not"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Have you got a boyfriend? Yes, " + constants_1.space + ".",
        correct: ["I have"],
        incorrect: ["I have not", "I haven't"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Has " + constants_1.getSurname() + " got any money? No, " + constants_1.space + ".",
        correct: ["he has not"],
        incorrect: ["he have", "he has"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Have they got a new house? Yes, " + constants_1.space + ".",
        correct: ["they have"],
        incorrect: ["they haven't", "they have not"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Has he got a job? No, " + constants_1.space + ".",
        correct: ["he hasn't"],
        incorrect: ["he has", "she has not"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Have you got " + constants_1.space + " credit cards?",
        correct: ["any"],
        incorrect: ["one"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Have you got " + constants_1.space + " cash?",
        correct: ["any"],
        incorrect: ["one"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Have you got any cash? Yes, I have " + constants_1.space + ".",
        correct: ["some"],
        incorrect: ["one"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Has " + constants_1.getNameFemale() + " got any books? Yes, she has " + constants_1.space + ".",
        correct: ["some"],
        incorrect: ["one"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Has " + constants_1.getNameMale() + " got a credit card? Yes, he has " + constants_1.space + ".",
        correct: ["one"],
        incorrect: ["some"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Have you got any insurance? Yes, we have " + constants_1.space + ".",
        correct: ["some"],
        incorrect: ["one"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameMale() + " has " + constants_1.space + " job.",
        correct: ["no"],
        incorrect: ["not"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameMale() + " has " + constants_1.space + " money this month.",
        correct: ["no"],
        incorrect: ["not"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "They have " + constants_1.space + " time today.",
        correct: ["no"],
        incorrect: ["not"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I have " + constants_1.space + " got any time today.",
        correct: ["not"],
        incorrect: ["no"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "She has " + constants_1.space + " got any friends there.",
        correct: ["not"],
        incorrect: ["no"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameMale() + " has " + constants_1.space + " got a book",
        correct: ["not"],
        incorrect: ["no"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Have we got " + constants_1.space + " batteries?",
        correct: ["any"],
        incorrect: ["some"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":280}],282:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: 'Present',
    list: [
        { l: 'I <p>am</p>' },
        { l: 'you <p>are</p>' },
        { l: 'he, she, it <p>is</p>' },
        { l: 'we <p>are</p>' },
        { l: 'you <p>are</p>' },
        { l: 'they <p>are</p>' }
    ]
}));
exp.push(renderer_1.tList({
    t: 'Past',
    list: [
        { l: 'I <p>was</p>' },
        { l: 'you <p>were</p>' },
        { l: 'he, she, it <p>was</p>' },
        { l: 'we <p>were</p>' },
        { l: 'you <p>were</p>' },
        { l: 'they <p>were</p>' }
    ]
}));
exp.push(renderer_1.tList({
    t: 'Negation',
    list: [
        { l: 'I am <p>not</p>' },
        { l: 'I was <p>not</p>' },
        { l: 'he, she, it was <p>not</p>' },
        { l: 'we are <p>not</p>' },
        { l: 'they were <p>not</p>' }
    ]
}));
exp.push(renderer_1.tList({
    t: 'Questions',
    list: [
        { l: 'They <p>are</p> tired.' },
        { l: '<p>Are</p> they tired?' },
    ]
}));
exp.push(renderer_1.tList({
    t: 'Answers',
    list: [
        { l: 'Are you tired?' },
        { l: '-Yes.' },
        { l: '-Yes, I am tired.' },
        { s: ' ' },
        { l: 'Are you hungry?' },
        { l: '-Yes.' },
        { l: '-Yes, I am hungry.' },
        { s: ' ' },
        { l: 'Are you sleepy?' },
        { l: '-No.' },
        { l: '-No, I am not sleepy.' }
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],283:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var title = 'Verb: "to be" in present and past';
exports.title = title;
var toPlural = 'Change to plural.';
var toSingular = 'Change to singular.';
var toPast = 'Change to Past Tense.';
var toPresent = 'Change to Present Tense.';
var common = [constants_1.TypeId.radio];
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "Those girls were beautiful.",
        correct: ["That girl was beautiful"],
        incorrect: ["That girl is beautiful"],
        info: toSingular,
    }, {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "Those boys are clever.",
        correct: ["That boy is clever."],
        incorrect: ["That boy was clever."],
        info: toSingular,
    }, {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "Those girls were beautiful.",
        correct: ["That girl was beautiful."],
        incorrect: ["That girl is beautiful."],
        info: toSingular,
    }, {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "This house was old.",
        correct: ["Those houses were old."],
        incorrect: ["Those houses are old."],
        info: toPlural,
    }, {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "This flower is beautiful.",
        correct: ["Those flowers are beautiful."],
        incorrect: ["Those flowers was beautiful."],
        info: toPlural,
    }, {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "That child was unhappy.",
        correct: ["Those children were unhappy."],
        incorrect: ["Those children are unhappy."],
        info: toPlural,
    }, {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "That woman is intelligent.",
        correct: ["Those women are intelligent."],
        incorrect: ["Those women were intelligent."],
        info: toPlural,
    }, {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "I am an engineer.",
        correct: ["I was an engineer."],
        incorrect: ["I shall be an engineer.", "I would be an engineer."],
        info: toPast,
    }, {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "This house is old.",
        correct: ["This house was old."],
        incorrect: ["Those houses were old.", "Those houses are old."],
        info: toPast,
    }, {
        id: constants_1.id(common), title: title, explenation: explenation,
        name: "Those children were short.",
        correct: ["Those children are short."],
        incorrect: ["Those children aren't short."],
        info: toPresent,
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":282}],284:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.inradio];
var title = "'An' or 'a'?";
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " excellent teacher",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " really beautiful eagle",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " hour for lunch",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " unit",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " european",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " itchy sweater",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " ugly duck",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " " + constants_1.capital.people.Englishman,
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " dancer",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " engineer",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " " + constants_1.capital.people.Catholic,
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " island",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " awkward",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " bird",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " shoe",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " old man?",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " cake",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " accident",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " pencil",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " enormous",
        correct: ["an"],
        incorrect: ["a"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":288}],285:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.inradio];
var title = "'An' or 'a'?";
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameMale() + " gave me " + constants_1.space + " apple.",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " table is big.",
        correct: ["A"],
        incorrect: ["An"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "She gave me " + constants_1.space + " kiss.",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I can see " + constants_1.space + " herd of elephants.",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I'd like " + constants_1.space + " orange.",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Would you like " + constants_1.space + " drink?",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I'm getting " + constants_1.space + " cat next week.",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "There's " + constants_1.space + " insect in my hair!",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Would you like " + constants_1.space + " cup of tea?",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I'm putting together " + constants_1.space + " album of photos for my nana.",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I'm making " + constants_1.space + " cheese sandwich.",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I need " + constants_1.space + " x-ray because I hurt my leg.",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I'm moving to " + constants_1.space + " house in the city center this summer.",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I would like to be " + constants_1.space + " actress.",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " " + constants_1.capital.abbreviations.UFO + " is unidentified flying object.",
        correct: ["A"],
        incorrect: ["An"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "That has " + constants_1.space + " unknown answer.",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I'll be ready in " + constants_1.space + " hour.",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I saw " + constants_1.space + " elephant.",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I saw " + constants_1.space + " pink elephant.",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I was born in " + constants_1.space + " town.",
        correct: ["a"],
        incorrect: ["an"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":288}],286:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.inradio];
var title = "'An' or 'a'?";
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " cat",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " very nice lady",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " game of golf",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " easy job",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " " + constants_1.capital.people.Peruvian,
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " interesting film",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " old man",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " university",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " honest man",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " one-day conference",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " omelette for lunch",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " hour",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " game of golf",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " human emotion",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " " + constants_1.capital.abbreviations.FBI + " agent",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " purple onion",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " big apple",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " orbit",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " uprising",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " buffalo",
        correct: ["a"],
        incorrect: ["an"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":288}],287:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.inradio];
var title = "'An' or 'a'?";
exports.title = title;
var info = 'Choose the correct answer.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " honest error",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " union",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " unicorn",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " one-legged man",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " egg",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " used napkin",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " policeman",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " movie",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " idiot",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " dog",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " horse",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " orphan",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " broken egg",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " unusual problem",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " teacher",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " practicing " + constants_1.capital.people.Buddhist,
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " bottle of water",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " new glass of milk",
        correct: ["a"],
        incorrect: ["an"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " eagle",
        correct: ["an"],
        incorrect: ["a"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + " invitation",
        correct: ["an"],
        incorrect: ["a"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":288}],288:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "",
    list: [
        { l: "The sound of a word's first letter shows you whether to say <p>a</p> or <p>an</p>." },
        { l: "If the word starts with a vowel sound, use <p>an</p>" },
        { l: "if it starts with a consonant sound, use <p>a</p>." },
        { l: "Be careful - it's about the way things <p>sound</p>. So you say 'an hour' not 'a hour'." },
        { l: "<p>H</p> is a consonant, but in the word <p>hour</p> it makes a vowel sound." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>A</p> is used before singular, countable nouns which begin with <p>consonant</p> sounds.",
    list: [
        { l: "a teacher" },
        { l: "a laptop" },
        { l: "a car" },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>An</p> is used before singular, countable nouns which begin with <p>vowel</p> sounds.",
    list: [
        { l: "an actor" },
        { l: "an elephant" },
        { l: "an invitation" },
    ]
}));
exp.push(renderer_1.tList({
    t: "Remember",
    list: [
        { i: "<p>A, AN</p> means <p>one</p> or <p>a single</p>." },
        { i: "You cannot use <p>A, AN</p> with plural nouns." },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],289:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = 'Either and Neither';
exports.title = title;
var info = 'Find the correct form.';
var lessons = [
    {
        id: constants_1.id(common, [constants_1.TypeId.multiAnswer]), title: title, explenation: explenation, info: info,
        name: "In this game, you " + constants_1.space + " win " + constants_1.space + " lose. It depends on you.",
        correct: ["either " + constants_1.multi + " or"],
        incorrect: ["neither " + constants_1.multi + " nor"],
    }, {
        id: constants_1.id(common, [constants_1.TypeId.multiAnswer]), title: title, explenation: explenation, info: info,
        name: constants_1.space + " " + constants_1.getNameMale() + " " + constants_1.space + " " + constants_1.getNameFemale() + " will help you with your work. They are both busy at the moment.",
        correct: ["Neither " + constants_1.multi + " nor"],
        incorrect: ["Either " + constants_1.multi + " or"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I don't speak " + constants_1.capital.nationalityAdj.German + ". You don't " + constants_1.space + ".",
        correct: ["either"],
        incorrect: ["neither"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "She didn't like " + constants_1.space + " of them.",
        correct: ["either"],
        incorrect: ["neither"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Doesn't he like " + constants_1.space + " of them?",
        correct: ["either"],
        incorrect: ["neither"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Neither... " + constants_1.space,
        correct: ["...nor"],
        incorrect: ["...or"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "Either... " + constants_1.space,
        correct: ["...or"],
        incorrect: ["...nor"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "We " + constants_1.space + " a negative verb with 'neither'.",
        correct: ["don't use"],
        incorrect: ["use"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "We use a negative verb with " + constants_1.space + ".",
        correct: ["either"],
        incorrect: ["neither"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "He isn't ready to go. We aren't " + constants_1.space + ".",
        correct: ["either"],
        incorrect: ["neither"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I cannot understand " + constants_1.capital.nationalityAdj.English + ". " + constants_1.space + ".",
        correct: ["I can't either"],
        incorrect: ["Neither I"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I would like a glass of water. " + constants_1.space + ".",
        correct: ["So would I"],
        incorrect: ["So either I"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I'm not happy. " + constants_1.space + ".",
        correct: ["Neither am I"],
        incorrect: ["so either I"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I don't drink alcohol. " + constants_1.space + ".",
        correct: ["Neither do I"],
        incorrect: ["So do I"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I have never won anything. " + constants_1.space + ".",
        correct: ["Neither have I"],
        incorrect: ["I didn't either"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "I hate driving. " + constants_1.space + ".",
        correct: ["so do I"],
        incorrect: ["neither I"],
    }, {
        id: constants_1.id(common, [constants_1.TypeId.multiAnswer]), title: title, explenation: explenation, info: info,
        name: "No one knows that lyrics. " + constants_1.space + " my brother " + constants_1.space + " my mother.",
        correct: ["Neither " + constants_1.multi + " nor"],
        incorrect: ["Either " + constants_1.multi + " or"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":290}],290:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "<p>Either</p>... <p>or</p> is used to offer a choice between two possibilities",
    list: [
        { l: "<p>Either</p> Mike <p>or</p> Rob will be there." },
        { l: "<p>Either</p> you leave me alone <p>or</p> I will call the police." },
        { l: "You can <p>either</p> help us <p>or</p> go to your home." },
        { l: "We should bring <p>either</p> tea <p>or</p> coffee." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>Either</p> can be followed by (one) <p>of</p> + group of two",
    list: [
        { l: "<p>Either of</p> us could bring it." },
        { l: "<p>Either one of</p> us could bring it." },
        { s: " " },
        { l: "<p>Either of</p> you should know" },
        { l: "<p>Either one of</p> you should know" },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>Not</p>... <p>either</p>... <p>or</p> denies both possibilities",
    list: [
        { l: "I <p>don't</p> think <p>either</p> Mike <p>or</p> Rob will be there." },
        { l: "She <p>doesn't</p> speak <p>either</p> English <p>or</p> German." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>Not</p>... <p>either</p>... is used after a negative statement.",
    list: [
        { l: "I don't speak German." },
        { l: "You don't either." },
        { s: " " },
        { l: "He isn't ready to go." },
        { l: "We aren't either." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>Neither</p>... <p>nor</p>",
    i: "<p>Neither...</p> <p>nor</p> is equivalent to <p>not</p>... <p>either</p>... <p>or</p>.",
    list: [
        { l: "<p>Neither</p> Mike <p>nor</p> Rob will be there." },
        { l: "She speaks <p>neither</p> English <p>nor</p> German." },
        { l: "We brought <p>neither</p> coffee <p>nor</p> tea." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>Neither</p> can be followed by (one) of + group of two.",
    list: [
        { l: "<p>Neither of</p> them is ready." },
        { l: "<p>Neither one of</p> them is ready." },
        { s: " " },
        { l: "<p>Neither of</p> us has any money." },
        { l: "<p>Neither one of</p> us has any money." },
    ]
}));
exp.push(renderer_1.tList({
    t: "<p>Neither</p> is used like <p>not</p>... <p>either</p>.",
    list: [
        { l: "I don't speak German." },
        { l: "<p>Neither</p> do I." },
        { l: "Me <p>neither</p>." },
        { s: " " },
        { l: "He isn't ready to go." },
        { l: "<p>Neither</p> are we." },
    ]
}));
exp.push(renderer_1.tList({
    t: "Remember",
    list: [
        { eq: ["either", "(means) one"] },
        { eq: ["neither", "(means) none"] },
        { eq: ["not either ", "neither"] },
        { s: " " },
        { eq: ["<p>or</p>", "goes with", "<p>either</p>"] },
        { eq: ["<p>nor</p>", "goes with", "<p>neither</p>"] }
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],291:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "When we add <p>ing</p> to a verb, we have to <p>take care</p> with spelling.",
    list: []
}));
exp.push(renderer_1.tList({
    t: "Remember to drop the <p>e</p> and add <p>-ing</p>.",
    list: [
        { to: ["abate", "abating"] },
        { to: ["ache", "aching"] },
        { to: ["bathe", "bathing"] },
        { to: ["believe", "believing"] },
        { to: ["bite", "biting"] },
        { to: ["care", "caring"] },
        { to: ["delete", "deleting"] },
        { to: ["dive", "diving"] },
        { to: ["enslave", "enslaving"] },
        { to: ["excite", "exciting"] },
        { to: ["file", "filing"] },
        { to: ["gripe", "griping"] },
        { to: ["hope", "hoping"] },
        { to: ["joke", "joking"] },
        { to: ["live", "living"] },
        { to: ["make", "making"] },
        { to: ["parade", "parading"] },
        { to: ["paste", "pasting"] },
        { to: ["raise", "raising"] },
        { to: ["revile", "reviling"] },
        { to: ["save", "saving"] },
        { to: ["taste", "tasting"] },
        { to: ["glue", "gluing"] },
        { to: ["rue", "ruing"] },
        { to: ["sue", "suing"] },
    ]
}));
exp.push(renderer_1.tList({
    t: "Remember when verb ends <p>-ie</p>, change <p>-ie</p> to <p>-y</p> and add <p>-ing</p>.",
    list: [
        { to: ["die", "dying"] },
        { to: ["lie", "lying"] },
        { to: ["tie", "tying"] },
        { to: ["vie", "vying"] },
    ]
}));
exp.push(renderer_1.tList({
    t: "Remember when verb ends in <p>-y</p>, add <p>-ing</p>.",
    list: [
        { to: ["pry", "prying"] },
        { to: ["spy", "spying"] },
        { to: ["pray", "praying"] },
        { to: ["spay", "spaying"] },
    ]
}));
exp.push(renderer_1.tList({
    t: "Remember when verb ends in a <p>vowel</p> + <p>one consonant</p>, double the consonant and add <p>-ing</p>.",
    list: [
        { to: ["beg", "begging"] },
        { to: ["chat", "chatting"] },
        { to: ["dig", "digging"] },
        { to: ["fit", "fitting"] },
        { to: ["grin", "grinning"] },
        { to: ["grip", "gripping"] },
        { to: ["hop", "hopping"] },
        { to: ["mix", "mixing"] },
        { to: ["nip", "nipping"] },
        { to: ["pin", "pinning"] },
        { to: ["quit", "quitting"] },
        { to: ["rip", "ripping"] },
        { to: ["sit", "sitting"] },
        { to: ["tip", "tipping"] },
        { to: ["win", "winning"] }
    ]
}));
exp.push(renderer_1.tList({
    t: "Remember when verb ends ends in a <p>stressed vowel</p> + <p>r</p>, double the <p>r</p> and add <p>-ing</p>. In an <p>unstressed vowel</p> + <p>r</p>, do not double, the <p>r</p>.",
    list: [
        { to: ["confer", "conferring"] },
        { to: ["defer", "deferring"] },
        { to: ["refer", "referring"] },
        { to: ["answer", "answering"] },
        { to: ["offer", "offering"] },
        { to: ["suffer", "suffering"] },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],292:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = 'Spellings verbs -ing';
exports.title = title;
var info = 'Find the correct form.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "hope",
        correct: ["hoping"],
        incorrect: ["hopeing", "hopping"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "bake",
        correct: ["baking"],
        incorrect: ["bakeing", "bakking"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "clap",
        correct: ["clapping"],
        incorrect: ["claping", "clapeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "win",
        correct: ["winning"],
        incorrect: ["wining", "wineing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "spin",
        correct: ["spinning"],
        incorrect: ["spining", "spineing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "fit",
        correct: ["fitting"],
        incorrect: ["fiteing", "fiting"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "slip",
        correct: ["slipping"],
        incorrect: ["slipeing", "sliping"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "swim",
        correct: ["swimming"],
        incorrect: ["swiming", "swimmming"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "make",
        correct: ["making"],
        incorrect: ["makeing", "makking"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "shut",
        correct: ["shutting"],
        incorrect: ["shuting", "shuteing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "lose",
        correct: ["losing"],
        incorrect: ["lossing", "loseing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "file",
        correct: ["filing"],
        incorrect: ["filling", "fileing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "paste",
        correct: ["pasting"],
        incorrect: ["pasteing", "pastting"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "hope",
        correct: ["hoping"],
        incorrect: ["hopeing", "hopping"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "die",
        correct: ["dying"],
        incorrect: ["dieing", "diying"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "chat",
        correct: ["chatting"],
        incorrect: ["chating", "chateing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "tie",
        correct: ["tying"],
        incorrect: ["tieing", "tiing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "confer",
        correct: ["conferring"],
        incorrect: ["confering", "confeying"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "suffer",
        correct: ["suffering"],
        incorrect: ["sufferring", "sufferying"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "spray",
        correct: ["spraying"],
        incorrect: ["spraing", "sprayying"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":291}],293:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = 'Spellings verbs -ing';
exports.title = title;
var info = 'Find the correct form.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "feel",
        correct: ["feeling"],
        incorrect: ["feelling"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "go",
        correct: ["going"],
        incorrect: ["goeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "have",
        correct: ["having"],
        incorrect: ["haveing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "take",
        correct: ["taking"],
        incorrect: ["takeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "sleep",
        correct: ["sleeping"],
        incorrect: ["sleepping"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "happen",
        correct: ["happening"],
        incorrect: ["happeening"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "get",
        correct: ["getting"],
        incorrect: ["geting"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "enter",
        correct: ["entering"],
        incorrect: ["enterring"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "fix",
        correct: ["fixing"],
        incorrect: ["fixeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "die",
        correct: ["dying"],
        incorrect: ["dieing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "snow",
        correct: ["snowing"],
        incorrect: ["snowwing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "refer",
        correct: ["referring"],
        incorrect: ["refering"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "whisper",
        correct: ["whispering"],
        incorrect: ["whisperring"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "offer",
        correct: ["offering"],
        incorrect: ["offerring"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "tune",
        correct: ["tuning"],
        incorrect: ["tunning"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "take",
        correct: ["taking"],
        incorrect: ["takeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "come",
        correct: ["coming"],
        incorrect: ["comming"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "hide",
        correct: ["hiding"],
        incorrect: ["hideing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "fake",
        correct: ["faking"],
        incorrect: ["fakking"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "boil",
        correct: ["boiling"],
        incorrect: ["boilling"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":291}],294:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio];
var title = 'Spellings verbs -ing';
exports.title = title;
var info = 'Find the correct form.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "live",
        correct: ["living"],
        incorrect: ["liveing", "livving"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "glue",
        correct: ["gluing"],
        incorrect: ["glueing", "gluuing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "ache",
        correct: ["aching"],
        incorrect: ["acheing", "achhing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "run",
        correct: ["running"],
        incorrect: ["runeing", "runing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "lie",
        correct: ["lying"],
        incorrect: ["lieing", "liing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "spy",
        correct: ["spying"],
        incorrect: ["spyying", "sping"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "beg",
        correct: ["begging"],
        incorrect: ["beging", "begeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "tip",
        correct: ["tipping"],
        incorrect: ["tiping", "tipeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "answer",
        correct: ["answering"],
        incorrect: ["answerring", "answerrring"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "defer",
        correct: ["deferring"],
        incorrect: ["defering", "deffering"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "slip",
        correct: ["slipping"],
        incorrect: ["sliping", "slipeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "stare",
        correct: ["staring"],
        incorrect: ["stareing", "stareeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "jog",
        correct: ["jogging"],
        incorrect: ["joging", "jogeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "hit",
        correct: ["hitting"],
        incorrect: ["hiting", "hittting"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "plan",
        correct: ["planning"],
        incorrect: ["planing", "planeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "be",
        correct: ["being"],
        incorrect: ["beeing", "beying"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "sing",
        correct: ["singing"],
        incorrect: ["singging", "singeing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "try",
        correct: ["trying"],
        incorrect: ["tryying", "tring"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "quit",
        correct: ["quitting"],
        incorrect: ["quiting", "quiteing"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: "rain",
        correct: ["raining"],
        incorrect: ["rainning", "raineing"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":291}],295:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "",
    list: [
        { l: "You can add prefixes to the <p>beginning</p> of some words to change their meanings." },
        { s: " " },
        { to: ["happy", "<p>un</p>happy"] },
        { s: " " },
        { l: "Different prefixes different things." },
        { eq: ["un", "not"] },
        { eq: ["dis", "not"] },
        { eq: ["re", "again"] },
        { eq: ["pre", "before"] },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],296:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.inradio, constants_1.TypeId.noSpace];
var title = "Prefixes: re, dis, pre, un";
exports.title = title;
var info = 'Make the word mean the opposite.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "able",
        correct: ["un"],
        incorrect: ["dis"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "popular",
        correct: ["un"],
        incorrect: ["dis"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "appear",
        correct: ["dis"],
        incorrect: ["un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "own",
        correct: ["dis"],
        incorrect: ["un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "seen",
        correct: ["un"],
        incorrect: ["dis"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "usual",
        correct: ["un"],
        incorrect: ["dis"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "qualify",
        correct: ["dis"],
        incorrect: ["un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "obey",
        correct: ["dis"],
        incorrect: ["un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "tidy",
        correct: ["un"],
        incorrect: ["dis"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "do",
        correct: ["un"],
        incorrect: ["dis"],
    },
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":295}],297:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio, constants_1.TypeId.noSpace];
var title = "Prefixes: re, dis, pre, un";
exports.title = title;
var info = 'Use the correct prefix.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "cycle",
        correct: ["re"],
        incorrect: ["dis", "pre", "un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "dict",
        correct: ["pre"],
        incorrect: ["dis", "re", "un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "lucky",
        correct: ["un"],
        incorrect: ["dis", "re", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "pare",
        correct: ["pre"],
        incorrect: ["dis", "re", "un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "turn",
        correct: ["re"],
        incorrect: ["dis", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "kind",
        correct: ["un"],
        incorrect: ["dis", "re", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "well",
        correct: ["un"],
        incorrect: ["dis", "re", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "build",
        correct: ["re"],
        incorrect: ["dis", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "vious",
        correct: ["pre"],
        incorrect: ["dis", "re", "un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "honest",
        correct: ["dis"],
        incorrect: ["re", "pre", "un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "agree",
        correct: ["dis"],
        incorrect: ["re", "pre", "un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "allow",
        correct: ["dis"],
        incorrect: ["re", "pre", "un"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "happy",
        correct: ["un"],
        incorrect: ["dis", "re", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "obey",
        correct: ["dis"],
        incorrect: ["un", "re", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "equal",
        correct: ["un"],
        incorrect: ["dis", "re", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "usual",
        correct: ["un"],
        incorrect: ["dis", "re", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "real",
        correct: ["un"],
        incorrect: ["dis", "re", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "card",
        correct: ["dis"],
        incorrect: ["un", "re", "pre"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.space + "run",
        correct: ["re"],
        incorrect: ["un", "dis", "pre"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":295}],298:[function(require,module,exports){
var renderer_1 = require('../../helper/renderer');
var exp = [];
exp.push(renderer_1.tList({
    t: "",
    list: [
        { l: "When we write what someone says, we also need to write <p>who</p> is saying it." },
        { l: "We can say more about what the person is saying, like whether it is a question or a reply." },
        { l: "My hat is blue, <p>said Paul.</p>" },
        { l: "Where did you get it? <p>asked Alex.</p>" },
        { l: "From the junkyard, <p>replied Bob.</p>" },
        { l: "" },
    ]
}));
module.exports = {
    exp: exp
};
},{"../../helper/renderer":227}],299:[function(require,module,exports){
var constants_1 = require('../../helper/constants');
var explenation = require('./explenation');
var common = [constants_1.TypeId.radio, constants_1.TypeId.noSpace];
var title = "Writing speech";
exports.title = title;
var info = 'Writing speech. Use the correct form.';
var lessons = [
    {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"Stop it!" ' + constants_1.space + " " + constants_1.getNameFemale() + ".",
        correct: ["shouted"],
        incorrect: ["said"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"I am going out," ' + constants_1.space + " " + constants_1.getNameMale() + ".",
        correct: ["said"],
        incorrect: ["asked"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"It is to my friend ' + constants_1.getNameMale() + '," ' + constants_1.space + " " + constants_1.getNameFemale() + ".",
        correct: ["explained"],
        incorrect: ["requested"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"Where is my book?" ' + constants_1.space + " " + constants_1.getNameMale() + ".",
        correct: ["asked"],
        incorrect: ["arqued"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"Where are you going?" ' + constants_1.space + " " + constants_1.getNameMale() + ".",
        correct: ["asked"],
        incorrect: ["explained"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"I need to post a letter," ' + constants_1.space + " " + constants_1.getNameFemale() + ".",
        correct: ["replied"],
        incorrect: ["demanded"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"Could you post one for me?" ' + constants_1.space + " " + constants_1.getNameFemale() + ".",
        correct: ["asked"],
        incorrect: ["answered"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"Of course," ' + constants_1.space + " " + constants_1.getNameFemale() + ".",
        correct: ["answered"],
        incorrect: ["asked"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"It is raining, " ' + constants_1.space + " " + constants_1.getNameMale() + ".",
        correct: ["commented"],
        incorrect: ["queried"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameMale() + ' ' + constants_1.space + ', "why can not I?"',
        correct: ["demanded"],
        incorrect: ["insisted"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"No it is not" ' + constants_1.space + " " + constants_1.getNameFemale() + ".",
        correct: ["argued"],
        incorrect: ["questioned"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"It is!" ' + constants_1.space + " " + constants_1.getNameMale() + " angrily.",
        correct: ["shouted"],
        incorrect: ["giggled"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"I am going anyway," ' + constants_1.space + " " + constants_1.getNameFemale() + ".",
        correct: ["insisted"],
        incorrect: ["asked"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: constants_1.getNameMale() + ' ' + constants_1.space + ' "Because it is late."',
        correct: ["replied"],
        incorrect: ["arqued"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"I will be back home soon!" ' + constants_1.getNameMale() + " " + constants_1.space + ' to his mum.',
        correct: ["shouted"],
        incorrect: ["asked"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: 'Mum ' + constants_1.space + ' quietly, "Please sit down."',
        correct: ["said"],
        incorrect: ["replied"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"Do not speak to me like that," she ' + constants_1.space + '.',
        correct: ["said"],
        incorrect: ["questioned"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: '"Go home!" ' + constants_1.space + ' ' + constants_1.getNameMale() + '.',
        correct: ["Shouted"],
        incorrect: ["Insisted"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: 'She ' + constants_1.space + ' "I will meet you tonight at seven."',
        correct: ["said"],
        incorrect: ["questioned"],
    }, {
        id: constants_1.id(common), title: title, explenation: explenation, info: info,
        name: 'Did she ' + constants_1.space + ' "May I go?"',
        correct: ["say"],
        incorrect: ["ask"],
    }
];
exports.lessons = lessons;
},{"../../helper/constants":226,"./explenation":298}],300:[function(require,module,exports){
var _ = require('underscore');
var Pass_1 = require('../services/Pass');
var utils_1 = require('../utils/utils');
var events_1 = require('../events');
var types_1 = require('../types');
var RootMenu_1 = require('../services/RootMenu');
var lessons_1 = require('../lessons/lessons');
var LessonsCatalog_1 = require('../services/LessonsCatalog');
var state = {
    isDirty: true,
    apiState: null,
    pass: new Pass_1.Pass(),
    lessonsCatalog: new LessonsCatalog_1.LessonsCatalog(),
    rootMenu: new RootMenu_1.RootMenu(types_1.RootType.lessons),
    subscribers: [
        events_1.events.onLogin.subscribe(onLogin),
        events_1.events.onLogOut.subscribe(onLogOut),
        events_1.events.onToogleRegisterView.subscribe(onToogleRegisterView),
        events_1.events.onRegisterOnServer.subscribe(onRegisterOnServer),
        events_1.events.onSubscribeOnServer.subscribe(onSubscribeOnServer),
        events_1.events.readEvent.subscribe(onRead),
        events_1.events.rootMenuEvent.subscribe(onRootMenuEvent),
        events_1.events.showRootMenu.subscribe(onShowRootMenu),
        events_1.events.loadNewLessonEvent.subscribe(onLoadNewLessonEvent),
        events_1.events.goTest.subscribe(goTest),
        events_1.events.closeStatusBoardEvent.subscribe(onCloseStatusBoardEvent),
        events_1.events.saveStatusBoardEvent.subscribe(onSaveStatusBoardEvent),
        events_1.events.onNextBoard.subscribe(onNextBoard),
        events_1.events.onNextRandomBoard.subscribe(onNextRandomBoard),
        events_1.events.onPrevBoard.subscribe(onPrevBoard),
        events_1.events.onChoosePicture.subscribe(setUserAnswer),
        events_1.events.onChooseRadio.subscribe(setUserAnswer),
        events_1.events.onChooseOneTwoThree.subscribe(setUserAnswer),
        events_1.events.onChooseMultiRadio.subscribe(setUserAnswer),
        events_1.events.onToogleSupportHelp.subscribe(onToogleSupportHelp),
        events_1.events.scrollPosition.subscribe(onScrollPosition)
    ]
};
function publishRerender() {
    state.isDirty = true;
    return events_1.renderEvent.publish();
}
function onRootMenuEvent(id) {
    state.rootMenu.setRootMenuTo(id);
    publishRerender();
}
function onLoadNewLessonEvent(uid) {
    state.lessonsCatalog.setActiveLesson(uid);
    state.rootMenu.setRootMenuTo(types_1.RootType.explenation);
    state.rootMenu.resetExplenationScroll();
    publishRerender();
}
function goTest() {
    state.rootMenu.setRootMenuTo(types_1.RootType.close);
    publishRerender();
}
function onSaveStatusBoardEvent(data) {
    state.pass.startSaveStatus(function () { return publishRerender(); })
        .then(function () { return state.rootMenu.setRootMenuTo(types_1.RootType.lessons); })
        .then(function () { return state.pass.saveStatus(data); })
        .then(function () { return state.lessonsCatalog.setNumberFinished(data.uid, data.status); })
        .finally(function () { return onCloseStatusBoardEvent(); });
}
function onCloseStatusBoardEvent() {
    state.rootMenu.setRootMenuTo(types_1.RootType.lessons);
    state.lessonsCatalog.resetActiveLesson();
    publishRerender();
}
function onShowRootMenu() {
    state.rootMenu.showMenu();
    publishRerender();
}
function onNextBoard() {
    state.lessonsCatalog.board.onNextBoard();
    utils_1.voice.stopReading();
    publishRerender();
}
function onNextRandomBoard() {
    state.lessonsCatalog.board.onNextRandomBoard();
    utils_1.voice.stopReading();
    publishRerender();
}
function onPrevBoard() {
    state.lessonsCatalog.board.onPrevBoard();
    utils_1.voice.stopReading();
    publishRerender();
}
function setUserAnswer(name) {
    var isCompletedBoard = state.lessonsCatalog.board.boardAnswer.setUserAnswer(name);
    _.isBoolean(isCompletedBoard) && state.lessonsCatalog.board.setCompletedBoard(isCompletedBoard);
    publishRerender();
}
function onRead(read) {
    utils_1.voice.read(read);
}
function onToogleSupportHelp() {
    state.lessonsCatalog.board.boardAnswer.toggleSupportHelp();
    publishRerender();
}
function onLogin(o) {
    state.pass.startLogin(function () { return publishRerender(); })
        .then(function () { return state.pass.login(o); })
        .then(function () { return publishRerender(); })
        .then(function () { return state.pass.updataLastLogin(); })
        .then(function () { return state.pass.readStatus({ email: state.pass.getStatus().user.email }); })
        .then(function (data) {
        if (data && data.state && data.state.length) {
            data.state.map(function (item) { return state.lessonsCatalog.setNumberFinished(item.name, parseInt(item.value)); });
        }
    })
        .finally(function () { return publishRerender(); });
}
function onLogOut() {
    state.pass.logout();
    publishRerender();
}
function onToogleRegisterView() {
    state.pass.toogleRegister();
    publishRerender();
}
function onRegisterOnServer(o) {
    state.pass.startRegister(function () { return publishRerender(); })
        .then(function () { return state.pass.register(o); })
        .then(function () { return state.pass.sendEmailGreeting(o); })
        .then(function () { return state.pass.login(o); })
        .finally(function () { return publishRerender(); });
}
function onSubscribeOnServer(valid_to) {
    state.pass.startSubscribe(function () { return publishRerender(); })
        .then(function () { return state.pass.subscribe({ email: state.pass.getStatus().user.email, valid_to: valid_to }); })
        .finally(function () { return publishRerender(); });
}
function onScrollPosition(top) {
    state.rootMenu.setScrollPosition(top);
}
function produceAPIState() {
    state.isDirty = false;
    state.apiState = {
        rootMenu: state.rootMenu.getState(),
        lessonsCatalog: state.lessonsCatalog.getState(),
        pass: state.pass.getStatus(),
        isProduction: false
    };
    return state.apiState;
}
function init() { return lessons_1.getLessons(state.lessonsCatalog).then(function (_lessonsCatalog) { return publishRerender(); }); }
exports.init = init;
function clear() { return state.lessonsCatalog.clear(); }
exports.clear = clear;
function getState() { return state.isDirty ? produceAPIState() : state.apiState; }
exports.getState = getState;
},{"../events":215,"../lessons/lessons":232,"../services/LessonsCatalog":303,"../services/Pass":305,"../services/RootMenu":306,"../types":308,"../utils/utils":314,"underscore":160}],301:[function(require,module,exports){
var _ = require('underscore');
var utils_1 = require('../utils/utils');
var constants_1 = require('../lessons/helper/constants');
function getCorrectSentence(query) {
    var name = query.board.data.name;
    var read = '';
    function getAnswer() {
        var spaces = constants_1.isId.isNoSpace(query.board.data.id) ? '' : ' ';
        return query.selectedAnswer === constants_1.empty ? ' ' : spaces + query.selectedAnswer + spaces;
    }
    if (constants_1.isId.isDraw(query.board.data.id)) {
        read = name;
    }
    else if (constants_1.isId.isOneTwoThree(query.board.data.id)) {
        if (!query.selectedAnswerQueue.length) {
            read = name;
        }
        else {
            read = query.selectedAnswerQueue.join(name);
            if (isCompletedAndCorrect(query)) {
                read = read + query.board.data.postfix;
            }
        }
    }
    else if (constants_1.isId.isMultiRadio(query.board.data.id)) {
        if (!query.selectedAnswerQueue.length) {
            read = '';
        }
        else {
            var selectedAnswerQueue = query.selectedAnswerQueue.map(function (item) { return utils_1.upercaseFirstLetter(item); });
            read = utils_1.upercaseFirstLetter(name) + ' - ' + selectedAnswerQueue.join(' - ');
        }
    }
    else if (constants_1.isId.isFourPictures(query.board.data.id) || constants_1.isId.isFourWords(query.board.data.id)) {
        return name;
    }
    else if (constants_1.isId.isInradio(query.board.data.id)) {
        read = name.replace(constants_1.space, getAnswer());
    }
    else if (constants_1.isId.isRadio(query.board.data.id)) {
        if (constants_1.isId.isMultiAnswer(query.board.data.id)) {
            var split = query.selectedAnswer.split(constants_1.multi);
            read = name;
            split.map(function (item) {
                read = read.replace(constants_1.space, item.replace(constants_1.multi, '').trim());
            });
        }
        else if (name.indexOf(constants_1.space) !== -1) {
            read = name.replace(constants_1.space, getAnswer());
        }
        else if (query.selectedAnswer !== constants_1.empty) {
            read = query.selectedAnswer;
        }
        else if (query.selectedAnswer !== constants_1.empty) {
            read = name;
        }
    }
    read = read.replace('  ', ' ').replace(' .', '.').replace(' ,', ',');
    return read;
}
function isCorrect(query) {
    if (constants_1.isId.isOneTwoThree(query.board.data.id)) {
        var length_1 = query.selectedAnswerQueue.length;
        return _.last(query.selectedAnswerQueue) === query.board.data.correct[length_1 - 1];
    }
    if (constants_1.isId.isMultiRadio(query.board.data.id)) {
        return _.intersection(query.selectedAnswerQueue, query.board.data.correct).length === query.board.data.correct.length;
    }
    return _.contains(query.board.data.correct, query.selectedAnswer);
}
function isCompletedAndCorrect(query) {
    return query.board.data.correct.length === query.selectedAnswerQueue.length &&
        _.difference(query.board.data.correct, query.selectedAnswerQueue).length === 0;
}
function getGeneratedList(board) {
    var generatedList = [];
    if (constants_1.isId.isMultiRadio(board.data.id)) {
        var maxLines = 4;
        var missing = maxLines - board.data.correct.length;
        generatedList = [].concat(board.data.correct).concat(_.sample(board.data.incorrect, missing));
    }
    else {
        var incorrent = _.sample(board.data.incorrect, 3);
        generatedList = [].concat(board.data.correct).concat(incorrent);
    }
    return _.sample(generatedList, generatedList.length);
}
function generateQuery(board) {
    var query = {
        board: board,
        wasLastCorrect: false,
        selectedAnswer: null,
        selectedAnswerQueue: [],
        isSupportShowAnswer: board.data.isHelp ? false : null,
        generatedList: getGeneratedList(board)
    };
    return query;
}
function setUserAnswer(query, answer) {
    query.selectedAnswer = answer;
    query.wasLastCorrect = false;
    var isCompletedBoard = null;
    if (constants_1.isId.isOneTwoThree(query.board.data.id)) {
        var length_2 = query.selectedAnswerQueue.length;
        if (query.board.data.correct[length_2] === answer) {
            query.selectedAnswerQueue.push(answer);
            query.wasLastCorrect = true;
            utils_1.voice.read(answer);
            if (isCompletedAndCorrect(query))
                isCompletedBoard = true;
        }
        else
            isCompletedBoard = false;
    }
    else if (constants_1.isId.isMultiRadio(query.board.data.id)) {
        var isCorrect_1 = _.contains(query.board.data.correct, answer) && !_.contains(query.selectedAnswerQueue, answer);
        if (isCorrect_1) {
            query.selectedAnswerQueue.push(answer);
            query.wasLastCorrect = true;
            utils_1.voice.read(answer);
            if (isCompletedAndCorrect(query))
                isCompletedBoard = true;
        }
        else
            isCompletedBoard = false;
    }
    else {
        if (isCorrect(query)) {
            var read = getCorrectSentence(query);
            utils_1.voice.read(read);
            query.wasLastCorrect = true;
            isCompletedBoard = true;
        }
        else
            isCompletedBoard = false;
    }
    return {
        query: query,
        isCompletedBoard: isCompletedBoard
    };
}
var BoardAnswer = (function () {
    function BoardAnswer(board) {
        this.query = null;
        this.query = generateQuery(board);
    }
    BoardAnswer.prototype.toggleSupportHelp = function () { this.query.isSupportShowAnswer = !this.query.isSupportShowAnswer; };
    BoardAnswer.prototype.setUserAnswer = function (answer) {
        var data = setUserAnswer(this.query, answer);
        this.query = data.query;
        return data.isCompletedBoard;
    };
    BoardAnswer.prototype.getState = function () {
        var name = this.query.board.data.name;
        if (isCorrect(this.query))
            name = getCorrectSentence(this.query);
        return {
            selectedAnswer: this.query.selectedAnswer,
            generatedList: this.query.generatedList,
            text: name,
            board: this.query.board,
            isCorrect: this.query.wasLastCorrect,
            isSupportShowAnswer: this.query.isSupportShowAnswer
        };
    };
    return BoardAnswer;
})();
exports.BoardAnswer = BoardAnswer;
},{"../lessons/helper/constants":226,"../utils/utils":314,"underscore":160}],302:[function(require,module,exports){
var _ = require('underscore');
var BoardAnswer_1 = require('./BoardAnswer');
var utils_1 = require('../utils/utils');
function _isCompletedStatus(mapStatus, id) {
    return _.has(mapStatus, id);
}
function createPoint(lessons, index, mapStatus) {
    function _isFinished() {
        return _.keys(mapStatus).length === boards.length && _isCompletedStatus(mapStatus, board.autoId);
    }
    var boards = lessons.boards;
    var board = boards[index];
    var currentLesson = _.indexOf(boards, board) + 1;
    var lessonsLength = boards.length;
    var isLastPage = (currentLesson === lessonsLength);
    var isCurrentSuccess = mapStatus[board.autoId];
    var isCurrentFail = isCurrentSuccess === false ? true : false;
    var isFinished = _isFinished();
    var score = _.compact(_.values(mapStatus)).length;
    var scorePercent = utils_1.round10(score * (100 / lessonsLength), -1);
    var display = currentLesson + '/' + lessonsLength;
    return {
        uid: lessons.uid,
        score: score,
        scorePercent: scorePercent,
        currentLesson: currentLesson,
        lessonsLength: lessonsLength,
        display: display,
        isLastPage: isLastPage,
        isCurrentSuccess: isCurrentSuccess,
        isCurrentFail: isCurrentFail,
        isFinished: isFinished,
        boards: boards,
        board: board,
        mapStatus: mapStatus
    };
}
function getRandomNotCompletedId(lessons, currentId, mapStatus) {
    var mapKeys = _.keys(mapStatus).concat([currentId]);
    var boardKeys = lessons.boards.map(function (board) { return board.autoId; });
    var diff = _.difference(boardKeys, mapKeys);
    var sample = _.sample(diff, 1);
    if (sample.length) {
        var id = _.first(sample);
        var item = _.findWhere(lessons.boards, { autoId: id });
        var index = _.indexOf(lessons.boards, item);
        if (_.isNumber(index)) {
            return index;
        }
    }
    return null;
}
var BoardStatus = (function () {
    function BoardStatus(lesson) {
        this.activeIndex = 0;
        this.lesson = null;
        this.mapStatus = {};
        this.activeIndex = 0;
        this.mapStatus = {};
        this.lesson = lesson;
        this.generateNewBoardQuery();
    }
    BoardStatus.prototype.getCurrentBoard = function () { return this.lesson.boards[this.activeIndex]; };
    BoardStatus.prototype.generateNewBoardQuery = function () { this.boardAnswer = new BoardAnswer_1.BoardAnswer(this.getCurrentBoard()); };
    BoardStatus.prototype.onNextBoard = function () {
        if (this.activeIndex === this.lesson.boards.length - 1) {
            this.activeIndex = 0;
        }
        else
            this.activeIndex++;
        this.generateNewBoardQuery();
    };
    BoardStatus.prototype.onNextRandomBoard = function () {
        var autoId = getRandomNotCompletedId(this.lesson, this.getCurrentBoard().autoId, this.mapStatus);
        if (autoId)
            this.activeIndex = autoId;
        this.generateNewBoardQuery();
    };
    BoardStatus.prototype.onPrevBoard = function () {
        if (this.activeIndex === 0) {
            this.activeIndex = this.lesson.boards.length - 1;
        }
        else
            this.activeIndex--;
        this.generateNewBoardQuery();
    };
    BoardStatus.prototype.setCompletedBoard = function (isSuccess) {
        if (!_isCompletedStatus(this.mapStatus, this.getCurrentBoard().autoId))
            this.mapStatus[this.getCurrentBoard().autoId] = isSuccess;
    };
    BoardStatus.prototype.getState = function () {
        return {
            points: createPoint(this.lesson, this.activeIndex, this.mapStatus),
            board: this.getCurrentBoard(),
            answer: this.boardAnswer.getState()
        };
    };
    return BoardStatus;
})();
exports.BoardStatus = BoardStatus;
},{"../utils/utils":314,"./BoardAnswer":301,"underscore":160}],303:[function(require,module,exports){
var types_1 = require('../types');
var constants_1 = require('../lessons/helper/constants');
var _ = require('underscore');
var BoardStatus_1 = require('./BoardStatus');
var css = require('../utils/css/css');
var LessonsStatus_1 = require('./LessonsStatus');
function getIconsByIdLesson(lessons) {
    var i = [];
    lessons.map(function (lesson) {
        var id = lesson.id;
        if (constants_1.isId.isDraw(id))
            i.push(css.iconsSets.draw);
        if (constants_1.isId.isFourPictures(id))
            i.push(css.iconsSets.fourPictures);
        if (constants_1.isId.isFourWords(id))
            i.push(css.iconsSets.fourWords);
        if (constants_1.isId.isInradio(id))
            i.push(css.iconsSets.inradio);
        if (constants_1.isId.isRadio(id))
            i.push(css.iconsSets.radio);
        if (constants_1.isId.isMultiRadio(id))
            i.push(css.iconsSets.multiRadio);
        if (constants_1.isId.isOneTwoThree(id))
            i.push(css.iconsSets.oneTwoThree);
    });
    return _.chain(i).compact().uniq().value();
}
function compare(a, b) {
    if (a.name < b.name)
        return -1;
    if (a.name > b.name)
        return 1;
    return 0;
}
function sort(unordered) {
    var alwaysFree = [];
    var whenRegistered = [];
    var whenPrime = [];
    var inProgressBlock = [];
    var allSorted = _.values(unordered).sort(compare);
    allSorted.forEach(function (item) {
        switch (item.freeType) {
            case types_1.FreeType.alwaysFree_____: return alwaysFree.push(item);
            case types_1.FreeType.whenRegistered_: return whenRegistered.push(item);
            case types_1.FreeType.whenPrime______: return whenPrime.push(item);
            case types_1.FreeType.inProgressBlock: return inProgressBlock.push(item);
        }
    });
    return inProgressBlock.concat(alwaysFree).concat(whenRegistered).concat(whenPrime);
}
var LessonsCatalog = (function () {
    function LessonsCatalog() {
        this.map = {};
        this.allBoardsLength = 0;
        this.activeUid = null;
        this.isDirty = true;
        this.board = null;
    }
    LessonsCatalog.prototype.add = function (freeType, uid, v) {
        this.isDirty = true;
        this.allBoardsLength = this.allBoardsLength + v.lessons.length;
        if (this.map[uid])
            throw new Error('duplicate key in LessonsCatalog');
        var boards = v.lessons.map(function (data) {
            var lesson = {
                autoId: _.uniqueId('_'),
                data: data
            };
            return lesson;
        });
        this.map[uid] = {
            uid: uid,
            freeType: freeType,
            active: false,
            name: v.title,
            boards: boards,
            iconSet: getIconsByIdLesson(v.lessons),
            numberFinished: null
        };
    };
    LessonsCatalog.prototype.clear = function () { this.map = {}; };
    LessonsCatalog.prototype.resetActiveLesson = function () { this.setActiveLesson(this.activeUid); };
    LessonsCatalog.prototype.setActiveLesson = function (uid) {
        if (this.map[uid]) {
            if (this.map[this.activeUid])
                this.map[this.activeUid].active = false;
            this.activeUid = uid;
            this.map[this.activeUid].active = true;
            this.board = new BoardStatus_1.BoardStatus(this.getLesson());
        }
    };
    LessonsCatalog.prototype.setNumberFinished = function (uid, nr) {
        if (this.map[uid]) {
            this.map[uid].numberFinished = nr;
        }
        else
            console.warn('skip Uid', uid);
    };
    LessonsCatalog.prototype.getLesson = function () { return this.map[this.activeUid]; };
    LessonsCatalog.prototype.getState = function () {
        if (this.isDirty) {
            this.sorted = sort(this.map);
            this.isDirty = false;
        }
        var returns = {
            uid: this.activeUid,
            lessonsTitle: this.map[this.activeUid].name,
            allBoardsLength: this.allBoardsLength,
            sortedLessons: this.sorted,
            current: this.board.getState(),
            status: LessonsStatus_1.getNewLessonsStatus(this.map, this.allBoardsLength)
        };
        return returns;
    };
    return LessonsCatalog;
})();
exports.LessonsCatalog = LessonsCatalog;
},{"../lessons/helper/constants":226,"../types":308,"../utils/css/css":309,"./BoardStatus":302,"./LessonsStatus":304,"underscore":160}],304:[function(require,module,exports){
var _ = require('underscore');
var utils = require('../utils/utils');
function getNewLessonsStatus(map, allBoardsLength) {
    var allBoardsCorrect = 0;
    var allBoardsIncorrect = 0;
    var finishedLessons = 0;
    var statusIcons = {};
    _.mapObject(map, function (lesson, uid) {
        if (lesson.numberFinished) {
            finishedLessons++;
            allBoardsCorrect += lesson.numberFinished;
            allBoardsIncorrect += (lesson.boards.length - lesson.numberFinished);
            lesson.iconSet.map(function (icon) {
                if (!statusIcons[icon])
                    statusIcons[icon] = 0;
                ++statusIcons[icon];
            });
        }
    });
    var iconSetStatus = [];
    _.mapObject(statusIcons, function (nr, icon) {
        iconSetStatus.push({ name: nr, icon: icon });
    });
    return {
        allBoardsLength: allBoardsLength,
        allBoardsUndane: allBoardsLength - allBoardsCorrect - allBoardsIncorrect,
        allBoardsCorrect: allBoardsCorrect,
        allBoardsIncorrect: allBoardsIncorrect,
        entriesCorrectPercentage: utils.toPercentHumanize(allBoardsCorrect, allBoardsLength),
        finishedLessons: finishedLessons,
        iconSetStatus: iconSetStatus
    };
}
exports.getNewLessonsStatus = getNewLessonsStatus;
},{"../utils/utils":314,"underscore":160}],305:[function(require,module,exports){
var dictionary = require('../utils/dictionary');
var utils_1 = require('../utils/utils');
var catalog = require("../catalog/catalog");
var Promise = require("bluebird");
var Matchers = require('../components/settings/views/user/registering/Matchers');
var initialState = {
    login: {
        error: null,
        process: false,
        success: false
    },
    register: {
        show: false,
        error: null,
        process: false,
        success: false
    },
    subscribe: {
        error: null,
        process: false,
    },
    user: {
        isPrime: false,
        name: null,
        email: null,
        valid_to: null,
        active: false,
        last_login: null
    },
    status: {
        process: false
    }
};
function getInitialPass() {
    return JSON.parse(JSON.stringify(initialState));
}
var Pass = (function () {
    function Pass() {
        this.pass = getInitialPass();
    }
    Pass.prototype.reset = function () {
        this.pass = getInitialPass();
    };
    Pass.prototype.startLogin = function (callback) {
        this.reset();
        this.pass.login.success = false;
        this.pass.login.process = true;
        callback();
        return Promise.resolve();
    };
    Pass.prototype.startSubscribe = function (callback) {
        this.pass.subscribe.process = true;
        callback();
        return Promise.resolve();
    };
    Pass.prototype.startRegister = function (callback) {
        this.pass.register.success = false;
        this.pass.register.process = true;
        callback();
        return Promise.resolve();
    };
    Pass.prototype.login = function (o) {
        var _this = this;
        console.info('-> login');
        return catalog.serverIsPrime(o.email, utils_1.md5(o.password)).then(function (data) {
            _this.pass.login.success = true;
            _this.pass.login.process = false;
            var active = (data.user.active === '1');
            _this.pass.user = {
                isPrime: (!!data.isPrime) && active,
                name: data.user.name,
                email: data.user.email,
                valid_to: data.user.valid_to,
                active: active,
                last_login: data.user.last_login
            };
            return null;
        }).catch(function (e) {
            console.error(e);
            _this.pass.login.process = false;
            _this.pass.login.error = e.message;
        });
    };
    Pass.prototype.logout = function () {
        this.pass = getInitialPass();
    };
    Pass.prototype.updataLastLogin = function () {
        if (this.pass.login.success)
            return catalog.updateLastLogin(this.pass.user.email)
                .catch(function (e) {
                console.error(e);
            });
        return Promise.resolve(null);
    };
    Pass.prototype.subscribe = function (o) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            console.info('-> subscribe');
            catalog.serverUpdateValidTo(o.email, o.valid_to).then(function (data) {
                _this.pass.subscribe.process = false;
                console.info('<- subscribed to =', data);
                data = data || {};
                if (data.error)
                    return Promise.reject(new Error(dictionary.SERVER_ERROR_SUBSCRIBING_WENT_WRONG));
                _this.pass.user.isPrime = !!data.success;
                _this.pass.user.valid_to = o.valid_to;
                return resolve(null);
            }).catch(function (e) {
                console.error(e);
                _this.pass.subscribe.process = false;
                _this.pass.subscribe.error = e.message;
                return reject(e);
            });
        });
    };
    Pass.prototype.register = function (o) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            console.info('-> register');
            Matchers.validate(o).then(function (e) {
                return catalog.serverRegister(o.email, utils_1.md5(o.password), o.name).then(function (data) {
                    console.info('register data =', data);
                    data = data || {};
                    _this.pass.register.process = false;
                    _this.pass.register.success = !data.error && data.success ? true : false;
                    if (data.error) {
                        if (data.error.indexOf('Duplicate') !== -1 || data.error.indexOf('duplicate') !== -1)
                            return Promise.reject(new Error(dictionary.SERVER_ERROR_DUPLICATE_EMAIL));
                        return Promise.reject(new Error(dictionary.SERVER_ERROR_INVALID_DATA));
                    }
                    return resolve(null);
                });
            }).catch(function (e) {
                console.error(e);
                _this.pass.register.process = false;
                _this.pass.register.error = e.message;
                return reject(e);
            });
        });
    };
    Pass.prototype.sendEmailGreeting = function (o) {
        console.info('-> send greeting email');
        return catalog.emailGreeting(o);
    };
    Pass.prototype.toogleRegister = function () {
        var show = !this.pass.register.show;
        this.pass.register = getInitialPass().register;
        this.pass.register.show = show;
    };
    Pass.prototype.readStatus = function (o) {
        console.info('-> read user lesson status');
        return catalog.readStatus(o);
    };
    ;
    Pass.prototype.startSaveStatus = function (callback) {
        this.pass.status.process = false;
        callback();
        return Promise.resolve();
    };
    Pass.prototype.saveStatus = function (data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            console.info('-> save status');
            catalog.updateStatus({
                email: _this.pass.user.email,
                name: data.uid,
                value: String(data.status)
            }).then(function () {
                _this.pass.status.process = false;
                return resolve(null);
            }).catch(function (e) {
                console.error(e);
                _this.pass.status.process = false;
                return reject(e);
            });
        });
    };
    Pass.prototype.getStatus = function () { return this.pass; };
    return Pass;
})();
exports.Pass = Pass;
},{"../catalog/catalog":162,"../components/settings/views/user/registering/Matchers":205,"../utils/dictionary":310,"../utils/utils":314,"bluebird":1}],306:[function(require,module,exports){
var dictionary = require('../utils/dictionary');
var css = require('../utils/css/css');
var types_1 = require('../types');
var RootMenu = (function () {
    function RootMenu(activeId) {
        this.activeId = activeId;
        this.list = (_a = {},
            _a[types_1.RootType.user] = {
                id: types_1.RootType.user,
                name: dictionary.menu.USER,
                backUrl: css.backUrl.user,
                active: false,
                scroll: 0
            },
            _a[types_1.RootType.lessons] = {
                id: types_1.RootType.lessons,
                name: dictionary.menu.LESSONS,
                backUrl: css.backUrl.lessons,
                active: false,
                scroll: 0
            },
            _a[types_1.RootType.explenation] = {
                id: types_1.RootType.explenation,
                name: dictionary.menu.GRAMMAR,
                backUrl: css.backUrl.grammar,
                active: false,
                scroll: 0
            },
            _a[types_1.RootType.close] = {
                id: types_1.RootType.close,
                name: dictionary.menu.PRACTISE,
                backUrl: css.backUrl.menu,
                active: false,
                scroll: 0
            },
            _a
        );
        this.isMinimalized = false;
        var _a;
    }
    RootMenu.prototype.showMenu = function () { this.isMinimalized = false; };
    RootMenu.prototype.resetExplenationScroll = function () { this.list[types_1.RootType.explenation].scroll = 0; };
    RootMenu.prototype.setScrollPosition = function (top) { this.list[this.activeId].scroll = top; };
    RootMenu.prototype.setRootMenuTo = function (id) {
        if (id === types_1.RootType.close) {
            this.isMinimalized = true;
        }
        else {
            this.isMinimalized = false;
            this.list[this.activeId].active = false;
            this.activeId = id;
            this.list[this.activeId].active = true;
        }
    };
    RootMenu.prototype.getState = function () {
        return {
            isMinimalized: this.isMinimalized,
            scrollPosition: this.list[this.activeId].scroll,
            list: this.list,
            activeId: this.activeId,
        };
    };
    return RootMenu;
})();
exports.RootMenu = RootMenu;
},{"../types":308,"../utils/css/css":309,"../utils/dictionary":310}],307:[function(require,module,exports){
var APIState_1 = require('./APIState');
exports.init = APIState_1.init;
exports.clear = APIState_1.clear;
exports.getState = APIState_1.getState;
},{"./APIState":300}],308:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var dictionary = require('../utils/dictionary');
(function (FreeType) {
    FreeType[FreeType["alwaysFree_____"] = 1] = "alwaysFree_____";
    FreeType[FreeType["whenRegistered_"] = 2] = "whenRegistered_";
    FreeType[FreeType["whenPrime______"] = 3] = "whenPrime______";
    FreeType[FreeType["inProgressBlock"] = 4] = "inProgressBlock";
})(exports.FreeType || (exports.FreeType = {}));
var FreeType = exports.FreeType;
(function (RootType) {
    RootType[RootType["close"] = 1] = "close";
    RootType[RootType["lessons"] = 2] = "lessons";
    RootType[RootType["explenation"] = 3] = "explenation";
    RootType[RootType["settings"] = 4] = "settings";
    RootType[RootType["user"] = 5] = "user";
})(exports.RootType || (exports.RootType = {}));
var RootType = exports.RootType;
var TimeOutError = (function (_super) {
    __extends(TimeOutError, _super);
    function TimeOutError(message) {
        if (message === void 0) { message = dictionary.SERVER_ERROR_TIMEOUT; }
        _super.call(this, message);
        this.message = message;
        this.name = 'TimeOutError';
        this.stack = (new Error()).stack;
    }
    TimeOutError.prototype.toString = function () {
        return this.name + ': ' + this.message;
    };
    return TimeOutError;
})(Error);
exports.TimeOutError = TimeOutError;
var InvalidServerDataError = (function (_super) {
    __extends(InvalidServerDataError, _super);
    function InvalidServerDataError(message) {
        if (message === void 0) { message = dictionary.SERVER_ERROR_INVALID_DATA; }
        _super.call(this);
        this.message = message;
        this.name = 'InvalidServerData';
        this.stack = (new Error()).stack;
    }
    InvalidServerDataError.prototype.toString = function () {
        return this.name + ': ' + this.message;
    };
    return InvalidServerDataError;
})(Error);
exports.InvalidServerDataError = InvalidServerDataError;
var ServerRequestError = (function (_super) {
    __extends(ServerRequestError, _super);
    function ServerRequestError(message) {
        if (message === void 0) { message = dictionary.SERVER_ERROR_REQUEST; }
        _super.call(this);
        this.message = message;
        this.name = 'ServerRequestError';
        this.stack = (new Error()).stack;
    }
    ServerRequestError.prototype.toString = function () {
        return this.name + ': ' + this.message;
    };
    return ServerRequestError;
})(Error);
exports.ServerRequestError = ServerRequestError;
},{"../utils/dictionary":310}],309:[function(require,module,exports){
var _ = require("underscore");
var constFont = 5.0;
var constPoint = 'vmin';
var borderRadius = 10;
var borderWidth = 3;
var cursorPointer = 'pointer';
var cursorDefault = 'default';
var fontFamilyTime = 'Orbitron Medium';
var fontFamilyWriting = 'standard';
var fontFamilyJournal = 'journal';
var fontFamilyCharcoal = 'charcoal';
var constants_1 = require('../../lessons/helper/constants');
var utils_1 = require('../../utils/utils');
var micro = constFont - 1.8 + constPoint;
var XS = constFont - 0.8 + constPoint;
var S = constFont - 0.7 + constPoint;
var M = constFont - 0.5 + constPoint;
var L = constFont - 0.3 + constPoint;
var XL = constFont + constPoint;
var XL2 = constFont + 0.2 + constPoint;
var XL3 = constFont + 0.5 + constPoint;
var XL4 = constFont + 0.8 + constPoint;
var mega = constFont + 1.8 + constPoint;
var get = function (a, b, c, d, e) {
    var res = {};
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i]) {
            _.extend(res, arguments[i]);
        }
    }
    return res;
};
function getSize() {
    var w = window;
    var d = document;
    var e = d.documentElement;
    var g = d.getElementsByTagName('body')[0];
    var x = w.innerWidth || e.clientWidth || g.clientWidth;
    var y = w.innerHeight || e.clientHeight || g.clientHeight;
    return {
        x: x,
        y: y
    };
}
function isMobile() {
    var size = getSize();
    if (size.x < 450 || size.y < 450) {
        return true;
    }
    return false;
}
function getBacgroundGradient(start, stop) {
    var browser = utils_1.getBrowser();
    if (browser.isOpera) {
        return "-o-linear-gradient(top, " + start + ", " + stop + ")";
    }
    else if (browser.isIE) {
        return "-ms-linear-gradient(top, " + start + ", " + stop + ")";
    }
    else if (browser.isEdge) {
        return "-ms-linear-gradient(top, " + start + ", " + stop + ")";
    }
    else if (browser.isFirefox) {
        return "-moz-linear-gradient(top, " + start + ", " + stop + ")";
    }
    else if (browser.isChrome) {
        return "-webkit-gradient(linear, left top, left bottom, from(" + start + "), to(" + stop + "))";
    }
    return "gradient( " + start + ", " + stop + ")";
}
var style = {
    get: get,
    isMobile: isMobile,
    getSize: getSize,
    cursor: {
        normal: cursorDefault,
        pointer: cursorPointer
    },
    icons: {
        left: 'icon-left-open',
        right: 'icon-right-open',
        random: 'moon-shuffle',
        success: 'moon-thumbs-up',
        fail: 'moon-thumbs-up2',
        menu: 'moon-menu2',
        help: 'moon-support'
    },
    iconsSets: {
        inradio: 'img/iconSet/App-kbounce-icon.png',
        fourWords: 'img/iconSet/App-klickety-game-icon.png',
        draw: 'img/iconSet/Edit-icon.png',
        fourPictures: 'img/iconSet/Photo-icon.png',
        oneTwoThree: 'img/iconSet/App-kfouleggs-game-icon.png',
        radio: 'img/iconSet/App-kcmdf-cubes-icon.png',
        multiRadio: 'img/iconSet/App-ksplash-water-icon.png',
        lock: 'img/iconSet/Action-lock-silver-icon.png',
        progress: 'img/iconSet/progress.png',
    },
    backUrl: {
        user: 'img/icons/About-me-icon.png',
        lessons: 'img/icons/My-blog-icon.png',
        grammar: 'img/icons/Freelance-icon.png',
        menu: 'img/icons/Hire-me-icon.png',
        random: 'img/icons/button-round-random-icon.png',
        left: 'img/icons/button-arrow-left-icon.png',
        right: 'img/icons/button-arrow-right-icon.png'
    },
    font: {
        fontSize: {
            micro: micro,
            XS: XS,
            S: S,
            M: M,
            L: L,
            XL: XL,
            XL2: XL2,
            XL3: XL3,
            XL4: XL4,
            mega: mega
        },
        color: {
            normal: 'white',
            info: '#819bcb',
            hint: '#777',
            merge: '#555658',
            success: '#00FF00',
            fail: '#FF0000',
            ink: '#99cdff'
        }
    },
    borderRadius: borderRadius,
    button: {
        color: {
            normal: '#F8F8F2',
            active: '#F8F8F2',
            focus: '#F8F8F2',
            disabled: '#999'
        },
        border: {
            normal: borderWidth + 'px solid #313131',
            normalGuess: borderWidth + 'px solid #313131',
            transparent: borderWidth + 'px solid #313131',
            active: borderWidth + 'px solid #2b8182',
            focus: borderWidth + 'px solid #313131',
            success: borderWidth + 'px solid #00FF00',
            fail: borderWidth + 'px solid  #FF0000',
            disabled: borderWidth + 'px solid #313131'
        },
        backgroundColor: {
            normal: '#49494a',
            normalGuess: 'transparent',
            transparent: 'transparent',
            active: '#00999D',
            focus: '#272822',
            disabled: '#49494a'
        },
        backgroundImage: {
            normalGuess: function () { return getBacgroundGradient('#636363', '#454444'); },
            transparent: function () { return getBacgroundGradient('transparent', 'transparent'); },
            normal: function () { return getBacgroundGradient('#616161', '#383737'); },
            active: null,
            focus: null,
            disabled: null,
        },
        radius: {
            borderRadius: 28
        }
    },
    fontFamily: {
        time: {
            fontFamily: fontFamilyTime
        },
        writing: {
            fontFamily: fontFamilyWriting
        },
        journal: {
            fontFamily: fontFamilyJournal
        },
        charcoal: {
            fontFamily: fontFamilyCharcoal
        }
    },
    themes: {
        standard: {
            backgroundImageRead: 'url("img/chalkboard1.jpg")',
            backgroundImageBoard: 'url("img/chalkboard2.jpg")'
        },
        signaturePad: {
            background: 'rgba(0, 0, 0, 0.1)',
            color: 'white'
        }
    },
    layout: {
        getPanel: function () {
            var style = {
                width: '100%',
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'stretch',
                alignContent: 'stretch',
                fontSize: XL,
                fontFamily: fontFamilyWriting
            };
            return style;
        },
        getHeader: function () {
            var style = {
                display: 'flex',
                margin: '2vh',
                marginBottom: 0,
                justifyContent: 'center',
                flexDirection: 'column',
                alignItems: 'center'
            };
            return style;
        },
        getBody: function () {
            var style = {
                display: 'flex',
                flexGrow: 1,
                paddingBottom: '2vh',
                paddingTop: '2vh',
                paddingLeft: '2vw',
                paddingRight: '2vw',
                flexDirection: 'column',
                alignItems: 'stretch',
            };
            return style;
        },
        getBodyContent: function () {
            var s = {
                display: 'flex',
                flexGrow: 1,
                flexDirection: 'column',
                alignItems: 'stretch',
            };
            return s;
        },
        getInstructions: function (id) {
            var style = {
                display: 'flex',
                paddingLeft: '2vw',
                paddingRight: '2vw',
                paddingTop: '1vh',
                paddingBottom: '1vh',
                cursor: cursorPointer,
                borderRadius: borderRadius,
                marginBottom: '1vh',
                fontSize: XL,
            };
            if (constants_1.isId.isDigitalTime(id)) {
                var digitalTime = {
                    fontSize: XL3,
                    fontFamily: fontFamilyTime,
                    backgroundColor: 'black',
                    color: 'white'
                };
                style = get(style, digitalTime);
            }
            return style;
        },
        getFooter: function () {
            var style = {
                display: 'flex'
            };
            return style;
        }
    }
};
module.exports = style;
},{"../../lessons/helper/constants":226,"../../utils/utils":314,"underscore":160}],310:[function(require,module,exports){
var english = require('./languages/english');
var d = english;
module.exports = d;
},{"./languages/english":312}],311:[function(require,module,exports){
var keys = {
    left: 37,
    up: 38,
    right: 39,
    down: 40
};
function dispatcher(e) {
    switch (e.keyCode) {
        case 37:
            console.log('left');
            break;
        case 38:
            console.log('up');
            prev();
            break;
        case 39:
            console.log('right');
            break;
        case 40:
            console.log('down');
            next();
            break;
    }
}
var element = null;
function findNextTabStop(el) {
    var universe = document.querySelectorAll('input, button, select, textarea, a[href]');
    var list = Array.prototype.filter.call(universe, function (item) { return item.tabIndex >= "0"; });
    var index = list.indexOf(el) || 0;
    return list[index + 1] || list[0];
}
function findPrevTabStop(el) {
    var universe = document.querySelectorAll('input, button, select, textarea, a[href]');
    var list = Array.prototype.filter.call(universe, function (item) { return item.tabIndex >= "0"; });
    var index = list.indexOf(el) || 0;
    return list[index - 1] || list[list.length - 1];
}
function next() {
    element = findNextTabStop(document.activeElement);
    element.focus();
}
function prev() {
    element = findPrevTabStop(document.activeElement);
    element.focus();
}
function bindKeys() {
    document.addEventListener("keydown", dispatcher);
}
module.exports = bindKeys;
},{}],312:[function(require,module,exports){
var dictonary = {
    menu: {
        USER: '',
        LESSONS: '',
        GRAMMAR: '',
        PRACTISE: '',
    },
    statistics: {
        titleEntries: 'Status:',
        entriesCorrect: 'Correct',
        entriesIncorrect: 'Incorrect',
        entriesUndane: 'Undane',
        lessonsFinished: 'Lessons finished:'
    },
    BACK: 'Back',
    SIGNATURE_PAD_CLEAR: 'clear',
    LOGEDIN_AS: 'Loged in as: ',
    LAST_LOGIN: 'Last login: ',
    LOG_OUT: 'Sign out',
    DONATE: 'Coffee',
    GRATULATIONS_TITLE: 'You answered all the questions',
    GRATULATIONS_TEXT: 'Your score is: ',
    GRATULATIONS_BUTTON: 'Continue',
    GRATULATIONS_SAVE_BUTTON: 'Save and Continue',
    GO_TEST: 'Test Yourself',
    SUBSCRIBING_EXPLANATION: 'Subscription will expire after given period, and will not be automatically extended.',
    SUBMIT_BUTTON_SUBSCRIBING_ONE_YEAR: 'Subscribe £4.99 for 1 year',
    SUBMIT_BUTTON_SUBSCRIBING_ONE_MONTH: 'Subscribe £1.99 for 1 month',
    SUBMIT_BUTTON_SUBSCRIBING_ONE_WEEK: 'Subscribe £0.99 for 1 week',
    SUBMIT_BUTTON_LOGIN: 'Login',
    SUBMIT_BUTTON_REGISTERING: 'Register',
    PERCENT: '%',
    NAME: 'Name',
    RETYPE_PASSWORD: 'Retype Password',
    PASSWORD: 'Password',
    EMAIL: 'Email',
    GO_REGISTERING: 'or Register',
    HEADER_SUBSCRIBING: 'Why not to invest in yourself? Subscribe to unblock all interactive lessons.',
    HEADER_SUBSCRIBED_VALID: 'Sbscription expire in:',
    HEADER_SUBSCRIBED_EXPIRED: 'Sbscription expired on: ',
    DAYS: 'days.',
    DAY: 'day.',
    SERVER_ERROR_TIMEOUT: 'Sorry, server not responding.',
    SERVER_ERROR_REQUEST: 'Sorry, server request error.',
    SERVER_ERROR_DUPLICATE_EMAIL: 'Sorry, this email already exist.',
    SERVER_ERROR_NO_RESPOND: 'Sorry, server is not responding.',
    SERVER_ERROR_INVALID_DATA: 'Sorry, invalid data.',
    SERVER_ERROR_SUBSCRIBING_WENT_WRONG: 'Sorry, subscribing fail.',
    ERROR_LOGIN_INVALID: 'Incorrect login or password.',
    ERROR_REGISTERING_NO_MATCH_PASSWORDS: 'Passwords did not match.',
    ERROR_REGISTERING_NO_NAME: 'Please enter a name.',
    ERROR_REGISTERING_NO_PASSWORD: 'Please enter a password.',
    ERROR_REGISTERING_NO_RETYPED_PASSWORD: 'Please retype a password.',
    ERROR_REGISTERING_NO_EMAIL: 'Please enter an email.',
    ERROR_REGISTERING_INVALID_EMAIL: 'Email is invalid.',
    ERROR_REGISTERING_PASSWORD_TO_SHORT: 'Password is to short.',
    INFO_BROWSER: 'Please use latest Chrome or Opera browser for an audio experience.'
};
module.exports = dictonary;
},{}],313:[function(require,module,exports){
function md5cycle(x, k) {
    var a = x[0], b = x[1], c = x[2], d = x[3];
    a = ff(a, b, c, d, k[0], 7, -680876936);
    d = ff(d, a, b, c, k[1], 12, -389564586);
    c = ff(c, d, a, b, k[2], 17, 606105819);
    b = ff(b, c, d, a, k[3], 22, -1044525330);
    a = ff(a, b, c, d, k[4], 7, -176418897);
    d = ff(d, a, b, c, k[5], 12, 1200080426);
    c = ff(c, d, a, b, k[6], 17, -1473231341);
    b = ff(b, c, d, a, k[7], 22, -45705983);
    a = ff(a, b, c, d, k[8], 7, 1770035416);
    d = ff(d, a, b, c, k[9], 12, -1958414417);
    c = ff(c, d, a, b, k[10], 17, -42063);
    b = ff(b, c, d, a, k[11], 22, -1990404162);
    a = ff(a, b, c, d, k[12], 7, 1804603682);
    d = ff(d, a, b, c, k[13], 12, -40341101);
    c = ff(c, d, a, b, k[14], 17, -1502002290);
    b = ff(b, c, d, a, k[15], 22, 1236535329);
    a = gg(a, b, c, d, k[1], 5, -165796510);
    d = gg(d, a, b, c, k[6], 9, -1069501632);
    c = gg(c, d, a, b, k[11], 14, 643717713);
    b = gg(b, c, d, a, k[0], 20, -373897302);
    a = gg(a, b, c, d, k[5], 5, -701558691);
    d = gg(d, a, b, c, k[10], 9, 38016083);
    c = gg(c, d, a, b, k[15], 14, -660478335);
    b = gg(b, c, d, a, k[4], 20, -405537848);
    a = gg(a, b, c, d, k[9], 5, 568446438);
    d = gg(d, a, b, c, k[14], 9, -1019803690);
    c = gg(c, d, a, b, k[3], 14, -187363961);
    b = gg(b, c, d, a, k[8], 20, 1163531501);
    a = gg(a, b, c, d, k[13], 5, -1444681467);
    d = gg(d, a, b, c, k[2], 9, -51403784);
    c = gg(c, d, a, b, k[7], 14, 1735328473);
    b = gg(b, c, d, a, k[12], 20, -1926607734);
    a = hh(a, b, c, d, k[5], 4, -378558);
    d = hh(d, a, b, c, k[8], 11, -2022574463);
    c = hh(c, d, a, b, k[11], 16, 1839030562);
    b = hh(b, c, d, a, k[14], 23, -35309556);
    a = hh(a, b, c, d, k[1], 4, -1530992060);
    d = hh(d, a, b, c, k[4], 11, 1272893353);
    c = hh(c, d, a, b, k[7], 16, -155497632);
    b = hh(b, c, d, a, k[10], 23, -1094730640);
    a = hh(a, b, c, d, k[13], 4, 681279174);
    d = hh(d, a, b, c, k[0], 11, -358537222);
    c = hh(c, d, a, b, k[3], 16, -722521979);
    b = hh(b, c, d, a, k[6], 23, 76029189);
    a = hh(a, b, c, d, k[9], 4, -640364487);
    d = hh(d, a, b, c, k[12], 11, -421815835);
    c = hh(c, d, a, b, k[15], 16, 530742520);
    b = hh(b, c, d, a, k[2], 23, -995338651);
    a = ii(a, b, c, d, k[0], 6, -198630844);
    d = ii(d, a, b, c, k[7], 10, 1126891415);
    c = ii(c, d, a, b, k[14], 15, -1416354905);
    b = ii(b, c, d, a, k[5], 21, -57434055);
    a = ii(a, b, c, d, k[12], 6, 1700485571);
    d = ii(d, a, b, c, k[3], 10, -1894986606);
    c = ii(c, d, a, b, k[10], 15, -1051523);
    b = ii(b, c, d, a, k[1], 21, -2054922799);
    a = ii(a, b, c, d, k[8], 6, 1873313359);
    d = ii(d, a, b, c, k[15], 10, -30611744);
    c = ii(c, d, a, b, k[6], 15, -1560198380);
    b = ii(b, c, d, a, k[13], 21, 1309151649);
    a = ii(a, b, c, d, k[4], 6, -145523070);
    d = ii(d, a, b, c, k[11], 10, -1120210379);
    c = ii(c, d, a, b, k[2], 15, 718787259);
    b = ii(b, c, d, a, k[9], 21, -343485551);
    x[0] = add32(a, x[0]);
    x[1] = add32(b, x[1]);
    x[2] = add32(c, x[2]);
    x[3] = add32(d, x[3]);
}
function cmn(q, a, b, x, s, t) {
    a = add32(add32(a, q), add32(x, t));
    return add32((a << s) | (a >>> (32 - s)), b);
}
function ff(a, b, c, d, x, s, t) {
    return cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function gg(a, b, c, d, x, s, t) {
    return cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function hh(a, b, c, d, x, s, t) {
    return cmn(b ^ c ^ d, a, b, x, s, t);
}
function ii(a, b, c, d, x, s, t) {
    return cmn(c ^ (b | (~d)), a, b, x, s, t);
}
function md51(s) {
    var txt = '';
    var n = s.length, state = [1732584193, -271733879, -1732584194, 271733878];
    var i;
    for (i = 64; i <= s.length; i += 64) {
        md5cycle(state, md5blk(s.substring(i - 64, i)));
    }
    s = s.substring(i - 64);
    var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    for (i = 0; i < s.length; i++)
        tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
    tail[i >> 2] |= 0x80 << ((i % 4) << 3);
    if (i > 55) {
        md5cycle(state, tail);
        for (i = 0; i < 16; i++)
            tail[i] = 0;
    }
    tail[14] = n * 8;
    md5cycle(state, tail);
    return state;
}
function md5blk(s) {
    var md5blks = [];
    var i;
    for (i = 0; i < 64; i += 4) {
        md5blks[i >> 2] = s.charCodeAt(i)
            + (s.charCodeAt(i + 1) << 8)
            + (s.charCodeAt(i + 2) << 16)
            + (s.charCodeAt(i + 3) << 24);
    }
    return md5blks;
}
var hex_chr = '0123456789abcdef'.split('');
function rhex(n) {
    var s = '', j = 0;
    for (; j < 4; j++)
        s += hex_chr[(n >> (j * 8 + 4)) & 0x0F]
            + hex_chr[(n >> (j * 8)) & 0x0F];
    return s;
}
function hex(x) {
    for (var i = 0; i < x.length; i++)
        x[i] = rhex(x[i]);
    return x.join('');
}
function md5(s) {
    return hex(md51(s));
}
var add32 = function (a, b) {
    return (a + b) & 0xFFFFFFFF;
};
if (md5('hello') != '5d41402abc4b2a76b9719d911017c592') {
    add32 = function (x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    };
}
module.exports = md5;
},{}],314:[function(require,module,exports){
var _ = require("underscore");
var voice = require("./voice");
exports.voice = voice;
var keys = require("./keys/keys");
exports.keys = keys;
var constants_1 = require('../lessons/helper/constants');
var Promise = require("bluebird");
var md5 = require('./md5');
exports.md5 = md5;
var clone = function (orig) {
    if (typeof orig === 'undefined')
        return orig;
    if (orig === null)
        return null;
    return JSON.parse(JSON.stringify(orig));
};
exports.clone = clone;
function delay(time) {
    return new Promise(function (resolve) {
        return resolve(null);
    }).delay(time || 2000);
}
exports.delay = delay;
function removeInvalidChars(s) {
    if (s)
        return s.replace(/[/|;"']/g, "");
    return s;
}
exports.removeInvalidChars = removeInvalidChars;
function isValidISODate(date) {
    return /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.test(date);
}
exports.isValidISODate = isValidISODate;
var _MS_PER_DAY = 1000 * 60 * 60 * 24;
function howManyDaysLeft(date) {
    if (date) {
        var a = new Date();
        var b = new Date(date);
        var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
        var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());
        return Math.floor((utc2 - utc1) / _MS_PER_DAY);
    }
    return 0;
}
exports.howManyDaysLeft = howManyDaysLeft;
function getISOdate(date) {
    date = date || new Date();
    return date.toISOString().substring(0, 10);
}
;
function getToDayISOdate() {
    return getISOdate();
}
exports.getToDayISOdate = getToDayISOdate;
function getNextYearISOdate() {
    var d = new Date();
    d.setFullYear(d.getFullYear() + 1);
    return getISOdate(d);
}
exports.getNextYearISOdate = getNextYearISOdate;
function getNextMonthISOdate() {
    var d = new Date();
    d.setMonth(d.getMonth() + 1);
    return getISOdate(d);
}
exports.getNextMonthISOdate = getNextMonthISOdate;
var SECOND_IN_MILLIS = 1000;
var MINUTE_IN_MILLIS = SECOND_IN_MILLIS * 60;
var HOUR_IN_MILLIS = MINUTE_IN_MILLIS * 60;
var DAY_IN_MILLIS = HOUR_IN_MILLIS * 24;
function getNext7DaysISOdate() {
    var d = new Date();
    var date = new Date(d.getTime() + (8 * DAY_IN_MILLIS));
    return getISOdate(date);
}
exports.getNext7DaysISOdate = getNext7DaysISOdate;
function getHumanizedDate(s) {
    if (s && s.length === 10) {
        var dArr = s.split("-");
        return dArr[2] + "-" + dArr[1] + "-" + dArr[0];
    }
    return s;
}
exports.getHumanizedDate = getHumanizedDate;
function tryToSetLowercaseFirstLetter(s, sentenceWords) {
    var sentenceWord = _.first(sentenceWords);
    var words = s.split(' ');
    var word = _.first(words);
    if (sentenceWord === word) {
        var allowLowercase = true;
        _.mapObject(constants_1.capital, function (category) {
            _.mapObject(category, function (capitalWord) {
                if (capitalWord === word) {
                    allowLowercase = false;
                }
            });
        });
        if (!allowLowercase) {
            return s;
        }
        return lowercaseFirstLetter(s);
    }
    return s;
}
exports.tryToSetLowercaseFirstLetter = tryToSetLowercaseFirstLetter;
function checkEmail(emailAddress) {
    var sQtext = '[^\\x0d\\x22\\x5c\\x80-\\xff]';
    var sDtext = '[^\\x0d\\x5b-\\x5d\\x80-\\xff]';
    var sAtom = '[^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+';
    var sQuotedPair = '\\x5c[\\x00-\\x7f]';
    var sDomainLiteral = '\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\x5d';
    var sQuotedString = '\\x22(' + sQtext + '|' + sQuotedPair + ')*\\x22';
    var sDomain_ref = sAtom;
    var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';
    var sWord = '(' + sAtom + '|' + sQuotedString + ')';
    var sDomain = sSubDomain + '(\\x2e' + sSubDomain + ')*';
    var sLocalPart = sWord + '(\\x2e' + sWord + ')*';
    var sAddrSpec = sLocalPart + '\\x40' + sDomain;
    var sValidEmail = '^' + sAddrSpec + '$';
    var reValidEmail = new RegExp(sValidEmail);
    return reValidEmail.test(emailAddress);
}
exports.checkEmail = checkEmail;
function lowercaseFirstLetter(s) {
    return s.charAt(0).toLowerCase() + s.slice(1);
}
function upercaseFirstLetter(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
}
exports.upercaseFirstLetter = upercaseFirstLetter;
function replaceAll(str, search, replacement) {
    return str.replace(new RegExp(search, 'g'), replacement);
}
exports.replaceAll = replaceAll;
;
function decimalAdjust(type, value, exp) {
    if (typeof exp === 'undefined' || +exp === 0) {
        return Math[type](value);
    }
    value = +value;
    exp = +exp;
    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
        return NaN;
    }
    value = value.toString().split('e');
    value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
    value = value.toString().split('e');
    return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
}
function round10(value, exp) {
    return decimalAdjust('round', value, exp);
}
exports.round10 = round10;
;
function toPercent(numb, length) {
    return (numb * 100) / length;
}
exports.toPercent = toPercent;
function toPercentHumanize(numb, length) {
    return toPercent(numb, length).toFixed(2) + '%';
}
exports.toPercentHumanize = toPercentHumanize;
function first(obj) {
    for (var a in obj)
        return a;
}
exports.first = first;
function union(first, second) {
    var result = {};
    for (var id in first) {
        result[id] = first[id];
    }
    for (var id in second) {
        if (!result.hasOwnProperty(id)) {
            result[id] = second[id];
        }
    }
    return result;
}
exports.union = union;
function union3(first, second, third) {
    var result = {};
    for (var id in first) {
        result[id] = first[id];
    }
    for (var id in second) {
        if (!result.hasOwnProperty(id)) {
            result[id] = second[id];
        }
    }
    for (var id in third) {
        if (!result.hasOwnProperty(id)) {
            result[id] = third[id];
        }
    }
    return result;
}
exports.union3 = union3;
function _getBrowser() {
    function get_browser_version() {
        var ua = navigator.userAgent, tem = null, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if (/trident/i.test(M[1])) {
            tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
            return { name: 'IE', version: (tem[1] || '') };
        }
        if (M[1] === 'Chrome') {
            tem = ua.match(/\bOPR\/(\d+)/);
            if (tem != null) {
                return { name: 'Opera', version: tem[1] };
            }
        }
        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
        if ((tem = ua.match(/version\/(\d+)/i)) != null) {
            M.splice(1, 1, tem[1]);
        }
        return {
            name: M[0],
            version: M[1]
        };
    }
    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
    var isFirefox = typeof window.InstallTrigger !== 'undefined';
    var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
    var isChrome = !!window.chrome && !isOpera || navigator.userAgent.indexOf('Electron') >= 0;
    var isIE = false || !!document.documentMode;
    var isEdge = !isIE && !!window.StyleMedia;
    var version = get_browser_version().version;
    return {
        isOpera: isOpera,
        isFirefox: isFirefox,
        isSafari: isSafari,
        isChrome: isChrome,
        isIE: isIE,
        isEdge: isEdge,
        version: parseInt(version, 10)
    };
}
var browser = null;
function getBrowser() {
    if (!browser)
        browser = _getBrowser();
    return browser;
}
exports.getBrowser = getBrowser;
function isBrowserSupported() {
    var b = getBrowser();
    if ((b.isChrome && b.version >= 47) ||
        (b.isFirefox && b.version >= 43) ||
        (b.isOpera && b.version >= 34)) {
        return true;
    }
    return false;
}
exports.isBrowserSupported = isBrowserSupported;
},{"../lessons/helper/constants":226,"./keys/keys":311,"./md5":313,"./voice":315,"bluebird":1,"underscore":160}],315:[function(require,module,exports){
var constants_1 = require('../lessons/helper/constants');
var read = function (value) {
    console.log('read', value);
    if (window.SpeechSynthesisUtterance && window.speechSynthesis) {
        value = value.replace(constants_1.space, '');
        value = value.replace('_', '');
        var utterance = new window.SpeechSynthesisUtterance(value);
        var voices = window.speechSynthesis.getVoices();
        utterance.voice = voices.filter(function (voice) { return voice.name == "Google UK English Male"; })[0];
        window.speechSynthesis.speak(utterance);
    }
};
var stopReading = function () {
    window.speechSynthesis && window.speechSynthesis.cancel();
};
module.exports = {
    read: read,
    stopReading: stopReading
};
},{"../lessons/helper/constants":226}]},{},[161])


//# sourceMappingURL=data:application/json;base64,
